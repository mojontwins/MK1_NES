// NES MK1 v2.0
// Copyleft Mojon Twins 2013, 2015, 2017, 2018

// ..\dev\assets\mscnes.h - Script pools and scripts interpreter
// generated by mscmk1 1.2 by the Mojon Twins

const unsigned char script_pool_0 [] = {
/*            0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F */
/* 0000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x22, 0x00, 0x3c, 0x00, 0x00, 0x00, 
/* 0001 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf0, 0xff, 0x51, 0xe9, 0x01, 0xff, 0xcf, 
/* 0002 */ 0xff, 0xff, 0x0c, 0x21, 0xf0, 0xff, 0xe2, 0x00, 0xff, 0x6b, 0x00, 0x6c, 0x01, 0x00, 0xff, 0x0b, 
/* 0003 */ 0x20, 0x07, 0x0a, 0xff, 0x68, 0x0e, 0x08, 0x6c, 0x01, 0x02, 0xff, 0xff, 0x03, 0xf0, 0xff, 0xff, 
/* 0004 */ 0xff
};

const unsigned char script_pool_1 [] = {
/*            0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F */
/* 0000 */ 0x18, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x3d, 0x00, 0x00, 0x00, 
/* 0001 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf0, 0xff, 0x51, 0x00, 0x01, 0x0f, 0xcf, 
/* 0002 */ 0xff, 0xff, 0x0c, 0x21, 0x00, 0x10, 0xe1, 0x00, 0xff, 0x6b, 0x0f, 0x6c, 0x00, 0x02, 0xff, 0xff, 
/* 0003 */ 0x0b, 0x20, 0x0e, 0x08, 0xff, 0x68, 0x07, 0x0a, 0x6c, 0x00, 0x02, 0xff, 0xff, 0x03, 0xf0, 0xff, 
/* 0004 */ 0xff, 0xff
};

const unsigned char * const script_pool [] = {
    script_pool_0, 
    script_pool_1
};

#ifdef CLEAR_FLAGS
void msc_clear_flags (void) {
    memfill (flags, 0, MAX_FLAGS);
}
#endif

unsigned char read_byte (void) {
    return *script ++;
}

unsigned char read_vbyte (void) {
    sc_c = *script ++;
    if (sc_c & 128) return flags [sc_c & 127];
    return sc_c;
}

void readxy (void) {
    sc_x = read_vbyte ();
    sc_y = read_vbyte ();
}

void reloc_player (void) {
    prx = read_vbyte () << 4;        px = prx << FIXBITS;
    pry = (read_vbyte () << 4) + 16; py = pry << FIXBITS;
}

void run_script (unsigned char whichs) {
    // read address offset from index
    gp_gen = (unsigned char *) script_pool [level] + (whichs << 1);
    rda = *gp_gen ++; rdb = *gp_gen;
    script_result = 0;
    if (!(rda | rdb)) return;
    script = (unsigned char *) script_pool [level] + rda + (rdb << 8);

    while ((sc_c = read_byte ()) != 0xff) {
        next_script = script + sc_c;
        sc_terminado = sc_continuar = 0;
        while (!sc_terminado) {
            switch (read_byte ()) {
                case 0x20: readxy (); sc_x <<= 4; sc_y = 16 + (sc_y << 4); sc_terminado = (!(prx + 7 >= sc_x && prx <= sc_x + 15 && pry + 15 >= sc_y && pry <= sc_y + 15)); break;
                case 0x21: sc_terminado = (!(prx >= read_byte () && prx <= read_byte ())); break;
                case 0xe1: sc_terminado = (pvx >= (signed char) read_vbyte ()); break;
                case 0xe2: sc_terminado = (pvx <= (signed char) read_vbyte ()); break;
                case 0xf0: break;
                case 0xff: sc_terminado = sc_continuar = 1; break;
            }
        }

        if (sc_continuar) {
            fire_script_success = 1;
            sc_terminado = 0;
            while (!sc_terminado) {
                switch (read_byte ()) {
                    case 0x51: f_zone_ac = 1; fzx1 = read_byte (); fzy1 = read_byte (); fzx2 = read_byte (); fzy2 = read_byte (); break;
                    case 0x68: reloc_player (); break;
                    case 0x6b: px = read_vbyte () << 10; break;
                    case 0x6c: level = read_vbyte (); n_pant = read_vbyte (); warp_to_level = 1; break;
                    case 0xff: sc_terminado = 1; break;
                }
            }
        }
        script = next_script;
    }
}
