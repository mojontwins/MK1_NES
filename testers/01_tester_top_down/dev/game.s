;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_unrle_vram
	.import		_memfill
	.import		_delay
	.export		_bitmasks
	.export		_bits
	.export		_jitter
	.export		_palts0
	.export		_palts1
	.export		_palss0
	.export		_behs0
	.export		_map_0
	.export		_map_0_locks
	.export		_map_1
	.export		_map_1_locks
	.export		_enems_0
	.export		_hotspots_0
	.export		_enems_1
	.export		_hotspots_1
	.export		_sspl_00
	.export		_sspl_01
	.export		_sspl_02
	.export		_sspl_03
	.export		_sspl_04
	.export		_sspl_05
	.export		_sspl_06
	.export		_sspl_07
	.export		_ssen_00
	.export		_ssen_01
	.export		_ssen_02
	.export		_ssen_03
	.export		_ssen_04
	.export		_ssen_05
	.export		_ssen_06
	.export		_ssen_07
	.export		_ssexpl
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_spr_logo_00
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_hs
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_map_w
	.export		_l_map_h
	.export		_l_player_max_objects
	.export		_l_player_max_enems
	.export		_l_pal_bg
	.export		_l_pal_fg
	.export		_l_ts_tmaps
	.export		_l_ts_pals
	.export		_l_behs
	.export		_l_spr_enems
	.export		_l_map
	.export		_l_locks
	.export		_l_n_bolts
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_music
	.export		_frame_rle
	.export		_title_rle
	.export		_cuts_rle
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_pad0
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_rds16
	.export		_gpint
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_ram
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rde
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_ast1
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_is_alive
	.export		_pregotten
	.export		_en_rmx
	.export		_en_rmy
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__en_state
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_sg_1
	.export		_en_sg_2
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pcx
	.export		_pcy
	.export		_pfacing
	.export		_pfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pfacinghlast
	.export		_pj
	.export		_pctj
	.export		_pgotten
	.export		_ppossee
	.export		_oppossee
	.export		_pflickering
	.export		_pbouncing
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_pfacingv
	.export		_pfacingh
	.export		_hitv
	.export		_hith
	.export		_prx_old
	.export		_pry_old
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pcontinues
	.export		_plife
	.export		_pkeys
	.export		_pobjs
	.export		_pammo
	.export		_pkilled
	.export		_pfiring
	.export		_bi
	.export		__bx
	.export		__by
	.export		_coco_it
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_map_h
	.export		_c_map_size
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_sc_x
	.export		_sc_y
	.export		_sc_n
	.export		_sc_c
	.export		_next_script
	.export		_script
	.export		_script_result
	.export		_sc_terminado
	.export		_sc_continuar
	.export		_ntsc
	.export		_ntsc_frame
	.export		_update_index
	.export		_update_list
	.export		_attr_table
	.export		_fader
	.export		_fade_delay
	.export		_map_attr
	.export		_map_buff
	.export		_first_game
	.export		_level
	.export		_c_max_enems
	.export		_n_pant
	.export		_on_pant
	.export		_half_life
	.export		_frame_counter
	.export		_real_frame_counter
	.export		_paused
	.export		_win_level
	.export		_game_over
	.export		_warp_to_level
	.export		_level_reset
	.export		_flick_override
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_oam_index_player
	.export		_b_slots
	.export		_b_slots_i
	.export		_bx
	.export		_by
	.export		_bmx
	.export		_bmy
	.export		_pctfr
	.export		_coco_slots
	.export		_coco_slots_i
	.export		_coco_on
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_brk_buff
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_pmayneedrelocation
	.export		_hact
	.export		_lkact
	.export		_msc_clear_flags
	.export		_run_script
	.export		_f_zone_ac
	.export		_fzx1
	.export		_fzx2
	.export		_fzy1
	.export		_fzy2
	.export		_fire_script_success
	.export		_flags
	.export		_en_t
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_s
	.export		_en_facing
	.export		_en_state
	.export		_en_flags
	.export		_en_cttouched
	.export		_en_life
	.export		_en_status
	.export		_en_ct
	.export		_en_rawv
	.export		_en_spr_x_mod
	.export		_en_spr_id
	.export		_en_invincible
	.export		_ep_x
	.export		_ep_y
	.export		_ep_mx
	.export		_ep_my
	.export		_player_render
	.export		_player_to_pixels
	.export		_fade_body
	.export		_fade_out
	.export		_fade_in
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_draw_map_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_update_cycle
	.export		_pr_ul_str
	.export		_cm_two_points
	.export		_collide
	.export		_add_sign
	.export		_run_fire_script
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_breakable_do_anim
	.export		_breakable_break
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_cocos_init
	.export		_cocos_shoot_aimed
	.export		_cocos_destroy
	.export		_cocos_do
	.export		_player_stop
	.export		_player_init
	.export		_player_kill
	.export		_player_process_tile
	.export		_fire_bullet
	.export		_bullets_destroy
	.export		_bullets_move
	.export		_player_move
	.export		_enems_persistent_load
	.export		_enems_persistent_update
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_init_fp
	.export		_enems_boioiong_init
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_bat_in
	.export		_bat_out
	.export		_pres_title
	.export		_pres_common
	.export		_pres_game_over
	.export		_pres_ending
	.export		_lower_end
	.export		_credits
	.export		_script_pool_0
	.export		_script_pool
	.export		_read_byte
	.export		_read_vbyte
	.export		_readxy
	.export		_flickscreen_do_horizontal
	.export		_flickscreen_do_vertical
	.export		_hotspots_do
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_jitter:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
_palts0:
	.byte	$0F
	.byte	$08
	.byte	$0A
	.byte	$18
	.byte	$0F
	.byte	$08
	.byte	$16
	.byte	$21
	.byte	$0F
	.byte	$08
	.byte	$0C
	.byte	$26
	.byte	$0F
	.byte	$08
	.byte	$1C
	.byte	$3C
_palts1:
	.byte	$0F
	.byte	$03
	.byte	$13
	.byte	$24
	.byte	$0F
	.byte	$03
	.byte	$00
	.byte	$21
	.byte	$0F
	.byte	$03
	.byte	$0C
	.byte	$32
	.byte	$0F
	.byte	$03
	.byte	$2C
	.byte	$3C
_palss0:
	.byte	$08
	.byte	$0F
	.byte	$1A
	.byte	$26
	.byte	$08
	.byte	$0F
	.byte	$11
	.byte	$26
	.byte	$08
	.byte	$0F
	.byte	$05
	.byte	$17
	.byte	$08
	.byte	$0F
	.byte	$27
	.byte	$38
_behs0:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$0B
	.byte	$0A
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_map_0:
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$5D
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$0D
	.byte	$D5
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$51
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$52
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$25
	.byte	$52
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$44
	.byte	$36
	.byte	$66
	.byte	$5F
	.byte	$56
	.byte	$66
	.byte	$63
	.byte	$44
	.byte	$44
	.byte	$01
	.byte	$00
	.byte	$51
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$44
	.byte	$43
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$51
	.byte	$00
	.byte	$10
	.byte	$34
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$51
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$56
	.byte	$66
	.byte	$60
	.byte	$66
	.byte	$F6
	.byte	$65
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$78
	.byte	$90
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$41
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$05
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$14
	.byte	$40
	.byte	$50
	.byte	$12
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$04
	.byte	$41
	.byte	$57
	.byte	$89
	.byte	$20
	.byte	$22
	.byte	$20
	.byte	$25
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$A0
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0A
	.byte	$A0
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0A
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$41
	.byte	$50
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$14
	.byte	$40
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$44
	.byte	$44
	.byte	$47
	.byte	$88
	.byte	$89
	.byte	$4A
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$41
	.byte	$10
	.byte	$10
	.byte	$4A
	.byte	$4A
	.byte	$A4
	.byte	$43
	.byte	$33
	.byte	$37
	.byte	$88
	.byte	$89
	.byte	$33
	.byte	$AA
	.byte	$BA
	.byte	$44
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$AB
	.byte	$0A
	.byte	$A4
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$AA
	.byte	$B0
	.byte	$14
	.byte	$A4
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$0A
	.byte	$A4
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$0A
	.byte	$AA
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$AB
	.byte	$00
	.byte	$04
	.byte	$A4
	.byte	$44
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$B0
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$AA
	.byte	$C0
	.byte	$00
	.byte	$CB
	.byte	$10
	.byte	$A4
	.byte	$A4
	.byte	$4A
	.byte	$AA
	.byte	$AA
	.byte	$B0
	.byte	$A1
	.byte	$0A
	.byte	$A4
	.byte	$44
	.byte	$44
	.byte	$AA
	.byte	$AB
	.byte	$01
	.byte	$A0
	.byte	$BA
	.byte	$A4
	.byte	$A4
	.byte	$AA
	.byte	$AB
	.byte	$B0
	.byte	$0A
	.byte	$A0
	.byte	$0B
	.byte	$BB
	.byte	$AA
	.byte	$AB
	.byte	$B0
	.byte	$01
	.byte	$AA
	.byte	$AA
	.byte	$10
	.byte	$00
	.byte	$BA
	.byte	$A2
	.byte	$20
	.byte	$1B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$00
	.byte	$0A
	.byte	$A2
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$2A
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$AB
	.byte	$BB
	.byte	$B7
	.byte	$88
	.byte	$89
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$A0
	.byte	$10
	.byte	$C1
	.byte	$01
	.byte	$00
	.byte	$C1
	.byte	$00
	.byte	$0A
	.byte	$AB
	.byte	$BB
	.byte	$B7
	.byte	$88
	.byte	$89
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$A0
	.byte	$01
	.byte	$C0
	.byte	$00
	.byte	$10
	.byte	$C0
	.byte	$10
	.byte	$0A
	.byte	$AB
	.byte	$BB
	.byte	$B7
	.byte	$88
	.byte	$89
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$A1
	.byte	$00
	.byte	$C1
	.byte	$00
	.byte	$10
	.byte	$C0
	.byte	$10
	.byte	$0A
	.byte	$AB
	.byte	$BB
	.byte	$B7
	.byte	$88
	.byte	$89
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$0A
	.byte	$A0
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$A5
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$50
	.byte	$0A
	.byte	$A5
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$50
	.byte	$0A
	.byte	$A5
	.byte	$05
	.byte	$66
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$51
	.byte	$0A
	.byte	$A5
	.byte	$05
	.byte	$01
	.byte	$56
	.byte	$66
	.byte	$50
	.byte	$50
	.byte	$0A
	.byte	$A5
	.byte	$15
	.byte	$10
	.byte	$50
	.byte	$00
	.byte	$60
	.byte	$51
	.byte	$0A
	.byte	$A5
	.byte	$16
	.byte	$5E
	.byte	$60
	.byte	$11
	.byte	$E0
	.byte	$50
	.byte	$0A
	.byte	$A5
	.byte	$00
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$60
	.byte	$50
	.byte	$0A
	.byte	$A6
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$61
	.byte	$0A
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$AB
	.byte	$0B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$A0
	.byte	$10
	.byte	$E0
	.byte	$AB
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$10
	.byte	$00
	.byte	$2A
	.byte	$1A
	.byte	$A0
	.byte	$01
	.byte	$01
	.byte	$A1
	.byte	$E0
	.byte	$00
	.byte	$2A
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$A0
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$AB
	.byte	$C0
	.byte	$10
	.byte	$C0
	.byte	$C1
	.byte	$01
	.byte	$0C
	.byte	$0A
	.byte	$A0
	.byte	$E0
	.byte	$00
	.byte	$A1
	.byte	$A0
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$A0
	.byte	$10
	.byte	$10
	.byte	$A0
	.byte	$A0
	.byte	$10
	.byte	$0A
	.byte	$1A
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$A0
	.byte	$A0
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$A0
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$A0
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$A2
	.byte	$10
	.byte	$10
	.byte	$A1
	.byte	$A2
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$A2
	.byte	$21
	.byte	$00
	.byte	$A0
	.byte	$A2
	.byte	$02
	.byte	$01
	.byte	$0A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$BF
	.byte	$BA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A4
	.byte	$4A
	.byte	$AB
	.byte	$01
	.byte	$0B
	.byte	$BB
	.byte	$A4
	.byte	$4A
	.byte	$44
	.byte	$AA
	.byte	$B0
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$BA
	.byte	$44
	.byte	$A4
	.byte	$AB
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$A4
	.byte	$AA
	.byte	$B2
	.byte	$0C
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$E0
	.byte	$BA
	.byte	$AB
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$56
	.byte	$66
	.byte	$50
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$1A
	.byte	$A1
	.byte	$50
	.byte	$10
	.byte	$51
	.byte	$00
	.byte	$10
	.byte	$15
	.byte	$0A
	.byte	$A0
	.byte	$50
	.byte	$50
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$05
	.byte	$0A
	.byte	$A0
	.byte	$50
	.byte	$51
	.byte	$0E
	.byte	$00
	.byte	$05
	.byte	$15
	.byte	$1A
	.byte	$A1
	.byte	$51
	.byte	$50
	.byte	$E0
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$0A
	.byte	$A0
	.byte	$50
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$05
	.byte	$1A
	.byte	$A1
	.byte	$50
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$0A
	.byte	$A0
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A2
	.byte	$20
	.byte	$02
	.byte	$22
	.byte	$D0
	.byte	$D0
	.byte	$10
	.byte	$0A
	.byte	$A2
	.byte	$C0
	.byte	$01
	.byte	$CD
	.byte	$0D
	.byte	$0D
	.byte	$00
	.byte	$0A
	.byte	$A2
	.byte	$10
	.byte	$00
	.byte	$D0
	.byte	$10
	.byte	$E0
	.byte	$D0
	.byte	$0A
	.byte	$A1
	.byte	$01
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$2A
	.byte	$A0
	.byte	$00
	.byte	$D1
	.byte	$D0
	.byte	$D0
	.byte	$D0
	.byte	$D0
	.byte	$2A
	.byte	$AD
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$01
	.byte	$0D
	.byte	$2A
	.byte	$A0
	.byte	$D1
	.byte	$10
	.byte	$E1
	.byte	$00
	.byte	$E0
	.byte	$D0
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$10
	.byte	$0D
	.byte	$00
	.byte	$2A
	.byte	$A0
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A0
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A0
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$A0
	.byte	$66
	.byte	$C6
	.byte	$66
	.byte	$66
	.byte	$C6
	.byte	$66
	.byte	$44
	.byte	$A0
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$1D
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$A1
	.byte	$00
	.byte	$10
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$44
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$0A
	.byte	$45
	.byte	$66
	.byte	$C6
	.byte	$6C
	.byte	$66
	.byte	$C6
	.byte	$60
	.byte	$1A
	.byte	$43
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$E0
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$4A
	.byte	$A0
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$14
	.byte	$44
	.byte	$AF
	.byte	$A4
	.byte	$AA
	.byte	$AC
	.byte	$AA
	.byte	$A4
	.byte	$AA
	.byte	$44
	.byte	$A1
	.byte	$AA
	.byte	$A4
	.byte	$AA
	.byte	$AA
	.byte	$4A
	.byte	$AA
	.byte	$AA
	.byte	$A0
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A0
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A0
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$A1
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$AB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$CB
	.byte	$AA
	.byte	$1A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$0A
	.byte	$A1
	.byte	$56
	.byte	$66
	.byte	$65
	.byte	$0E
	.byte	$00
	.byte	$AA
	.byte	$0A
	.byte	$A0
	.byte	$50
	.byte	$10
	.byte	$15
	.byte	$D0
	.byte	$00
	.byte	$AA
	.byte	$1A
	.byte	$A1
	.byte	$50
	.byte	$66
	.byte	$66
	.byte	$DD
	.byte	$00
	.byte	$BA
	.byte	$0A
	.byte	$A0
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$1A
	.byte	$A0
	.byte	$BB
	.byte	$BB
	.byte	$AA
	.byte	$AB
	.byte	$CB
	.byte	$BB
	.byte	$0A
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$A4
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$10
	.byte	$10
	.byte	$A4
	.byte	$A0
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$A1
	.byte	$01
	.byte	$00
	.byte	$AA
	.byte	$A0
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$C0
	.byte	$10
	.byte	$00
	.byte	$C4
	.byte	$C0
	.byte	$10
	.byte	$00
	.byte	$1C
	.byte	$A0
	.byte	$E1
	.byte	$E0
	.byte	$BB
	.byte	$B0
	.byte	$E0
	.byte	$1E
	.byte	$0A
	.byte	$A0
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$E0
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$07
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$45
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$44
	.byte	$14
	.byte	$54
	.byte	$45
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$44
	.byte	$04
	.byte	$54
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$43
	.byte	$41
	.byte	$44
	.byte	$40
	.byte	$14
	.byte	$44
	.byte	$14
	.byte	$34
	.byte	$40
	.byte	$40
	.byte	$44
	.byte	$31
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$04
	.byte	$41
	.byte	$40
	.byte	$4C
	.byte	$10
	.byte	$0C
	.byte	$44
	.byte	$14
	.byte	$04
	.byte	$40
	.byte	$40
	.byte	$44
	.byte	$EE
	.byte	$44
	.byte	$44
	.byte	$04
	.byte	$04
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$00
	.byte	$34
	.byte	$44
	.byte	$14
	.byte	$14
	.byte	$41
	.byte	$40
	.byte	$44
	.byte	$40
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$04
	.byte	$40
	.byte	$40
	.byte	$44
	.byte	$30
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$04
	.byte	$44
	.byte	$41
	.byte	$44
	.byte	$10
	.byte	$14
	.byte	$44
	.byte	$14
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$41
	.byte	$44
	.byte	$01
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$44
	.byte	$A4
	.byte	$40
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$4A
	.byte	$AA
	.byte	$41
	.byte	$44
	.byte	$0D
	.byte	$D4
	.byte	$44
	.byte	$14
	.byte	$AA
	.byte	$A4
	.byte	$40
	.byte	$44
	.byte	$E0
	.byte	$04
	.byte	$44
	.byte	$04
	.byte	$4A
	.byte	$44
	.byte	$41
	.byte	$44
	.byte	$0E
	.byte	$04
	.byte	$44
	.byte	$14
	.byte	$44
	.byte	$43
	.byte	$30
	.byte	$33
	.byte	$E0
	.byte	$03
	.byte	$33
	.byte	$03
	.byte	$34
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$00
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$14
	.byte	$45
	.byte	$5E
	.byte	$E5
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$54
	.byte	$45
	.byte	$60
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$54
	.byte	$45
	.byte	$11
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$54
	.byte	$45
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$10
	.byte	$55
	.byte	$54
	.byte	$46
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$EE
	.byte	$66
	.byte	$64
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$24
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$3F
	.byte	$33
	.byte	$33
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$41
	.byte	$3C
	.byte	$33
	.byte	$C3
	.byte	$43
	.byte	$C3
	.byte	$33
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$14
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$10
	.byte	$14
	.byte	$44
	.byte	$4C
	.byte	$44
	.byte	$C0
	.byte	$40
	.byte	$C4
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$30
	.byte	$40
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$40
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$55
	.byte	$55
	.byte	$14
	.byte	$40
	.byte	$E0
	.byte	$10
	.byte	$14
	.byte	$40
	.byte	$66
	.byte	$66
	.byte	$04
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$C0
	.byte	$00
	.byte	$C4
	.byte	$44
	.byte	$40
	.byte	$E0
	.byte	$E0
	.byte	$24
	.byte	$40
	.byte	$E0
	.byte	$33
	.byte	$44
	.byte	$4E
	.byte	$0D
	.byte	$1E
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$11
	.byte	$44
	.byte	$40
	.byte	$E0
	.byte	$E0
	.byte	$E4
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$4E
	.byte	$1E
	.byte	$02
	.byte	$04
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$44
	.byte	$40
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$11
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$33
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$42
	.byte	$44
	.byte	$30
	.byte	$10
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$42
	.byte	$04
	.byte	$44
	.byte	$30
	.byte	$17
	.byte	$88
	.byte	$89
	.byte	$03
	.byte	$44
	.byte	$D4
	.byte	$43
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$34
	.byte	$44
	.byte	$4D
	.byte	$78
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$90
	.byte	$D3
	.byte	$44
	.byte	$42
	.byte	$21
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$D4
	.byte	$42
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$42
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$42
	.byte	$22
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$10
	.byte	$0D
	.byte	$D4
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$0D
	.byte	$DD
	.byte	$D4
	.byte	$40
	.byte	$55
	.byte	$5A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A4
	.byte	$41
	.byte	$54
	.byte	$5B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$54
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$54
	.byte	$50
	.byte	$AA
	.byte	$A4
	.byte	$A5
	.byte	$55
	.byte	$04
	.byte	$41
	.byte	$54
	.byte	$51
	.byte	$AB
	.byte	$BB
	.byte	$B5
	.byte	$45
	.byte	$04
	.byte	$40
	.byte	$54
	.byte	$50
	.byte	$A0
	.byte	$00
	.byte	$15
	.byte	$45
	.byte	$04
	.byte	$40
	.byte	$54
	.byte	$50
	.byte	$A1
	.byte	$A0
	.byte	$05
	.byte	$45
	.byte	$14
	.byte	$40
	.byte	$54
	.byte	$50
	.byte	$A0
	.byte	$A0
	.byte	$05
	.byte	$45
	.byte	$04
	.byte	$40
	.byte	$55
	.byte	$50
	.byte	$A0
	.byte	$A0
	.byte	$05
	.byte	$55
	.byte	$04
	.byte	$41
	.byte	$66
	.byte	$61
	.byte	$A0
	.byte	$A0
	.byte	$06
	.byte	$66
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$11
	.byte	$AF
	.byte	$A0
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$A0
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$BB
	.byte	$AA
	.byte	$A1
	.byte	$AB
	.byte	$BB
	.byte	$BB
	.byte	$BA
	.byte	$AA
	.byte	$00
	.byte	$BB
	.byte	$B0
	.byte	$A0
	.byte	$20
	.byte	$10
	.byte	$0A
	.byte	$AA
	.byte	$E1
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$0E
	.byte	$AA
	.byte	$AB
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$AA
	.byte	$44
	.byte	$00
	.byte	$BA
	.byte	$C0
	.byte	$10
	.byte	$C4
	.byte	$A4
	.byte	$AA
	.byte	$4C
	.byte	$10
	.byte	$0C
	.byte	$A0
	.byte	$E0
	.byte	$44
	.byte	$A4
	.byte	$AA
	.byte	$44
	.byte	$0E
	.byte	$0A
	.byte	$A0
	.byte	$00
	.byte	$44
	.byte	$AA
	.byte	$AA
	.byte	$44
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$A4
	.byte	$44
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$0A
	.byte	$A1
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$00
	.byte	$0A
	.byte	$A0
	.byte	$10
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$30
	.byte	$00
	.byte	$DA
	.byte	$AD
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$22
	.byte	$2A
	.byte	$A1
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$22
	.byte	$2A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$0A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$0A
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$FB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$B4
	.byte	$42
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$42
	.byte	$22
	.byte	$78
	.byte	$88
	.byte	$88
	.byte	$9D
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$11
	.byte	$10
	.byte	$27
	.byte	$88
	.byte	$88
	.byte	$92
	.byte	$24
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$4E
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$33
	.byte	$33
	.byte	$44
	.byte	$07
	.byte	$89
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$12
	.byte	$10
	.byte	$4C
	.byte	$01
	.byte	$0C
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$22
	.byte	$20
	.byte	$44
	.byte	$0E
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$14
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$4C
	.byte	$10
	.byte	$0C
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$0E
	.byte	$03
	.byte	$33
	.byte	$34
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$04
	.byte	$44
	.byte	$30
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$12
	.byte	$20
	.byte	$04
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
_map_0_locks:
	.byte	$00
	.byte	$97
	.byte	$01
	.byte	$3A
	.byte	$07
	.byte	$47
	.byte	$0A
	.byte	$91
	.byte	$10
	.byte	$23
	.byte	$14
	.byte	$27
	.byte	$15
	.byte	$76
_map_1:
	.byte	$C4
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$02
	.byte	$24
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$24
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$24
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$42
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$C3
	.byte	$33
	.byte	$33
	.byte	$38
	.byte	$83
	.byte	$33
	.byte	$33
	.byte	$3C
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$52
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$50
	.byte	$05
	.byte	$52
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$D5
	.byte	$51
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$5D
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$50
	.byte	$05
	.byte	$10
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$51
	.byte	$15
	.byte	$10
	.byte	$50
	.byte	$15
	.byte	$10
	.byte	$50
	.byte	$05
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$6E
	.byte	$05
	.byte	$00
	.byte	$6E
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$E1
	.byte	$E5
	.byte	$10
	.byte	$E1
	.byte	$E5
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$0E
	.byte	$05
	.byte	$01
	.byte	$1E
	.byte	$05
	.byte	$50
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$05
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$66
	.byte	$66
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$66
	.byte	$65
	.byte	$51
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$10
	.byte	$05
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$05
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$25
	.byte	$50
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$05
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$50
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$10
	.byte	$10
	.byte	$F1
	.byte	$04
	.byte	$50
	.byte	$20
	.byte	$10
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$40
	.byte	$14
	.byte	$51
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$D0
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$20
	.byte	$04
	.byte	$DD
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$33
	.byte	$33
	.byte	$30
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$43
	.byte	$33
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$D0
	.byte	$D0
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$D4
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$D0
	.byte	$00
	.byte	$D4
	.byte	$40
	.byte	$00
	.byte	$B0
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$0D
	.byte	$D4
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$D0
	.byte	$10
	.byte	$D0
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$48
	.byte	$88
	.byte	$4B
	.byte	$BB
	.byte	$B8
	.byte	$8B
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$D0
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$4D
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$10
	.byte	$D0
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$D0
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$10
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$E0
	.byte	$D0
	.byte	$10
	.byte	$14
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$ED
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$D0
	.byte	$0E
	.byte	$00
	.byte	$10
	.byte	$D4
	.byte	$40
	.byte	$00
	.byte	$4D
	.byte	$0D
	.byte	$E0
	.byte	$00
	.byte	$0D
	.byte	$D4
	.byte	$48
	.byte	$88
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$FB
	.byte	$BB
	.byte	$BA
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$44
	.byte	$A4
	.byte	$AA
	.byte	$4A
	.byte	$44
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$41
	.byte	$00
	.byte	$B0
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$20
	.byte	$0A
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$20
	.byte	$41
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$48
	.byte	$88
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$24
	.byte	$42
	.byte	$00
	.byte	$B2
	.byte	$10
	.byte	$22
	.byte	$4B
	.byte	$BB
	.byte	$B5
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0D
	.byte	$A0
	.byte	$00
	.byte	$25
	.byte	$40
	.byte	$10
	.byte	$40
	.byte	$DD
	.byte	$DC
	.byte	$40
	.byte	$D0
	.byte	$05
	.byte	$40
	.byte	$00
	.byte	$4D
	.byte	$EC
	.byte	$E2
	.byte	$A0
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$00
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$41
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$1D
	.byte	$05
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$A2
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$00
	.byte	$4F
	.byte	$BB
	.byte	$BB
	.byte	$42
	.byte	$20
	.byte	$05
	.byte	$4B
	.byte	$BB
	.byte	$A0
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$BE
	.byte	$B4
	.byte	$41
	.byte	$00
	.byte	$4B
	.byte	$BB
	.byte	$BF
	.byte	$A1
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$A0
	.byte	$01
	.byte	$10
	.byte	$40
	.byte	$01
	.byte	$D4
	.byte	$47
	.byte	$89
	.byte	$4F
	.byte	$BB
	.byte	$BB
	.byte	$40
	.byte	$1D
	.byte	$DA
	.byte	$47
	.byte	$89
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$40
	.byte	$DD
	.byte	$04
	.byte	$47
	.byte	$89
	.byte	$4B
	.byte	$BB
	.byte	$BF
	.byte	$A0
	.byte	$01
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$10
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$40
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$10
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$42
	.byte	$21
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$04
	.byte	$48
	.byte	$84
	.byte	$BB
	.byte	$BB
	.byte	$B0
	.byte	$BB
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$E0
	.byte	$A1
	.byte	$0A
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$AB
	.byte	$BB
	.byte	$B1
	.byte	$04
	.byte	$40
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$0B
	.byte	$BB
	.byte	$B0
	.byte	$BB
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$AB
	.byte	$BB
	.byte	$BB
	.byte	$B1
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$88
	.byte	$A0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$10
	.byte	$A1
	.byte	$AB
	.byte	$BB
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$04
	.byte	$10
	.byte	$B1
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$40
	.byte	$1A
	.byte	$01
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$11
	.byte	$04
	.byte	$40
	.byte	$1B
	.byte	$BA
	.byte	$01
	.byte	$4E
	.byte	$BB
	.byte	$A0
	.byte	$14
	.byte	$40
	.byte	$10
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$A0
	.byte	$14
	.byte	$40
	.byte	$01
	.byte	$0A
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$48
	.byte	$8A
	.byte	$1A
	.byte	$01
	.byte	$BB
	.byte	$A1
	.byte	$A0
	.byte	$14
	.byte	$40
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$A1
	.byte	$A0
	.byte	$14
	.byte	$40
	.byte	$1A
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$A1
	.byte	$40
	.byte	$14
	.byte	$42
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$A0
	.byte	$14
	.byte	$40
	.byte	$1A
	.byte	$14
	.byte	$01
	.byte	$0D
	.byte	$A1
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$0A
	.byte	$00
	.byte	$AB
	.byte	$B1
	.byte	$A0
	.byte	$14
	.byte	$40
	.byte	$2A
	.byte	$1C
	.byte	$01
	.byte	$C0
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$0A
	.byte	$0A
	.byte	$10
	.byte	$40
	.byte	$01
	.byte	$A1
	.byte	$14
	.byte	$40
	.byte	$1A
	.byte	$8A
	.byte	$B1
	.byte	$A8
	.byte	$88
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$0A
	.byte	$01
	.byte	$A0
	.byte	$01
	.byte	$A1
	.byte	$04
	.byte	$42
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$8A
	.byte	$01
	.byte	$BB
	.byte	$B1
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$0A
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$1A
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$0B
	.byte	$BB
	.byte	$BA
	.byte	$00
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$0A
	.byte	$00
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$0B
	.byte	$BB
	.byte	$BA
	.byte	$0A
	.byte	$00
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$0A
	.byte	$8A
	.byte	$00
	.byte	$A0
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0C
	.byte	$BB
	.byte	$B1
	.byte	$04
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$8A
	.byte	$0A
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$8B
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$00
	.byte	$AB
	.byte	$BB
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$AA
	.byte	$A0
	.byte	$1A
	.byte	$AA
	.byte	$A1
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$BB
	.byte	$B0
	.byte	$1B
	.byte	$BB
	.byte	$B1
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$C0
	.byte	$00
	.byte	$C4
	.byte	$44
	.byte	$44
	.byte	$4A
	.byte	$44
	.byte	$45
	.byte	$78
	.byte	$88
	.byte	$95
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$A4
	.byte	$A5
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$A4
	.byte	$A4
	.byte	$44
	.byte	$4A
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$4A
	.byte	$4A
	.byte	$44
	.byte	$44
	.byte	$A5
	.byte	$78
	.byte	$88
	.byte	$95
	.byte	$44
	.byte	$A4
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$C0
	.byte	$00
	.byte	$CB
	.byte	$BB
	.byte	$B4
	.byte	$40
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$A4
	.byte	$4A
	.byte	$AA
	.byte	$44
	.byte	$A4
	.byte	$A4
	.byte	$A4
	.byte	$04
	.byte	$4B
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$CB
	.byte	$BB
	.byte	$BC
	.byte	$04
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$EE
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$14
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$01
	.byte	$14
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$D4
	.byte	$40
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$C6
	.byte	$66
	.byte	$6C
	.byte	$65
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$51
	.byte	$E0
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$0E
	.byte	$07
	.byte	$95
	.byte	$40
	.byte	$56
	.byte	$88
	.byte	$66
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$50
	.byte	$15
	.byte	$90
	.byte	$25
	.byte	$40
	.byte	$50
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$41
	.byte	$58
	.byte	$88
	.byte	$88
	.byte	$50
	.byte	$05
	.byte	$88
	.byte	$85
	.byte	$A0
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$05
	.byte	$41
	.byte	$58
	.byte	$88
	.byte	$88
	.byte	$50
	.byte	$05
	.byte	$88
	.byte	$85
	.byte	$40
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$41
	.byte	$58
	.byte	$88
	.byte	$88
	.byte	$50
	.byte	$05
	.byte	$88
	.byte	$85
	.byte	$40
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$50
	.byte	$15
	.byte	$00
	.byte	$05
	.byte	$41
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$A1
	.byte	$5D
	.byte	$D0
	.byte	$0D
	.byte	$50
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$40
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$05
	.byte	$00
	.byte	$15
	.byte	$A0
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$41
	.byte	$51
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$A0
	.byte	$50
	.byte	$16
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$05
	.byte	$40
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$41
	.byte	$50
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$66
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$00
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$56
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$15
	.byte	$05
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$51
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$40
	.byte	$56
	.byte	$68
	.byte	$66
	.byte	$65
	.byte	$86
	.byte	$66
	.byte	$05
	.byte	$40
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$15
	.byte	$10
	.byte	$00
	.byte	$15
	.byte	$40
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$40
	.byte	$53
	.byte	$33
	.byte	$C3
	.byte	$33
	.byte	$C3
	.byte	$33
	.byte	$34
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$03
	.byte	$C3
	.byte	$33
	.byte	$C3
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$50
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$04
	.byte	$A0
	.byte	$50
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$14
	.byte	$40
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$65
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$A1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$4D
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$4A
	.byte	$44
	.byte	$A4
	.byte	$45
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$35
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$05
	.byte	$10
	.byte	$40
	.byte	$14
	.byte	$48
	.byte	$33
	.byte	$34
	.byte	$05
	.byte	$15
	.byte	$01
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$00
	.byte	$41
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$40
	.byte	$14
	.byte	$43
	.byte	$33
	.byte	$33
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$46
	.byte	$66
	.byte	$60
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
	.byte	$33
	.byte	$30
	.byte	$0A
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$A0
	.byte	$10
	.byte	$66
	.byte	$65
	.byte	$05
	.byte	$78
	.byte	$88
	.byte	$9A
	.byte	$4D
	.byte	$D0
	.byte	$00
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$4D
	.byte	$10
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$66
	.byte	$64
	.byte	$AD
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$46
	.byte	$66
	.byte	$78
	.byte	$95
	.byte	$05
	.byte	$D0
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$66
	.byte	$60
	.byte	$14
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$15
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$E1
	.byte	$05
	.byte	$66
	.byte	$16
	.byte	$50
	.byte	$1E
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$04
	.byte	$C0
	.byte	$10
	.byte	$C5
	.byte	$00
	.byte	$10
	.byte	$5C
	.byte	$10
	.byte	$0C
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$78
	.byte	$85
	.byte	$00
	.byte	$10
	.byte	$58
	.byte	$89
	.byte	$04
	.byte	$46
	.byte	$60
	.byte	$16
	.byte	$6F
	.byte	$66
	.byte	$60
	.byte	$16
	.byte	$64
	.byte	$40
	.byte	$E0
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0E
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$44
	.byte	$C7
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$88
	.byte	$9C
	.byte	$44
	.byte	$43
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$34
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$D0
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$20
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$20
	.byte	$04
	.byte	$40
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$D0
	.byte	$00
	.byte	$D4
	.byte	$40
	.byte	$10
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$4D
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$D4
	.byte	$4D
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$24
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
_map_1_locks:
	.byte	$05
	.byte	$6C
	.byte	$07
	.byte	$6A
	.byte	$09
	.byte	$35
	.byte	$09
	.byte	$59
	.byte	$09
	.byte	$75
	.byte	$09
	.byte	$99
	.byte	$12
	.byte	$24
	.byte	$13
	.byte	$11
	.byte	$16
	.byte	$97
_enems_0:
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$03
	.byte	$53
	.byte	$94
	.byte	$02
	.byte	$03
	.byte	$5B
	.byte	$59
	.byte	$02
	.byte	$07
	.byte	$AB
	.byte	$8B
	.byte	$31
	.byte	$07
	.byte	$3E
	.byte	$5E
	.byte	$31
	.byte	$07
	.byte	$31
	.byte	$51
	.byte	$00
	.byte	$07
	.byte	$85
	.byte	$89
	.byte	$00
	.byte	$01
	.byte	$45
	.byte	$47
	.byte	$04
	.byte	$07
	.byte	$79
	.byte	$7A
	.byte	$00
	.byte	$07
	.byte	$85
	.byte	$84
	.byte	$00
	.byte	$01
	.byte	$45
	.byte	$49
	.byte	$04
	.byte	$01
	.byte	$69
	.byte	$65
	.byte	$04
	.byte	$01
	.byte	$85
	.byte	$89
	.byte	$04
	.byte	$07
	.byte	$64
	.byte	$65
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$4A
	.byte	$00
	.byte	$07
	.byte	$3D
	.byte	$4D
	.byte	$31
	.byte	$01
	.byte	$93
	.byte	$95
	.byte	$04
	.byte	$01
	.byte	$9C
	.byte	$99
	.byte	$04
	.byte	$07
	.byte	$4D
	.byte	$4C
	.byte	$00
	.byte	$01
	.byte	$96
	.byte	$98
	.byte	$04
	.byte	$07
	.byte	$94
	.byte	$84
	.byte	$31
	.byte	$03
	.byte	$8A
	.byte	$AA
	.byte	$02
	.byte	$07
	.byte	$43
	.byte	$63
	.byte	$00
	.byte	$07
	.byte	$9B
	.byte	$99
	.byte	$00
	.byte	$07
	.byte	$47
	.byte	$49
	.byte	$00
	.byte	$03
	.byte	$AA
	.byte	$88
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$45
	.byte	$04
	.byte	$03
	.byte	$33
	.byte	$34
	.byte	$01
	.byte	$02
	.byte	$34
	.byte	$54
	.byte	$02
	.byte	$02
	.byte	$5A
	.byte	$3A
	.byte	$04
	.byte	$02
	.byte	$77
	.byte	$97
	.byte	$02
	.byte	$02
	.byte	$5A
	.byte	$9A
	.byte	$04
	.byte	$07
	.byte	$75
	.byte	$73
	.byte	$00
	.byte	$07
	.byte	$31
	.byte	$33
	.byte	$00
	.byte	$01
	.byte	$31
	.byte	$35
	.byte	$04
	.byte	$01
	.byte	$39
	.byte	$3E
	.byte	$04
	.byte	$07
	.byte	$A8
	.byte	$A7
	.byte	$00
	.byte	$01
	.byte	$56
	.byte	$58
	.byte	$04
	.byte	$07
	.byte	$33
	.byte	$53
	.byte	$00
	.byte	$07
	.byte	$3C
	.byte	$5C
	.byte	$00
	.byte	$07
	.byte	$23
	.byte	$43
	.byte	$00
	.byte	$07
	.byte	$2C
	.byte	$4C
	.byte	$00
	.byte	$03
	.byte	$38
	.byte	$36
	.byte	$02
	.byte	$07
	.byte	$62
	.byte	$64
	.byte	$00
	.byte	$07
	.byte	$33
	.byte	$34
	.byte	$00
	.byte	$07
	.byte	$9E
	.byte	$9D
	.byte	$00
	.byte	$02
	.byte	$63
	.byte	$83
	.byte	$02
	.byte	$02
	.byte	$66
	.byte	$86
	.byte	$02
	.byte	$02
	.byte	$8A
	.byte	$6A
	.byte	$02
	.byte	$01
	.byte	$61
	.byte	$63
	.byte	$04
	.byte	$07
	.byte	$59
	.byte	$5A
	.byte	$00
	.byte	$07
	.byte	$3E
	.byte	$4E
	.byte	$00
	.byte	$07
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$07
	.byte	$6E
	.byte	$5E
	.byte	$00
	.byte	$07
	.byte	$29
	.byte	$39
	.byte	$00
	.byte	$07
	.byte	$7D
	.byte	$8D
	.byte	$00
	.byte	$07
	.byte	$75
	.byte	$76
	.byte	$00
	.byte	$07
	.byte	$3B
	.byte	$3A
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$93
	.byte	$04
	.byte	$01
	.byte	$9C
	.byte	$9E
	.byte	$04
	.byte	$04
	.byte	$47
	.byte	$47
	.byte	$01
	.byte	$07
	.byte	$42
	.byte	$44
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$48
	.byte	$00
	.byte	$07
	.byte	$94
	.byte	$96
	.byte	$00
	.byte	$03
	.byte	$75
	.byte	$71
	.byte	$01
	.byte	$01
	.byte	$88
	.byte	$8A
	.byte	$04
	.byte	$07
	.byte	$21
	.byte	$41
	.byte	$00
	.byte	$01
	.byte	$38
	.byte	$3A
	.byte	$04
	.byte	$07
	.byte	$53
	.byte	$55
	.byte	$00
	.byte	$07
	.byte	$63
	.byte	$65
	.byte	$00
_hotspots_0:
	.byte	$02
	.byte	$B5
	.byte	$04
	.byte	$39
	.byte	$02
	.byte	$3C
	.byte	$04
	.byte	$3D
	.byte	$04
	.byte	$AE
	.byte	$04
	.byte	$74
	.byte	$04
	.byte	$67
	.byte	$01
	.byte	$45
	.byte	$02
	.byte	$6A
	.byte	$01
	.byte	$5E
	.byte	$04
	.byte	$7E
	.byte	$02
	.byte	$76
	.byte	$01
	.byte	$57
	.byte	$04
	.byte	$38
	.byte	$04
	.byte	$81
	.byte	$01
	.byte	$6C
	.byte	$02
	.byte	$49
	.byte	$04
	.byte	$85
	.byte	$04
	.byte	$7A
	.byte	$01
	.byte	$36
	.byte	$02
	.byte	$6E
	.byte	$04
	.byte	$5A
	.byte	$02
	.byte	$95
	.byte	$00
	.byte	$10
_enems_1:
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$07
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$31
	.byte	$07
	.byte	$37
	.byte	$47
	.byte	$00
	.byte	$07
	.byte	$7A
	.byte	$6A
	.byte	$00
	.byte	$07
	.byte	$B7
	.byte	$B6
	.byte	$00
	.byte	$07
	.byte	$94
	.byte	$95
	.byte	$00
	.byte	$07
	.byte	$47
	.byte	$37
	.byte	$11
	.byte	$07
	.byte	$BD
	.byte	$AD
	.byte	$00
	.byte	$07
	.byte	$2E
	.byte	$3E
	.byte	$11
	.byte	$07
	.byte	$51
	.byte	$52
	.byte	$00
	.byte	$07
	.byte	$8B
	.byte	$7B
	.byte	$00
	.byte	$07
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$07
	.byte	$59
	.byte	$49
	.byte	$31
	.byte	$07
	.byte	$72
	.byte	$62
	.byte	$00
	.byte	$07
	.byte	$22
	.byte	$32
	.byte	$00
	.byte	$07
	.byte	$5B
	.byte	$6B
	.byte	$31
	.byte	$07
	.byte	$95
	.byte	$96
	.byte	$00
	.byte	$07
	.byte	$6A
	.byte	$5A
	.byte	$00
	.byte	$07
	.byte	$62
	.byte	$52
	.byte	$00
	.byte	$07
	.byte	$AC
	.byte	$AB
	.byte	$00
	.byte	$07
	.byte	$A7
	.byte	$A6
	.byte	$00
	.byte	$07
	.byte	$49
	.byte	$48
	.byte	$11
	.byte	$07
	.byte	$61
	.byte	$51
	.byte	$00
	.byte	$07
	.byte	$57
	.byte	$58
	.byte	$00
	.byte	$07
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$07
	.byte	$6E
	.byte	$6D
	.byte	$00
	.byte	$07
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$07
	.byte	$69
	.byte	$59
	.byte	$00
	.byte	$07
	.byte	$4B
	.byte	$3B
	.byte	$00
	.byte	$07
	.byte	$81
	.byte	$91
	.byte	$00
	.byte	$07
	.byte	$59
	.byte	$5A
	.byte	$00
	.byte	$07
	.byte	$37
	.byte	$47
	.byte	$00
	.byte	$07
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$07
	.byte	$6A
	.byte	$6B
	.byte	$00
	.byte	$07
	.byte	$56
	.byte	$46
	.byte	$00
	.byte	$07
	.byte	$56
	.byte	$46
	.byte	$00
	.byte	$07
	.byte	$7E
	.byte	$7D
	.byte	$00
	.byte	$07
	.byte	$58
	.byte	$68
	.byte	$00
	.byte	$07
	.byte	$68
	.byte	$47
	.byte	$01
	.byte	$01
	.byte	$49
	.byte	$47
	.byte	$04
	.byte	$01
	.byte	$97
	.byte	$99
	.byte	$04
	.byte	$07
	.byte	$97
	.byte	$87
	.byte	$31
	.byte	$02
	.byte	$28
	.byte	$68
	.byte	$04
	.byte	$02
	.byte	$6D
	.byte	$2D
	.byte	$04
	.byte	$07
	.byte	$75
	.byte	$65
	.byte	$00
	.byte	$07
	.byte	$6D
	.byte	$7D
	.byte	$00
	.byte	$07
	.byte	$69
	.byte	$6A
	.byte	$00
	.byte	$07
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$07
	.byte	$8C
	.byte	$7C
	.byte	$00
	.byte	$07
	.byte	$8A
	.byte	$89
	.byte	$00
	.byte	$07
	.byte	$75
	.byte	$76
	.byte	$00
	.byte	$07
	.byte	$7B
	.byte	$6B
	.byte	$00
	.byte	$07
	.byte	$B8
	.byte	$B7
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$4A
	.byte	$04
	.byte	$02
	.byte	$46
	.byte	$26
	.byte	$04
	.byte	$07
	.byte	$31
	.byte	$41
	.byte	$00
	.byte	$07
	.byte	$92
	.byte	$82
	.byte	$00
	.byte	$03
	.byte	$2A
	.byte	$BB
	.byte	$04
	.byte	$03
	.byte	$2E
	.byte	$AD
	.byte	$04
	.byte	$07
	.byte	$46
	.byte	$45
	.byte	$00
	.byte	$07
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$07
	.byte	$68
	.byte	$78
	.byte	$00
	.byte	$01
	.byte	$51
	.byte	$53
	.byte	$04
	.byte	$01
	.byte	$5E
	.byte	$5C
	.byte	$04
	.byte	$07
	.byte	$77
	.byte	$67
	.byte	$31
	.byte	$07
	.byte	$5C
	.byte	$4C
	.byte	$00
	.byte	$07
	.byte	$73
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$44
	.byte	$4B
	.byte	$08
_hotspots_1:
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$47
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$AD
	.byte	$02
	.byte	$2D
	.byte	$01
	.byte	$79
	.byte	$04
	.byte	$21
	.byte	$04
	.byte	$8E
	.byte	$01
	.byte	$AC
	.byte	$01
	.byte	$62
	.byte	$02
	.byte	$64
	.byte	$02
	.byte	$64
	.byte	$02
	.byte	$66
	.byte	$02
	.byte	$4B
	.byte	$02
	.byte	$B1
	.byte	$01
	.byte	$83
	.byte	$04
	.byte	$59
	.byte	$04
	.byte	$B3
	.byte	$01
	.byte	$B3
	.byte	$04
	.byte	$23
	.byte	$02
	.byte	$94
	.byte	$02
	.byte	$2B
	.byte	$04
	.byte	$68
	.byte	$00
	.byte	$10
_sspl_00:
	.byte	$FC
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$80
_sspl_01:
	.byte	$FC
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$80
_sspl_02:
	.byte	$FC
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$03
	.byte	$40
	.byte	$80
_sspl_03:
	.byte	$FC
	.byte	$00
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$07
	.byte	$40
	.byte	$80
_sspl_04:
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$80
_sspl_05:
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0E
	.byte	$00
	.byte	$80
_sspl_06:
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$80
_sspl_07:
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$80
_ssen_00:
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$17
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$18
	.byte	$03
	.byte	$80
_ssen_01:
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$15
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$43
	.byte	$80
_ssen_02:
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$1A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$1B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$1C
	.byte	$03
	.byte	$80
_ssen_03:
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$1C
	.byte	$83
	.byte	$00
	.byte	$08
	.byte	$19
	.byte	$83
	.byte	$08
	.byte	$08
	.byte	$1A
	.byte	$83
	.byte	$80
_ssen_04:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$1E
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$02
	.byte	$80
_ssen_05:
	.byte	$00
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$1F
	.byte	$42
	.byte	$80
_ssen_06:
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$24
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$25
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$01
	.byte	$80
_ssen_07:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$26
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$25
	.byte	$41
	.byte	$80
_ssexpl:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$29
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$2A
	.byte	$03
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$2D
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$01
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$31
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$01
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$35
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$36
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$39
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$3A
	.byte	$03
	.byte	$80
_spr_logo_00:
	.byte	$00
	.byte	$00
	.byte	$3B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$3D
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$3E
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$3F
	.byte	$03
	.byte	$28
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$43
	.byte	$01
	.byte	$18
	.byte	$08
	.byte	$44
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$45
	.byte	$03
	.byte	$28
	.byte	$08
	.byte	$46
	.byte	$03
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
_ts0_tmaps:
	.byte	$6B
	.byte	$95
	.byte	$7A
	.byte	$6C
	.byte	$6B
	.byte	$6D
	.byte	$7A
	.byte	$6C
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$96
	.byte	$97
	.byte	$97
	.byte	$96
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$71
	.byte	$71
	.byte	$74
	.byte	$6E
	.byte	$71
	.byte	$70
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9C
	.byte	$9D
	.byte	$A0
	.byte	$A1
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$B9
	.byte	$B9
	.byte	$BC
	.byte	$BD
	.byte	$B9
	.byte	$BE
	.byte	$8E
	.byte	$8F
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$93
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$7A
	.byte	$6B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$95
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$6B
	.byte	$95
	.byte	$7A
	.byte	$8D
_spr_player:
	.addr	_sspl_00
	.addr	_sspl_01
	.addr	_sspl_02
	.addr	_sspl_03
	.addr	_sspl_04
	.addr	_sspl_05
	.addr	_sspl_06
	.addr	_sspl_07
_spr_enems0:
	.addr	_ssen_00
	.addr	_ssen_01
	.word	$0000
	.word	$0000
	.addr	_ssen_00
	.addr	_ssen_01
	.word	$0000
	.word	$0000
	.addr	_ssen_02
	.addr	_ssen_03
	.word	$0000
	.word	$0000
	.addr	_ssen_02
	.addr	_ssen_03
	.word	$0000
	.word	$0000
	.addr	_ssen_04
	.addr	_ssen_05
	.word	$0000
	.word	$0000
	.addr	_ssen_04
	.addr	_ssen_05
	.word	$0000
	.word	$0000
	.addr	_ssen_06
	.addr	_ssen_07
	.word	$0000
	.word	$0000
	.addr	_ssen_06
	.addr	_ssen_07
	.word	$0000
	.word	$0000
	.addr	_ssexpl
_spr_hs:
	.word	$0000
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssit_03
_l_scr_ini:
	.byte	$17
	.byte	$17
_l_ini_x:
	.byte	$0C
	.byte	$0C
_l_ini_y:
	.byte	$09
	.byte	$09
_l_map_w:
	.byte	$01
	.byte	$01
_l_map_h:
	.byte	$18
	.byte	$18
_l_player_max_objects:
	.byte	$05
	.byte	$05
_l_player_max_enems:
	.byte	$00
	.byte	$00
_l_pal_bg:
	.addr	_palts0
	.addr	_palts1
_l_pal_fg:
	.addr	_palss0
	.addr	_palss0
_l_ts_tmaps:
	.addr	_ts0_tmaps
	.addr	_ts0_tmaps
_l_ts_pals:
	.addr	_ts0_pals
	.addr	_ts0_pals
_l_behs:
	.addr	_behs0
	.addr	_behs0
_l_spr_enems:
	.addr	_spr_enems0
	.addr	_spr_enems0
_l_map:
	.addr	_map_0
	.addr	_map_1
_l_locks:
	.addr	_map_0_locks
	.addr	_map_1_locks
_l_n_bolts:
	.byte	$07
	.byte	$09
_l_enems:
	.addr	_enems_0
	.addr	_enems_1
_l_hotspots:
	.addr	_hotspots_0
	.addr	_hotspots_1
_l_music:
	.byte	$00
	.byte	$00
_frame_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$62
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$42
	.byte	$41
	.byte	$42
	.byte	$45
	.byte	$46
	.byte	$42
	.byte	$41
	.byte	$47
	.byte	$48
	.byte	$01
	.byte	$05
	.byte	$49
	.byte	$41
	.byte	$42
	.byte	$4A
	.byte	$4B
	.byte	$42
	.byte	$41
	.byte	$42
	.byte	$4C
	.byte	$4D
	.byte	$42
	.byte	$41
	.byte	$4E
	.byte	$4F
	.byte	$4F
	.byte	$52
	.byte	$53
	.byte	$55
	.byte	$52
	.byte	$4F
	.byte	$52
	.byte	$56
	.byte	$57
	.byte	$52
	.byte	$4F
	.byte	$58
	.byte	$4F
	.byte	$01
	.byte	$05
	.byte	$5B
	.byte	$4F
	.byte	$52
	.byte	$5D
	.byte	$5E
	.byte	$52
	.byte	$4F
	.byte	$52
	.byte	$5F
	.byte	$60
	.byte	$52
	.byte	$4F
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$51
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$51
	.byte	$59
	.byte	$5A
	.byte	$01
	.byte	$05
	.byte	$5C
	.byte	$51
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$51
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$51
	.byte	$61
	.byte	$FF
	.byte	$01
	.byte	$37
	.byte	$0F
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$62
	.byte	$63
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$68
	.byte	$01
	.byte	$1B
	.byte	$64
	.byte	$65
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$1B
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$6C
	.byte	$6D
	.byte	$6C
	.byte	$01
	.byte	$16
	.byte	$6D
	.byte	$6C
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$6E
	.byte	$6F
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$6E
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$70
	.byte	$71
	.byte	$01
	.byte	$11
	.byte	$70
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$1B
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$0B
	.byte	$6D
	.byte	$6C
	.byte	$01
	.byte	$0E
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$6B
	.byte	$6D
	.byte	$6B
	.byte	$01
	.byte	$08
	.byte	$7A
	.byte	$6B
	.byte	$01
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$79
	.byte	$6C
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6B
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$7B
	.byte	$7D
	.byte	$7E
	.byte	$00
	.byte	$81
	.byte	$83
	.byte	$84
	.byte	$87
	.byte	$83
	.byte	$7E
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$6B
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$6C
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$7F
	.byte	$80
	.byte	$00
	.byte	$82
	.byte	$85
	.byte	$86
	.byte	$88
	.byte	$85
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$6C
	.byte	$6C
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$6C
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$6B
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$00
	.byte	$34
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2E
	.byte	$29
	.byte	$2E
	.byte	$27
	.byte	$00
	.byte	$24
	.byte	$21
	.byte	$39
	.byte	$00
	.byte	$6C
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$06
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$79
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$6D
	.byte	$6B
	.byte	$6B
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$6C
	.byte	$7A
	.byte	$6C
	.byte	$01
	.byte	$0A
	.byte	$6D
	.byte	$6C
	.byte	$01
	.byte	$0C
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$05
	.byte	$89
	.byte	$8A
	.byte	$6B
	.byte	$01
	.byte	$0B
	.byte	$89
	.byte	$8A
	.byte	$6B
	.byte	$01
	.byte	$05
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$05
	.byte	$8B
	.byte	$8C
	.byte	$6C
	.byte	$01
	.byte	$02
	.byte	$7A
	.byte	$6C
	.byte	$01
	.byte	$07
	.byte	$8B
	.byte	$8C
	.byte	$6C
	.byte	$01
	.byte	$05
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$15
	.byte	$7A
	.byte	$6B
	.byte	$01
	.byte	$04
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$02
	.byte	$8D
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6C
	.byte	$01
	.byte	$07
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$03
	.byte	$7A
	.byte	$6B
	.byte	$7A
	.byte	$6B
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$29
	.byte	$33
	.byte	$33
	.byte	$29
	.byte	$2F
	.byte	$2E
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$6B
	.byte	$7A
	.byte	$6B
	.byte	$01
	.byte	$05
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$04
	.byte	$8D
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6C
	.byte	$01
	.byte	$02
	.byte	$8D
	.byte	$6C
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6B
	.byte	$6D
	.byte	$6B
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$29
	.byte	$33
	.byte	$33
	.byte	$29
	.byte	$2F
	.byte	$2E
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$07
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6C
	.byte	$01
	.byte	$07
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$01
	.byte	$1B
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$01
	.byte	$1B
	.byte	$66
	.byte	$67
	.byte	$62
	.byte	$63
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$68
	.byte	$01
	.byte	$1B
	.byte	$64
	.byte	$65
	.byte	$60
	.byte	$50
	.byte	$01
	.byte	$05
	.byte	$90
	.byte	$11
	.byte	$C0
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$44
	.byte	$11
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$10
	.byte	$44
	.byte	$11
	.byte	$41
	.byte	$CC
	.byte	$FF
	.byte	$FF
	.byte	$33
	.byte	$14
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$A0
	.byte	$20
	.byte	$00
	.byte	$44
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$44
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$00
_cuts_rle:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$3F
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$02
	.byte	$1B
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$6B
	.byte	$02
	.byte	$1B
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$68
	.byte	$6C
	.byte	$6C
	.byte	$6D
	.byte	$6C
	.byte	$02
	.byte	$16
	.byte	$6D
	.byte	$6C
	.byte	$68
	.byte	$68
	.byte	$6B
	.byte	$02
	.byte	$03
	.byte	$6C
	.byte	$02
	.byte	$05
	.byte	$6D
	.byte	$6C
	.byte	$02
	.byte	$0A
	.byte	$6D
	.byte	$6C
	.byte	$02
	.byte	$04
	.byte	$89
	.byte	$8A
	.byte	$6B
	.byte	$6B
	.byte	$6C
	.byte	$02
	.byte	$03
	.byte	$6B
	.byte	$02
	.byte	$17
	.byte	$8B
	.byte	$8C
	.byte	$6C
	.byte	$6C
	.byte	$6B
	.byte	$02
	.byte	$03
	.byte	$6C
	.byte	$02
	.byte	$02
	.byte	$7A
	.byte	$6C
	.byte	$02
	.byte	$0A
	.byte	$7A
	.byte	$6C
	.byte	$02
	.byte	$07
	.byte	$6B
	.byte	$02
	.byte	$03
	.byte	$6C
	.byte	$02
	.byte	$03
	.byte	$6B
	.byte	$02
	.byte	$17
	.byte	$6C
	.byte	$02
	.byte	$03
	.byte	$6B
	.byte	$6C
	.byte	$02
	.byte	$05
	.byte	$6D
	.byte	$6C
	.byte	$02
	.byte	$04
	.byte	$6B
	.byte	$02
	.byte	$06
	.byte	$7A
	.byte	$6B
	.byte	$6B
	.byte	$6C
	.byte	$02
	.byte	$05
	.byte	$6D
	.byte	$6C
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6B
	.byte	$6C
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$6C
	.byte	$6B
	.byte	$02
	.byte	$04
	.byte	$6C
	.byte	$02
	.byte	$02
	.byte	$7A
	.byte	$6C
	.byte	$02
	.byte	$08
	.byte	$7A
	.byte	$6C
	.byte	$02
	.byte	$07
	.byte	$6B
	.byte	$02
	.byte	$04
	.byte	$6C
	.byte	$02
	.byte	$04
	.byte	$6B
	.byte	$02
	.byte	$15
	.byte	$6C
	.byte	$02
	.byte	$04
	.byte	$6B
	.byte	$6B
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$6C
	.byte	$02
	.byte	$05
	.byte	$6D
	.byte	$6C
	.byte	$6C
	.byte	$8E
	.byte	$8F
	.byte	$92
	.byte	$93
	.byte	$6C
	.byte	$02
	.byte	$04
	.byte	$6D
	.byte	$6C
	.byte	$6C
	.byte	$75
	.byte	$76
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$6B
	.byte	$6C
	.byte	$6C
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$6B
	.byte	$02
	.byte	$08
	.byte	$90
	.byte	$91
	.byte	$94
	.byte	$93
	.byte	$6B
	.byte	$02
	.byte	$07
	.byte	$77
	.byte	$78
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$6C
	.byte	$6B
	.byte	$02
	.byte	$03
	.byte	$6D
	.byte	$6C
	.byte	$75
	.byte	$76
	.byte	$7A
	.byte	$6C
	.byte	$02
	.byte	$08
	.byte	$89
	.byte	$8A
	.byte	$7A
	.byte	$6C
	.byte	$02
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$6C
	.byte	$02
	.byte	$02
	.byte	$6B
	.byte	$02
	.byte	$02
	.byte	$6C
	.byte	$02
	.byte	$04
	.byte	$6B
	.byte	$77
	.byte	$78
	.byte	$6B
	.byte	$02
	.byte	$09
	.byte	$8B
	.byte	$8C
	.byte	$6B
	.byte	$02
	.byte	$03
	.byte	$77
	.byte	$78
	.byte	$6B
	.byte	$02
	.byte	$02
	.byte	$6C
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$02
	.byte	$0D
	.byte	$75
	.byte	$76
	.byte	$6B
	.byte	$6B
	.byte	$89
	.byte	$8A
	.byte	$6B
	.byte	$02
	.byte	$07
	.byte	$69
	.byte	$6A
	.byte	$66
	.byte	$67
	.byte	$6C
	.byte	$02
	.byte	$0D
	.byte	$77
	.byte	$78
	.byte	$6C
	.byte	$6C
	.byte	$8B
	.byte	$8C
	.byte	$6C
	.byte	$02
	.byte	$07
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$02
	.byte	$1F
	.byte	$50
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$CC
	.byte	$FF
	.byte	$02
	.byte	$05
	.byte	$33
	.byte	$CC
	.byte	$FF
	.byte	$02
	.byte	$05
	.byte	$33
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$40
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$10
	.byte	$01
	.byte	$40
	.byte	$05
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
_script_pool_0:
	.byte	$6C
	.byte	$00
	.byte	$BD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$28
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$01
	.byte	$70
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$F0
	.byte	$FF
	.byte	$F4
	.byte	$64
	.byte	$10
	.byte	$74
	.byte	$11
	.byte	$84
	.byte	$12
	.byte	$65
	.byte	$13
	.byte	$75
	.byte	$14
	.byte	$85
	.byte	$15
	.byte	$FF
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$8F
	.byte	$FF
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$FF
	.byte	$F4
	.byte	$45
	.byte	$18
	.byte	$43
	.byte	$18
	.byte	$72
	.byte	$18
	.byte	$A3
	.byte	$18
	.byte	$A5
	.byte	$18
	.byte	$FF
	.byte	$FF
	.byte	$26
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$E3
	.byte	$1E
	.byte	$53
	.byte	$45
	.byte	$54
	.byte	$20
	.byte	$42
	.byte	$4F
	.byte	$4D
	.byte	$42
	.byte	$53
	.byte	$20
	.byte	$49
	.byte	$4E
	.byte	$20
	.byte	$43
	.byte	$4F
	.byte	$4D
	.byte	$50
	.byte	$55
	.byte	$54
	.byte	$45
	.byte	$52
	.byte	$20
	.byte	$41
	.byte	$4E
	.byte	$44
	.byte	$20
	.byte	$52
	.byte	$55
	.byte	$4E
	.byte	$21
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$54
	.byte	$21
	.byte	$50
	.byte	$9F
	.byte	$22
	.byte	$20
	.byte	$6F
	.byte	$41
	.byte	$05
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$20
	.byte	$04
	.byte	$05
	.byte	$18
	.byte	$E1
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$04
	.byte	$03
	.byte	$18
	.byte	$E1
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$07
	.byte	$02
	.byte	$18
	.byte	$E1
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$0A
	.byte	$03
	.byte	$18
	.byte	$E1
	.byte	$E0
	.byte	$00
	.byte	$20
	.byte	$0A
	.byte	$05
	.byte	$18
	.byte	$E1
	.byte	$E0
	.byte	$00
	.byte	$E3
	.byte	$1E
	.byte	$20
	.byte	$20
	.byte	$44
	.byte	$4F
	.byte	$4E
	.byte	$45
	.byte	$21
	.byte	$20
	.byte	$4E
	.byte	$4F
	.byte	$57
	.byte	$20
	.byte	$47
	.byte	$4F
	.byte	$20
	.byte	$42
	.byte	$41
	.byte	$43
	.byte	$4B
	.byte	$20
	.byte	$54
	.byte	$4F
	.byte	$20
	.byte	$42
	.byte	$41
	.byte	$53
	.byte	$45
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$13
	.byte	$F0
	.byte	$FF
	.byte	$20
	.byte	$01
	.byte	$04
	.byte	$16
	.byte	$20
	.byte	$02
	.byte	$04
	.byte	$17
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$51
	.byte	$20
	.byte	$20
	.byte	$32
	.byte	$5F
	.byte	$FF
	.byte	$FF
	.byte	$36
	.byte	$21
	.byte	$20
	.byte	$3F
	.byte	$22
	.byte	$21
	.byte	$5F
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$FF
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$E0
	.byte	$09
	.byte	$E3
	.byte	$1E
	.byte	$20
	.byte	$48
	.byte	$41
	.byte	$4C
	.byte	$46
	.byte	$20
	.byte	$4E
	.byte	$45
	.byte	$57
	.byte	$20
	.byte	$4D
	.byte	$4F
	.byte	$54
	.byte	$4F
	.byte	$52
	.byte	$42
	.byte	$49
	.byte	$4B
	.byte	$45
	.byte	$20
	.byte	$46
	.byte	$4F
	.byte	$52
	.byte	$20
	.byte	$53
	.byte	$41
	.byte	$4C
	.byte	$45
	.byte	$21
	.byte	$20
	.byte	$00
	.byte	$E1
	.byte	$E0
	.byte	$00
	.byte	$E0
	.byte	$08
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$FF
	.byte	$F1
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$F0
	.byte	$FF
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$26
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$E3
	.byte	$1E
	.byte	$20
	.byte	$53
	.byte	$45
	.byte	$54
	.byte	$20
	.byte	$35
	.byte	$20
	.byte	$42
	.byte	$4F
	.byte	$4D
	.byte	$42
	.byte	$53
	.byte	$20
	.byte	$49
	.byte	$4E
	.byte	$20
	.byte	$45
	.byte	$56
	.byte	$49
	.byte	$4C
	.byte	$20
	.byte	$43
	.byte	$4F
	.byte	$4D
	.byte	$50
	.byte	$55
	.byte	$54
	.byte	$45
	.byte	$52
	.byte	$20
	.byte	$00
	.byte	$FF
	.byte	$26
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$FF
	.byte	$E3
	.byte	$1E
	.byte	$42
	.byte	$4F
	.byte	$4D
	.byte	$42
	.byte	$53
	.byte	$20
	.byte	$41
	.byte	$52
	.byte	$45
	.byte	$20
	.byte	$53
	.byte	$45
	.byte	$54
	.byte	$21
	.byte	$20
	.byte	$52
	.byte	$45
	.byte	$54
	.byte	$55
	.byte	$52
	.byte	$4E
	.byte	$20
	.byte	$54
	.byte	$4F
	.byte	$20
	.byte	$42
	.byte	$41
	.byte	$53
	.byte	$45
	.byte	$21
	.byte	$00
	.byte	$FF
	.byte	$FF
_script_pool:
	.addr	_script_pool_0
	.addr	_script_pool_0
L0001:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00,$4E,$49,$43,$45,$20
	.byte	$54,$52,$59,$2C,$20,$42,$55,$54,$20,$4E,$4F,$20,$42,$41,$4E,$41
	.byte	$4E,$41,$21,$00,$44,$4F,$20,$49,$54,$20,$42,$45,$54,$54,$45,$52
	.byte	$20,$4E,$45,$58,$54,$20,$54,$49,$4D,$45,$00,$4D,$49,$53,$53,$49
	.byte	$4F,$4E,$20,$46,$41,$49,$4C,$45,$44,$00,$43,$4F,$4E,$47,$52,$41
	.byte	$54,$55,$4C,$41,$54,$49,$4F,$4E,$53,$21,$00,$59,$4F,$55,$20,$4D
	.byte	$41,$4E,$41,$47,$45,$44,$20,$54,$4F,$20,$53,$45,$54,$20,$54,$48
	.byte	$45,$20,$42,$4F,$4D,$42,$53,$00,$41,$4E,$44,$20,$44,$45,$53,$54
	.byte	$52,$4F,$59,$20,$54,$48,$45,$20,$43,$4F,$4D,$50,$55,$54,$45,$52
	.byte	$00,$4D,$49,$53,$53,$49,$4F,$4E,$20,$41,$43,$43,$4F,$4D,$50,$4C
	.byte	$49,$53,$48,$45,$44,$21,$21,$00,$53,$47,$54,$2E,$20,$48,$45,$4C
	.byte	$4D,$45,$54,$20,$2D,$20,$54,$52,$41,$49,$4E,$49,$4E,$47,$20,$44
	.byte	$41,$59,$00,$4E,$45,$53,$4C,$49,$42,$20,$26,$20,$53,$46,$58,$20
	.byte	$43,$4F,$44,$45,$20,$42,$59,$20,$53,$48,$49,$52,$55,$00,$54,$49
	.byte	$54,$4C,$45,$20,$54,$55,$4E,$45,$20,$41,$52,$52,$20,$42,$59,$20
	.byte	$44,$41,$56,$49,$44,$49,$41,$4E,$00,$28,$43,$29,$20,$32,$30,$31
	.byte	$33,$2C,$32,$30,$31,$38,$20,$42,$59,$20,$54,$48,$45,$20,$4D,$4F
	.byte	$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$00,$44,$45,$53,$49,$47,$4E
	.byte	$3A,$41,$4E,$4A,$55,$45,$4C,$20,$20,$4E,$45,$53,$20,$50,$4F,$52
	.byte	$54,$3A,$4E,$41,$2D,$54,$48,$2D,$41,$4E,$00,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_pad0:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_rds16:
	.res	2,$00
_gpint:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rde:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_ast1:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
_en_rmx:
	.res	3,$00
_en_rmy:
	.res	3,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__en_state:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_sg_1:
	.res	1,$00
_en_sg_2:
	.res	1,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pcx:
	.res	1,$00
_pcy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pfacinghlast:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_oppossee:
	.res	1,$00
_pflickering:
	.res	1,$00
_pbouncing:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_pfacingv:
	.res	1,$00
_pfacingh:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pcontinues:
	.res	1,$00
_plife:
	.res	1,$00
_pkeys:
	.res	1,$00
_pobjs:
	.res	1,$00
_pammo:
	.res	1,$00
_pkilled:
	.res	1,$00
_pfiring:
	.res	1,$00
_bi:
	.res	1,$00
__bx:
	.res	1,$00
__by:
	.res	1,$00
_coco_it:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_map_h:
	.res	1,$00
_c_map_size:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
_sc_x:
	.res	1,$00
_sc_y:
	.res	1,$00
_sc_n:
	.res	1,$00
_sc_c:
	.res	1,$00
_next_script:
	.res	2,$00
_script:
	.res	2,$00
_script_result:
	.res	1,$00
_sc_terminado:
	.res	1,$00
_sc_continuar:
	.res	1,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ntsc_frame:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_attr_table:
	.res	64,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_first_game:
	.res	1,$00
_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_real_frame_counter:
	.res	1,$00
_paused:
	.res	1,$00
_win_level:
	.res	1,$00
_game_over:
	.res	1,$00
_warp_to_level:
	.res	1,$00
_level_reset:
	.res	1,$00
_flick_override:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_oam_index_player:
	.res	1,$00
_b_slots:
	.res	4,$00
_b_slots_i:
	.res	1,$00
_bx:
	.res	4,$00
_by:
	.res	4,$00
_bmx:
	.res	4,$00
_bmy:
	.res	4,$00
_pctfr:
	.res	1,$00
_coco_slots:
	.res	4,$00
_coco_slots_i:
	.res	1,$00
_coco_on:
	.res	4,$00
_coco_x:
	.res	8,$00
_coco_y:
	.res	8,$00
_coco_vx:
	.res	8,$00
_coco_vy:
	.res	8,$00
_brk_buff:
	.res	192,$00
_brkf:
	.res	4,$00
_brkx:
	.res	4,$00
_brky:
	.res	4,$00
_pmayneedrelocation:
	.res	1,$00
_hact:
	.res	24,$00
_lkact:
	.res	16,$00
_f_zone_ac:
	.res	1,$00
_fzx1:
	.res	1,$00
_fzx2:
	.res	1,$00
_fzy1:
	.res	1,$00
_fzy2:
	.res	1,$00
_fire_script_success:
	.res	1,$00
_flags:
	.res	16,$00
_en_t:
	.res	3,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_en_state:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_cttouched:
	.res	3,$00
_en_life:
	.res	3,$00
_en_status:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_spr_x_mod:
	.res	1,$00
_en_spr_id:
	.res	3,$00
_en_invincible:
	.res	3,$00
_ep_x:
	.res	72,$00
_ep_y:
	.res	72,$00
_ep_mx:
	.res	72,$00
_ep_my:
	.res	72,$00
_lower_end:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ msc_clear_flags (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_msc_clear_flags: near

.segment	"CODE"

;
; memfill (flags, 0, MAX_FLAGS);
;
	jsr     decsp3
	lda     #<(_flags)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_flags)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$10
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ run_script (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run_script: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) script_pool [level] + (whichs << 1);
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2D15
	inx
	clc
L2D15:	adc     #<(_script_pool)
	sta     ptr1
	txa
	adc     #>(_script_pool)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2D16
	inx
	clc
L2D16:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	sta     _gp_gen
	stx     _gp_gen+1
;
; rda = *gp_gen ++; rdb = *gp_gen;
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2A7C
	inx
L2A7C:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rdb
;
; script_result = 0;
;
	tya
	sta     _script_result
;
; if (!(rda | rdb)) return;
;
	tax
	lda     _rdb
	ora     _rda
	pha
	pla
	jeq     incsp1
;
; script = (unsigned char *) script_pool [level] + rda + (rdb << 8);
;
	lda     _level
	asl     a
	bcc     L2D17
	inx
	clc
L2D17:	adc     #<(_script_pool)
	sta     ptr1
	txa
	adc     #>(_script_pool)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     _rda
	bcc     L2D0D
	inx
L2D0D:	sta     ptr1
	stx     ptr1+1
	tya
	clc
	adc     ptr1
	sta     _script
	lda     _rdb
	adc     ptr1+1
L2D1A:	sta     _script+1
;
; while ((sc_c = read_byte ()) != 0xff) {
;
	jsr     _read_byte
	sta     _sc_c
	cmp     #$FF
	jeq     incsp1
;
; next_script = script + sc_c;
;
	lda     _script
	ldx     _script+1
	clc
	adc     _sc_c
	bcc     L2D0E
	inx
L2D0E:	sta     _next_script
	stx     _next_script+1
;
; sc_terminado = sc_continuar = 0;
;
	lda     #$00
L2D19:	sta     _sc_continuar
L2D13:	sta     _sc_terminado
;
; while (!sc_terminado) {
;
L2A92:	lda     _sc_terminado
	jne     L2A93
;
; switch (read_byte ()) {
;
	jsr     _read_byte
;
; }
;
	cmp     #$10
	beq     L2A99
	cmp     #$21
	beq     L2AA1
	cmp     #$22
	beq     L2AA9
	cmp     #$41
	beq     L2AB1
	cmp     #$F0
	beq     L2A92
	cmp     #$FF
	beq     L2AB8
	jmp     L2A92
;
; case 0x10: readxy (); sc_terminado = (flags [sc_x] != sc_y); break;
;
L2A99:	jsr     _readxy
	ldy     _sc_x
	lda     _flags,y
	cmp     _sc_y
	jsr     boolne
	jmp     L2D13
;
; case 0x21: sc_terminado = (!(prx >= read_byte () && prx <= read_byte ())); break;
;
L2AA1:	lda     _prx
	jsr     pusha0
	jsr     _read_byte
	jsr     tosicmp
	bcc     L2AA6
	lda     _prx
	jsr     pusha0
	jsr     _read_byte
	jsr     tosicmp
	bcc     L2AA5
	beq     L2AA5
L2AA6:	lda     #$00
	jmp     L2AA7
L2AA5:	lda     #$01
L2AA7:	jsr     bnega
	jmp     L2D13
;
; case 0x22: sc_terminado = (!(pry >= read_byte () && pry <= read_byte ())); break;
;
L2AA9:	lda     _pry
	jsr     pusha0
	jsr     _read_byte
	jsr     tosicmp
	bcc     L2AAE
	lda     _pry
	jsr     pusha0
	jsr     _read_byte
	jsr     tosicmp
	bcc     L2AAD
	beq     L2AAD
L2AAE:	lda     #$00
	jmp     L2AAF
L2AAD:	lda     #$01
L2AAF:	jsr     bnega
	jmp     L2D13
;
; case 0x41: sc_terminado = (pobjs != read_vbyte ()); break;
;
L2AB1:	lda     _pobjs
	jsr     pusha0
	jsr     _read_vbyte
	jsr     tosneax
	jmp     L2D13
;
; case 0xff: sc_terminado = sc_continuar = 1; break;
;
L2AB8:	lda     #$01
	jmp     L2D19
;
; if (sc_continuar) {
;
L2A93:	lda     _sc_continuar
	jeq     L2AC3
;
; fire_script_success = 1;
;
	lda     #$01
	sta     _fire_script_success
;
; sc_terminado = 0;
;
	lda     #$00
L2D14:	sta     _sc_terminado
;
; while (!sc_terminado) {
;
L2AC2:	lda     _sc_terminado
	jne     L2AC3
;
; switch (read_byte ()) {
;
	jsr     _read_byte
;
; }
;
	cmp     #$01
	beq     L2AC9
	cmp     #$20
	beq     L2AD0
	cmp     #$51
	beq     L2ADA
	cmp     #$E0
	jeq     L2B07
	cmp     #$E1
	beq     L2AE6
	cmp     #$E3
	beq     L2AE9
	cmp     #$F1
	jeq     L2B0C
	cmp     #$F4
	jeq     L2AF8
	cmp     #$FF
	jeq     L2B10
	jmp     L2AC2
;
; case 0x01: readxy (); flags [sc_x] = sc_y; break;
;
L2AC9:	jsr     _readxy
	ldy     _sc_x
	lda     _sc_y
	sta     _flags,y
	jmp     L2AC2
;
; case 0x20: readxy (); _x = sc_x; _y = sc_y; _t = read_vbyte (); map_set (); break;
;
L2AD0:	jsr     _readxy
	lda     _sc_x
	sta     __x
	lda     _sc_y
	sta     __y
	jsr     _read_vbyte
	sta     __t
	jsr     _map_set
	jmp     L2AC2
;
; case 0x51: f_zone_ac = 1; fzx1 = read_byte (); fzy1 = read_byte (); fzx2 = read_byte (); fzy2 = read_byte (); break;
;
L2ADA:	lda     #$01
	sta     _f_zone_ac
	jsr     _read_byte
	sta     _fzx1
	jsr     _read_byte
	sta     _fzy1
	jsr     _read_byte
	sta     _fzx2
	jsr     _read_byte
	sta     _fzy2
	jmp     L2AC2
;
; case 0xe1: update_cycle (); break;
;
L2AE6:	jsr     _update_cycle
	jmp     L2AC2
;
; case 0xe3: _x = LINE_OF_TEXT_X; _y = LINE_OF_TEXT; gp_gen = script; sc_n = read_byte (); script += (sc_n + 1); pr_ul_str (); break;
;
L2AE9:	lda     #$01
	sta     __x
	lda     #$1A
	sta     __y
	lda     _script
	sta     _gp_gen
	lda     _script+1
	sta     _gp_gen+1
	jsr     _read_byte
	sta     _sc_n
	ldx     #$00
	lda     _sc_n
	clc
	adc     #$01
	bcc     L2D18
	inx
	clc
L2D18:	adc     _script
	sta     _script
	txa
	adc     _script+1
	sta     _script+1
	jsr     _pr_ul_str
	jmp     L2AC2
;
; case 0xf4: while (0xff != (sc_x = read_byte ())) { _x = sc_x >> 4; _y = sc_x & 15; _t = read_byte (); map_set (); update_cycle (); } break;
;
L2AF8:	lda     #$FF
	jsr     pusha0
	jsr     _read_byte
	sta     _sc_x
	jsr     tosicmp
	jeq     L2AC2
	ldx     #$00
	lda     _sc_x
	jsr     asrax4
	sta     __x
	lda     _sc_x
	and     #$0F
	sta     __y
	jsr     _read_byte
	sta     __t
	jsr     _map_set
	jsr     _update_cycle
	jmp     L2AF8
;
; case 0xe0: sfx_play (read_vbyte (), 1); break;
;
L2B07:	jsr     _read_vbyte
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
	jmp     L2AC2
;
; case 0xf1: script_result = 1; return;
;
L2B0C:	lda     #$01
	sta     _script_result
	jmp     incsp1
;
; case 0xff: sc_terminado = 1; break;
;
L2B10:	lda     #$01
	jmp     L2D14
;
; script = next_script;
;
L2AC3:	lda     _next_script
	sta     _script
	lda     _next_script+1
;
; }
;
	jmp     L2D1A

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (0 == pflickering || half_life) 
;
	lda     _pflickering
	beq     L1F93
	lda     _half_life
	bne     L1F93
	rts
;
; prx,
;
L1F93:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
;
; pry + SPRITE_ADJUST, 
;
	lda     _pry
	clc
	adc     #$10
	sec
	sbc     #$08
	bcs     L2D1D
	sec
L2D1D:	sbc     #$10
	bcs     L2D1E
	sec
L2D1E:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L2D1F
	inx
	clc
L2D1F:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_body (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_body: near

.segment	"CODE"

;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; -- fader) {
;
	lda     #$04
	sta     _fader
L1C49:	ldx     _fader
	bmi     L1C4A
;
; fade_body ();
;
	jsr     _fade_body
;
; for (fader = 4; fader > -1; -- fader) {
;
	dec     _fader
	lda     _fader
	bpl     L1C49
	jmp     L1C49
;
; }
;
L1C4A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; ++ fader) {
;
	lda     #$00
	sta     _fader
L1C55:	lda     _fader
	sec
	sbc     #$05
	bvc     L1C5D
	eor     #$80
L1C5D:	bpl     L1C56
;
; fade_body ();
;
	jsr     _fade_body
;
; for (fader = 0; fader < 5; ++ fader) {
;
	inc     _fader
	lda     _fader
	bpl     L1C55
	jmp     L1C55
;
; }
;
L1C56:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (0x2000); vram_fill(0x00, 
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
;
; );
;
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; __asm__ ("ldx %v", update_index);
;
	ldx     _update_index
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inc %v", gp_addr);
;
	inc     _gp_addr
;
; __asm__ ("bne %g", ul_putc_inc16_0);
;
	bne     L1C73
;
; __asm__ ("inc %v + 1", gp_addr);
;
	inc     _gp_addr + 1
;
; __asm__ ("inc %v", update_index);
;
L1C73:	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (_y << 5) + _x + 0x2000;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2D20
	inx
L2D20:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L1C7F:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop_0);
;
	bcs     L1C7F
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; _n += 16;      ul_putc ();
;
	lda     #$10
	clc
	adc     __n
	sta     __n
	jsr     _ul_putc
;
; _n = rda + 16; ul_putc ();
;
	lda     _rda
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", rdc); // rdc = (_x >> 2)
;
	sta     _rdc
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("and #$f8");  // A = (_y << 1) & 0xf8
;
	and     #$f8
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdc);
;
	adc     _rdc
;
; __asm__ ("sta %v", rdc); // Result
;
	sta     _rdc
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", attr_table);
;
	lda     _attr_table,x
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", rdb); // rdb = ((_x >> 1) & 1)
;
	sta     _rdb
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("asl a");   // A = (((_y >> 1) & 1) << 1)
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdb);
;
	adc     _rdb
;
; __asm__ ("sta %v", rdb); // Result
;
	sta     _rdb
;
; __asm__ ("lda %v", c_ts_pals);
;
	lda     _c_ts_pals
;
; __asm__ ("ldx %v + 1", c_ts_pals);
;
	ldx     _c_ts_pals + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("stx ptr1+1");
;
	stx     ptr1+1
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("ldx %v", rdb); 
;
	ldx     _rdb
;
; __asm__ ("beq %g", upd_attr_table_loop_0_skip);
;
	beq     L1CAE
;
; __asm__ ("asl a");
;
L1CAF:	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", upd_attr_table_loop_0);
;
	bne     L1CAF
;
; __asm__ ("sta %v", ast1); // ast1 = (c_ts_pals [_t] << (rdb << 1));
;
L1CAE:	sta     _ast1
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("ldx %v", rdb);
;
	ldx     _rdb
;
; __asm__ ("and %v, x", bitmasks);
;
	and     _bitmasks,x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("sta %v", rda); // Result
;
	sta     _rda
;
; __asm__ ("ldx %v", rdc);
;
	ldx     _rdc
;
; __asm__ ("sta %v, x", attr_table);
;
	sta     _attr_table,x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2D21
	inx
L2D21:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
	jsr     _vram_adr
	inc     _gp_addr
	bne     L1CC8
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L1CC8:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L1CCD
	inc     _gp_tmap+1
L1CCD:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L1CD4
	inc     _gp_tmap+1
L1CD4:	lda     _rda
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L1CD9
	inc     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
L1CD9:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
	inc     _gp_addr
	bne     L1CDD
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L1CDD:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L1CE2
	inc     _gp_tmap+1
L1CE2:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap);             vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = (NAMETABLE_BASE + 0x03c0) + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2D22
	inx
L2D22:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L1CFD
	inc     _gp_tmap+1
L1CFD:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L1D03
	inc     _gp_tmap+1
L1D03:	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L1D07
	inc     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
L1D07:	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L1D0C
	inc     _gp_tmap+1
L1D0C:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap);             ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", ast1);
;
	sta     _ast1
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("tax");    // X = COORDS (_x, _y)
;
	tax
;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("lda %v", c_behs);
;
	lda     _c_behs
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("lda %v + 1", c_behs);
;
	lda     _c_behs + 1
;
; __asm__ ("sta ptr1 + 1");
;
	sta     ptr1 + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda (ptr1), y");  // A = c_behs [_t]
;
	lda     (ptr1),y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; __asm__ ("asl %v", _x);
;
	asl     __x
;
; _y = TOP_ADJUST + (_y << 1);  
;
	lda     __y
	asl     a
	bcc     L2D24
	clc
L2D24:	adc     #$02
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1D2E
	inx
L1D2E:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_map_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_map_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rdt;  
;
	ldy     _rdm
	lda     _rdt
	sta     _map_buff,y
;
; map_attr [rdm] = c_behs [rdt];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L1D36
	inx
L1D36:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; brk_buff [rdm] = 1;
;
	ldy     _rdm
	lda     #$01
	sta     _brk_buff,y
;
; ++ rdm;
;
	inc     _rdm
;
; _x = rdx << 1; _y = (rdy << 1) + TOP_ADJUST; _t = rdt;
;
	lda     _rdx
	asl     a
	sta     __x
	lda     _rdy
	asl     a
	bcc     L2D27
	clc
L2D27:	adc     #$02
	sta     __y
	lda     _rdt
	sta     __t
;
; draw_tile ();
;
	jsr     _draw_tile
;
; rdx = (rdx + 1) & 15; if (!rdx) ++ rdy;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L1D4B
	inc     _rdy
;
; }
;
L1D4B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdx = rdy = rdm = 0;
;
	lda     #$00
	sta     _rdm
	sta     _rdy
	sta     _rdx
;
; gp_gen = c_map + (n_pant << 6) + (n_pant << 5); 
;
	tax
	lda     _n_pant
	jsr     aslax4
	jsr     aslax2
	clc
	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	sta     _gp_gen
	lda     tmp1
	adc     ptr1+1
	sta     _gp_gen+1
;
; rdit = 96; while (rdit --) {
;
	lda     #$60
	sta     _rdit
L1D59:	lda     _rdit
	pha
	sec
	sbc     #$01
	sta     _rdit
	pla
	tax
	beq     L1D5A
;
; rdd = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1D5E
	inx
L1D5E:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdd
;
; rdt = rdd >> 4; draw_map_tile ();
;
	ldx     #$00
	lda     _rdd
	jsr     asrax4
	sta     _rdt
	jsr     _draw_map_tile
;
; rdt = rdd & 15; draw_map_tile ();
;
	lda     _rdd
	and     #$0F
	sta     _rdt
	jsr     _draw_map_tile
;
; }
;
	jmp     L1D59
;
; gp_gen = c_locks;
;
L1D5A:	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; rdt = 0;
;
	stx     _rdt
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L1D6B:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1D6C
;
; rda = *gp_gen ++; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1D70
	inx
L1D70:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1D73
	inx
L1D73:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdm
;
; if (n_pant == rda) {
;
	lda     _rda
	cmp     _n_pant
	bne     L1D6B
;
; if (!lkact [gpit]) {
;
	ldy     _gpit
	lda     _lkact,y
	bne     L1D6B
;
; rdy = (rdm >> 4); rdx = (rdm & 15);
;
	tax
	lda     _rdm
	jsr     asrax4
	sta     _rdy
	lda     _rdm
	and     #$0F
	sta     _rdx
;
; draw_map_tile ();
;
	jsr     _draw_map_tile
;
; } 
;
	jmp     L1D6B
;
; vram_write (attr_table, 0x23c0, 64);
;
L1D6C:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L2D38:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L1D8A:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1D8E
	inx
L1D8E:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L1D8F
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L2D38
L1D8F:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L1D8A

.endproc

; ---------------------------------------------------------------
; void __near__ update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cycle: near

.segment	"CODE"

;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; update_list [update_index] = 0xff;
;
	ldy     _update_index
	lda     #$FF
	sta     _update_list,y
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pr_ul_str (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_ul_str: near

.segment	"CODE"

;
; update_cycle ();
;
	ldy     #$00
	jsr     _update_cycle
;
; gp_addr = 0x2000 + ((_y << 5) | _x);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	sta     _gp_addr
	lda     tmp1
	clc
	adc     #$20
	sta     _gp_addr+1
;
; while (_n = *gp_gen ++) { _n -= 32; ul_putc (); }
;
L1DA0:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1DA4
	inx
L1DA4:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	tax
	jeq     _update_cycle
	lda     __n
	sec
	sbc     #$20
	sta     __n
	jsr     _ul_putc
	jmp     L1DA0

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L1DAB
	lda     _cy2
	cmp     #$0D
	bcc     L1DAA
L1DAB:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = MAP_ATTR (COORDS (cx1, cy1 ? cy1 - 1 : 0));
;
L1DAA:	lda     _cy1
	beq     L1DB7
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L1DBA
	dex
	jmp     L1DBA
L1DB7:	tax
L1DBA:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = MAP_ATTR (COORDS (cx2, cy2 ? cy2 - 1 : 0));
;
	lda     _cy2
	beq     L1DC3
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L1DC6
	dex
	jmp     L1DC6
L1DC3:	tax
L1DC6:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= EN_X_ABSOLUTE && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L1DCB
	inx
L1DCB:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1DCC
;
; prx <= EN_X_ABSOLUTE + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L1DCD
	ldx     #$01
L1DCD:	jsr     tosicmp
	beq     L2D3A
	bcs     L1DCC
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L2D3A:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L1DCE
	inx
L1DCE:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1DCC
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L2D39
	ldx     #$01
;
; );
;
	clc
L2D39:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	jsr     tosicmp
	bcc     L1DCA
	beq     L1DCA
L1DCC:	ldx     #$00
	txa
	rts
L1DCA:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L1DD4
	cmp     #$00
	jeq     incsp4
L1DD4:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L1DD8
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L1DD8:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ run_fire_script (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run_fire_script: near

.segment	"CODE"

;
; fire_script_success = 0;
;
	lda     #$00
	sta     _fire_script_success
;
; run_script (2 * MAP_SIZE + 2);
;
	lda     #$32
	jsr     pusha
	jsr     _run_script
;
; run_script ((n_pant << 1) + 1);
;
	lda     _n_pant
	asl     a
	bcc     L2D3C
	clc
L2D3C:	adc     #$01
	jsr     pusha
	jmp     _run_script

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L1DE7
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L1DF1
	beq     L1DF1
	ldy     #$01
	jmp     L2D43
L1DE7:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L1DF1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L1DF1:	ldy     #$03
L2D43:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad0;
;
	lda     _pad0
	sta     _pad_this_frame
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_this_frame = (pad_this_frame ^ pad0) & pad0;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L1E04
	lda     _rdx
	sec
	sbc     _prx
	jmp     L2D4A
L1E04:	lda     _prx
	sec
	sbc     _rdx
L2D4A:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L1E11
	lda     _rdy
	sec
	sbc     _pry
	jmp     L2D4B
L1E11:	lda     _pry
	sec
	sbc     _rdy
L2D4B:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L1E1E
	lda     _rda
	jmp     L2D47
L1E1E:	lda     _rdb
L2D47:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L2D44
	inx
L2D44:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$04
	sta     _gpit
L1E3A:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1E3B
;
; if (brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	beq     L1E3A
;
; ++ brkf [gpit];
;
	lda     #<(_brkf)
	ldx     #>(_brkf)
	clc
	adc     _gpit
	bcc     L1E43
	inx
L1E43:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (brkf [gpit] == BREAKABLE_MAX_FRAMES) {
;
	ldy     _gpit
	lda     _brkf,y
	cmp     #$08
	bne     L1E44
;
; brkf [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
;
; _x = brkx [gpit]; _y = brky [gpit]; _t = BREAKABLE_ERASE;
;
	ldy     _gpit
	lda     _brkx,y
	sta     __x
	ldy     _gpit
	lda     _brky,y
	sta     __y
	lda     #$1D
	sta     __t
;
; map_set ();
;
	jsr     _map_set
;
; } else {
;
	jmp     L1E3A
;
; do_process_breakable = 1;
;
L1E44:	lda     #$01
	sta     _do_process_breakable
;
; }
;
	jmp     L1E3A
;
; }
;
L1E3B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_break (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_break: near

.segment	"CODE"

;
; gpint = COORDS (_x, _y);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     _gpint
	stx     _gpint+1
;
; if (brk_buff [gpint] < BREAKABLE_LIFE) {
;
	lda     #<(_brk_buff)
	sta     ptr1
	lda     #>(_brk_buff)
	clc
	adc     _gpint+1
	sta     ptr1+1
	ldy     _gpint
	lda     (ptr1),y
	cmp     #$02
	bcs     L1E61
;
; ++ brk_buff [gpint];
;
	lda     #<(_brk_buff)
	clc
	adc     _gpint
	sta     ptr1
	lda     #>(_brk_buff)
	adc     _gpint+1
	sta     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; } else 
;
	rts
;
; sfx_play (SFX_BREAKH, 1);
;
L1E61:	lda     #$0D
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$04
	sta     _gpit
L1E6C:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1E6D
;
; if (!brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	bne     L1E6C
;
; do_process_breakable = 1;
;
	lda     #$01
	sta     _do_process_breakable
;
; brkf [gpit] = 1;
;
	ldy     _gpit
	sta     _brkf,y
;
; brkx [gpit] = _x;
;
	ldy     _gpit
	lda     __x
	sta     _brkx,y
;
; brky [gpit] = _y;
;
	ldy     _gpit
	lda     __y
	sta     _brky,y
;
; _t = BREAKABLE_BREAKING;
;
	lda     #$1E
	sta     __t
;
; map_set ();     // Break tile!
;
	jsr     _map_set
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jmp     _sfx_play
;
; }
;
L1E6D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_SIZE; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L1E8A:	lda     _gpit
	cmp     #$18
	bcs     L1E8B
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; ++ gpit) {
;
	inc     _gpit
	jmp     L1E8A
;
; }
;
L1E8B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; __asm__ ("lda %v", hrt); 
;
	lda     _hrt
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("bne %g", hotspots_paint_do);
;
	bne     L1E9B
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("jsr decsp3");  // Make room
;
L1E9B:	jsr     decsp3
;
; __asm__ ("ldy #2");   // Y will index SP
;
	ldy     #2
;
; __asm__ ("lda %v", hrx);
;
	lda     _hrx
;
; __asm__ ("sta (sp), y");
;
	sta     (sp),y
;
; __asm__ ("dey");
;
	dey
;
; __asm__ ("lda %v", hry);
;
	lda     _hry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", SPRITE_ADJUST);
;
	adc     #$F7
;
; __asm__ ("sta (sp), y");
;
	sta     (sp),y
;
; __asm__ ("dey");
;
	dey
;
; __asm__ ("lda %v", oam_index);
;
	lda     _oam_index
;
; __asm__ ("sta (sp), y");
;
	sta     (sp),y
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("adc #<(%v)", spr_hs); // LSB
;
	adc     #<(_spr_hs)
;
; __asm__ ("sta ptr1");   // temporally save
;
	sta     ptr1
;
; __asm__ ("lda #0");
;
	tya
;
; __asm__ ("adc #>(%v)", spr_hs); // MSB
;
	adc     #>(_spr_hs)
;
; __asm__ ("sta ptr1+1");   // MSB
;
	sta     ptr1+1
;
; __asm__ ("ldy #1");
;
	iny
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("dey");
;
	dey
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("jsr %v", oam_meta_spr);
;
	jsr     _oam_meta_spr
;
; __asm__ ("sta %v", oam_index);
;
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_hotspots + (HS_CUR_PANT << 1));
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L2D4D
	inx
	clc
L2D4D:	adc     _c_hotspots
	sta     _gp_gen
	txa
	adc     _c_hotspots+1
	sta     _gp_gen+1
;
; SET_FROM_PTR (hrt, gp_gen); ++ gp_gen;
;
	ldy     #0
	lda     (_gp_gen),y
	sta     _hrt
	inc     _gp_gen
	bne     L1EC1
	inc     _gp_gen+1
;
; SET_FROM_PTR (rda, gp_gen);
;
L1EC1:	lda     (_gp_gen),y
	sta     _rda
;
; if (hrt && hact [HS_CUR_PANT]) {
;
	lda     _hrt
	beq     L1EC5
	ldy     _n_pant
	lda     _hact,y
	beq     L1EC5
;
; hry = rda & 0xf0; hrx = rda << 4;
;
	lda     _rda
	and     #$F0
	sta     _hry
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; } else hrt = 0;
;
	rts
L1EC5:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$04
	sta     _coco_it
L1ED5:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	beq     L1ED6
;
; coco_slots [coco_it] = coco_it;
;
	ldy     _coco_it
	lda     _coco_it
	sta     _coco_slots,y
;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; }
;
	jmp     L1ED5
;
; coco_slots_i = COCOS_MAX;
;
L1ED6:	lda     #$04
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_aimed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_aimed: near

.segment	"CODE"

;
; rdct = distance ();
;
	jsr     _distance
	sta     _rdct
;
; if (rdct > COCO_FAIR_D && coco_slots_i) 
;
	cmp     #$21
	bcc     L1EE7
	lda     _coco_slots_i
	bne     L1EE6
L1EE7:	rts
;
; -- coco_slots_i; coco_it = coco_slots [coco_slots_i];
;
L1EE6:	dec     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = COCO_RDX << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D56
	inx
	clc
L2D56:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D57
	inx
	clc
L2D57:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; rds16 = COCO_V * rda / rdct; coco_vx [coco_it] = ADD_SIGN2 (px, coco_x [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rda
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D58
	inx
	clc
L2D58:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D59
	inx
	clc
L2D59:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1EFD
	ldx     #$00
	txa
	jmp     L1F0A
L1EFD:	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D5A
	inx
	clc
L2D5A:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bcc     L1F07
	beq     L1F07
	lda     _rds16
	ldx     _rds16+1
	jmp     L1F0A
L1F07:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1F0A:	ldy     #$00
	jsr     staxspidx
;
; rds16 = COCO_V * rdb / rdct; coco_vy [coco_it] = ADD_SIGN2 (py, coco_y [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rdb
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D5B
	inx
	clc
L2D5B:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D5C
	inx
	clc
L2D5C:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1F17
	ldx     #$00
	txa
	jmp     L1F24
L1F17:	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D5D
	inx
	clc
L2D5D:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1F21
	beq     L1F21
	lda     _rds16
	ldx     _rds16+1
	jmp     L1F24
L1F21:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1F24:	ldy     #$00
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_destroy: near

.segment	"CODE"

;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; coco_slots [coco_slots_i] = coco_it; ++ coco_slots_i;
;
	ldy     _coco_slots_i
	lda     _coco_it
	sta     _coco_slots,y
	inc     _coco_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it) {
;
	lda     #$04
	sta     _coco_it
L1F3F:	lda     _coco_it
	bne     L2D6E
;
; }
;
	rts
;
; -- coco_it;
;
L2D6E:	dec     _coco_it
;
; if (coco_on [coco_it]) {
;
	ldy     _coco_it
	lda     _coco_on,y
	beq     L1F3F
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D64
	inx
	clc
L2D64:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D65
	inx
	clc
L2D65:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D66
	inx
	clc
L2D66:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D67
	inx
	clc
L2D67:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; COCO_RDX = coco_x [coco_it] >> FIXBITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D68
	inx
	clc
L2D68:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdx
;
; rdy      = coco_y [coco_it] >> FIXBITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2D69
	inx
	clc
L2D69:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdy
;
; COCO_RDX > 248 ||
;
	lda     _rdx
	cmp     #$F9
	bcs     L1F56
;
; rdy > 208
;
	lda     _rdy
;
; ) {
;
	cmp     #$D1
	bcc     L1F55
;
; cocos_destroy (); continue;
;
L1F56:	jsr     _cocos_destroy
	jmp     L1F3F
;
; COCO_RDX, 
;
L1F55:	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
;
; rdy + SPRITE_ADJUST, 
;
	lda     _rdy
	clc
	adc     #$10
	sec
	sbc     #$08
	bcs     L2D6A
	sec
L2D6A:	sbc     #$10
	bcs     L2D6B
	sec
L2D6B:	sbc     #$01
	dey
	sta     (sp),y
;
; COCO_PATTERN, 
;
	lda     #$00
	dey
	sta     (sp),y
;
; COCO_PALETTE, 
;
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (pflickering == 0 && 
;
	lda     _pflickering
	jne     L1F3F
;
; COCO_RDX + 7 >= prx && 
;
	tax
	lda     _rdx
	clc
	adc     #$07
	bcc     L1F67
	inx
L1F67:	cmp     _prx
	txa
	sbc     #$00
	jcc     L1F3F
;
; COCO_RDX <= prx + 7 && 
;
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L1F68
	ldx     #$01
L1F68:	jsr     tosicmp
	beq     L2D6D
	jcs     L1F3F
;
; rdy + 7 + PLAYER_COLLISION_VSTRETCH_FG >= pry && 
;
L2D6D:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L2D6C
	inx
	clc
L2D6C:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	cmp     _pry
	txa
	sbc     #$00
	jcc     L1F3F
;
; rdy <= pry + 12
;
	lda     _rdy
	jsr     pusha0
	lda     _pry
;
; ) {
;
	clc
	adc     #$0C
	bcc     L1F6A
	ldx     #$01
L1F6A:	jsr     tosicmp
	bcc     L1F65
	jne     L1F3F
;
; en_sg_2 = 1;
;
L1F65:	lda     #$01
	sta     _en_sg_2
;
; pkill = en_sg_2;
;
	sta     _pkill
;
; cocos_destroy ();
;
	jsr     _cocos_destroy
;
; }
;
	jmp     L1F3F

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; if (!warp_to_level) player_stop ();
;
	lda     _warp_to_level
	bne     L1F76
	jsr     _player_stop
;
; pfacing = CELL_FACING_DOWN;
;
L1F76:	lda     #$06
	sta     _pfacing
;
; pfr = 0;
;
	lda     #$00
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pobjs = 0;
;
	sta     _pobjs
;
; pkeys = 0;
;
	sta     _pkeys
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pammo = MAX_AMMO;
;
	lda     #$63
	sta     _pammo
;
; pflickering = pbouncing = 0;
;
	lda     #$00
	sta     _pbouncing
	sta     _pflickering
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) -- plife; else game_over = 1;
;
	lda     _plife
	beq     L1FAC
	dec     _plife
	jmp     L1FAF
L1FAC:	lda     #$01
	sta     _game_over
;
; pflickering = PLAYER_FLICKERS;
;
L1FAF:	lda     #$64
	sta     _pflickering
;
; pbouncing = PLAYER_BOUNCES;
;
	lda     #$10
	sta     _pbouncing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_tile (int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_tile: near

.segment	"CODE"

;
; if (y0) -- y0;
;
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L1FB7
	ldx     #$00
	lda     #$01
	jsr     subeqysp
;
; if (y1) -- y1;
;
L1FB7:	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L1FBA
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
;
; at == 11 
;
L1FBA:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; && b_button
;
	cpx     #$00
	jne     L1FC4
	cmp     #$0B
	jne     L1FC4
;
; ) {
;
	lda     _b_button
	jeq     L1FC4
;
; b_button = 0;
;
	stx     _b_button
;
; x0 > 0 && x0 < MAX_TILE_X && y0 > 0 && y0 < 11 &&
;
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1FC6
	eor     #$80
L1FC6:	jpl     L1FC4
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0F
	txa
	sbc     #$00
	bvc     L1FC8
	eor     #$80
L1FC8:	bpl     L1FC4
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1FC9
	eor     #$80
L1FC9:	bpl     L1FC4
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0B
	txa
	sbc     #$00
	bvc     L1FCA
	eor     #$80
L1FCA:	bpl     L1FC4
;
; ATTR (x1, y1) == 0
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$02
	ora     (sp),y
	sta     ptr1
	txa
	iny
	ora     (sp),y
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
;
; ) {
;
	bne     L1FC4
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; _x = x0; _y = y0; _t = 0;  map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	lda     #$00
	sta     __t
	jsr     _map_set
;
; _x = x1; _y = y1; _t = 14; map_set ();
;
	ldy     #$02
	lda     (sp),y
	sta     __x
	ldy     #$00
	lda     (sp),y
	sta     __y
	lda     #$0E
	sta     __t
	jsr     _map_set
;
; at == 10 &&
;
L1FC4:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	jne     L1FE5
	cmp     #$0A
	jne     L1FE5
;
; ) {
;
	lda     _pkeys
	jeq     L1FE5
;
; _x = x0; _y = y0; _t = 0; map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	stx     __t
	jsr     _map_set
;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L1FF5:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1FF6
;
; rda = *gp_gen ++; rdb = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1FFA
	inx
L1FFA:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1FFD
	inx
L1FFD:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; if (n_pant == rda && COORDS (x0, y0) == rdb) 
;
	lda     _rda
	cmp     _n_pant
	bne     L1FF5
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$06
	ora     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	tax
	pla
	cpx     #$00
	bne     L1FF5
	cmp     _rdb
	bne     L1FF5
;
; lkact [gpit] = 0;
;
	ldy     _gpit
	txa
	sta     _lkact,y
;
; }
;
	jmp     L1FF5
;
; -- pkeys;
;
L1FF6:	dec     _pkeys
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; }
;
L1FE5:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ fire_bullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_bullet: near

.segment	"CODE"

;
; if (!pammo) return;
;
	lda     _pammo
	bne     L2D73
;
; }
;
	rts
;
; -- pammo;
;
L2D73:	dec     _pammo
;
; __asm__ ("lda %v", pammo);
;
	lda     _pammo
;
; __asm__ ("bne %g", fire_bullet_has_ammo);
;
	bne     L2015
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("lda %v", b_slots_i);
;
L2015:	lda     _b_slots_i
;
; __asm__ ("bne %g", fire_bullet_has_slot);
;
	bne     L2019
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("dec %v", b_slots_i);
;
L2019:	dec     _b_slots_i
;
; __asm__ ("ldy %v", b_slots_i);
;
	ldy     _b_slots_i
;
; __asm__ ("lda %v, y", b_slots);
;
	lda     _b_slots,y
;
; __asm__ ("sta %v", bi);
;
	sta     _bi
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v, x", bmx);
;
	sta     _bmx,x
;
; __asm__ ("sta %v, x", bmy);
;
	sta     _bmy,x
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("sta %v, x", bx);
;
	sta     _bx,x
;
; __asm__ ("lda %v", pfacing);
;
	lda     _pfacing
;
; __asm__ ("beq %g", fire_bullet_facing_right);
;
	beq     L2029
;
; __asm__ ("cmp #%b", CELL_FACING_DOWN);
;
	cmp     #$06
;
; __asm__ ("beq %g", fire_bullet_facing_down);
;
	beq     L202D
;
; __asm__ ("cmp #%b", CELL_FACING_UP);
;
	cmp     #$04
;
; __asm__ ("beq %g", fire_bullet_facing_up);
;
	beq     L2031
;
; __asm__ ("lda #%b", -PLAYER_BULLET_SPEED);
;
	lda     #$FC
;
; __asm__ ("sta %v, x", bmx);  
;
	sta     _bmx,x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", PLAYER_BULLET_Y_OFFSET);
;
	adc     #$06
;
; __asm__ ("sta %v, x", by);
;
	sta     _by,x
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #%b", 8);
;
	sbc     #$08
;
; __asm__ ("sta %v, x", bx);
;
	sta     _bx,x
;
; __asm__ ("jmp %g", fire_bullet_facing_done);
;
	jmp     L2040
;
; __asm__ ("lda #%b", PLAYER_BULLET_SPEED);
;
L2029:	lda     #$04
;
; __asm__ ("sta %v, x", bmx);
;
	sta     _bmx,x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", PLAYER_BULLET_Y_OFFSET);
;
	adc     #$06
;
; __asm__ ("sta %v, x", by);   
;
	sta     _by,x
;
; __asm__ ("lda %v", prx);
;
	lda     _prx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", 8);
;
	adc     #$08
;
; __asm__ ("sta %v, x", bx);
;
	sta     _bx,x
;
; __asm__ ("jmp %g", fire_bullet_facing_done);
;
	jmp     L2040
;
; __asm__ ("lda %v", prx);
;
L202D:	lda     _prx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", PLAYER_BULLET_X_OFFSET);
;
	adc     #$FD
;
; __asm__ ("sta %v, x", bx);
;
	sta     _bx,x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", 12);
;
	adc     #$0C
;
; __asm__ ("sta %v, x", by);
;
	sta     _by,x
;
; __asm__ ("lda #%b", PLAYER_BULLET_SPEED);
;
	lda     #$04
;
; __asm__ ("jmp %g", fire_bullet_facing_done);
;
	jmp     L2D72
;
; __asm__ ("lda %v", prx);
;
L2031:	lda     _prx
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #%b", PLAYER_BULLET_X_OFFSET);
;
	sbc     #$FD
;
; __asm__ ("sta %v, x", bx);
;
	sta     _bx,x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc #%b", 4);
;
	sbc     #$04
;
; __asm__ ("sta %v, x", by);
;
	sta     _by,x
;
; __asm__ ("lda #%b", -PLAYER_BULLET_SPEED);
;
	lda     #$FC
;
; __asm__ ("sta %v, x", bmy);
;
L2D72:	sta     _bmy,x
;
; __asm__ ("lda %v", pfacing);
;
L2040:	lda     _pfacing
;
; __asm__ ("cmp %b", CELL_FACING_LEFT);
;
	cmp     $02
;
; __asm__ ("beq %g", fire_bullet_diagonal_if1_do);
;
	beq     L206F
;
; __asm__ ("cmp %b", CELL_FACING_RIGHT);
;
	cmp     $00
;
; __asm__ ("bne %g", fire_bullet_diagonal_else2);
;
	bne     L2073
;
; __asm__ ("lda %v", pad0);
;
L206F:	lda     _pad0
;
; __asm__ ("and #%b", PAD_UP);
;
	and     #$10
;
; __asm__ ("beq %g", fire_bullet_diagonal_else1);
;
	beq     L2078
;
; __asm__ ("lda #%b", -PLAYER_BULLET_SPEED);
;
	lda     #$FC
;
; __asm__ ("jmp %g", fire_bullet_diagonal_endif1);
;
	jmp     L207C
;
; __asm__ ("lda %v", pad0);
;
L2078:	lda     _pad0
;
; __asm__ ("and #%b", PAD_DOWN);
;
	and     #$20
;
; __asm__ ("beq %g", fire_bullet_diagonal_skip1);
;
	beq     L2094
;
; __asm__ ("lda #%b", PLAYER_BULLET_SPEED);
;
	lda     #$04
;
; __asm__ ("sta %v, x", bmy);
;
L207C:	sta     _bmy,x
;
; __asm__ ("jmp %g", fire_bullet_diagonal_if1_done);
;
	jmp     L2094
;
; __asm__ ("lda %v", pad0);
;
L2073:	lda     _pad0
;
; __asm__ ("and #%b", PAD_LEFT);
;
	and     #$40
;
; __asm__ ("beq %g", fire_bullet_diagonal_else3);
;
	beq     L208B
;
; __asm__ ("lda #%b", -PLAYER_BULLET_SPEED);
;
	lda     #$FC
;
; __asm__ ("jmp %g", fire_bullet_diagonal_endif2);
;
	jmp     L208F
;
; __asm__ ("lda %v", pad0);
;
L208B:	lda     _pad0
;
; __asm__ ("and #%w", PAD_RIGHT);
;
	and     #$0080
;
; __asm__ ("beq %g", fire_bullet_diagonal_skip2);
;
	beq     L2094
;
; __asm__ ("lda #%b", PLAYER_BULLET_SPEED);
;
	lda     #$04
;
; __asm__ ("sta %v, x", bmx);
;
L208F:	sta     _bmx,x
;
; sfx_play (SFX_BULLET, 2);
;
L2094:	lda     #$09
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ bullets_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bullets_destroy: near

.segment	"CODE"

;
; by [bi] = 0;
;
	ldy     _bi
	lda     #$00
	sta     _by,y
;
; b_slots [b_slots_i] = bi; ++ b_slots_i;
;
	ldy     _b_slots_i
	lda     _bi
	sta     _b_slots,y
	inc     _b_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ bullets_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bullets_move: near

.segment	"CODE"

;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v", bi);
;
	sta     _bi
;
; __asm__ ("lda %v", bi);
;
L20AB:	lda     _bi
;
; __asm__ ("cmp #%b", MAX_BULLETS);
;
	cmp     #$04
;
; __asm__ ("bcc %g", bullets_move_loop_do);
;
	bcc     L20B0
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("lda %v", bi); 
;
L20B0:	lda     _bi
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", half_life);
;
	adc     _half_life
;
; __asm__ ("and 1");
;
	and     1
;
; __asm__ ("sta %v", rde);
;
	sta     _rde
;
; __asm__ ("ldy %v", bi);    // Y = bi
;
	ldy     _bi
;
; __asm__ ("lda %v, y", by);
;
	lda     _by,y
;
; __asm__ ("jeq %g", bullets_move_loop_continue);
;
	jeq     L20BA
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v, y", bmy);
;
	adc     _bmy,y
;
; __asm__ ("sta %v", _by);
;
	sta     __by
;
; __asm__ ("lda %v, y", bx);
;
	lda     _bx,y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v, y", bmx);
;
	adc     _bmx,y
;
; __asm__ ("sta %v", _bx);
;
	sta     __bx
;
; __asm__ ("cmp #%b", PLAYER_BULLET_SPEED);
;
	cmp     #$04
;
; __asm__ ("bcc %g", bullets_move_out_of_view);
;
	bcc     L20C6
;
; __asm__ ("cmp #%w", 255-PLAYER_BULLET_SPEED);
;
	cmp     #$00FB
;
; __asm__ ("bcs %g", bullets_move_out_of_view);
;
	bcs     L20C6
;
; __asm__ ("lda %v", _by);
;
	lda     __by
;
; __asm__ ("cmp #%b", PLAYER_BULLET_SPEED);
;
	cmp     #$04
;
; __asm__ ("bcc %g", bullets_move_out_of_view);
;
	bcc     L20C6
;
; __asm__ ("cmp #%w", 207-PLAYER_BULLET_SPEED);
;
	cmp     #$00CB
;
; __asm__ ("beq %g", bullets_move_out_of_view_skip);
;
	beq     L20D1
;
; __asm__ ("bcc %g", bullets_move_out_of_view_skip);
;
	bcc     L20D1
;
; bullets_destroy ();
;
L20C6:	jsr     _bullets_destroy
;
; __asm__ ("jmp %g", bullets_move_loop_continue);
;
	jmp     L20BA
;
; _bx, 
;
L20D1:	jsr     decsp4
	lda     __bx
	ldy     #$03
	sta     (sp),y
;
; SPRITE_ADJUST + _by, 
;
	lda     __by
	clc
	adc     #$F7
	pha
	lda     #$00
	adc     #$FF
	pla
	dey
	sta     (sp),y
;
; BULLET_PATTERN, BULLET_PALETTE,
;
	lda     #$00
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; __asm__ ("lda %v", rde);
;
	lda     _rde
;
; __asm__ ("beq %g", bullets_collision_done);
;
	beq     L20DE
;
; __asm__ ("lda %v", _bx);
;
	lda     __bx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #4");
;
	adc     #4
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _by);
;
	lda     __by
;
; __asm__ ("adc #%b", -12);
;
	adc     #$F4
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; rdm = MAP_ATTR (COORDS (cx1, cy1));
;
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _rdm
;
; if (rdm & 16) {
;
	and     #$10
	beq     L20F6
;
; _x = cx1; _y = cy1; breakable_break ();
;
	lda     _cx1
	sta     __x
	lda     _cy1
	sta     __y
	jsr     _breakable_break
;
; bullets_destroy ();
;
	jsr     _bullets_destroy
;
; __asm__ ("jmp %g", bullets_move_loop_continue);
;
	jmp     L20BA
;
; if (rdm & 8) {
;
L20F6:	lda     _rdm
	and     #$08
	beq     L20DE
;
; bullets_destroy (); 
;
	jsr     _bullets_destroy
;
; __asm__ ("jmp %g", bullets_move_loop_continue);
;
	jmp     L20BA
;
; bx [bi] = _bx;
;
L20DE:	ldy     _bi
	lda     __bx
	sta     _bx,y
;
; by [bi] = _by;
;
	ldy     _bi
	lda     __by
	sta     _by,y
;
; __asm__ ("inc %v", bi);
;
L20BA:	inc     _bi
;
; __asm__ ("jmp %g", bullets_move_loop);
;
	jmp     L20AB

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pflickering) -- pflickering;
;
	lda     _pflickering
	beq     L210F
	dec     _pflickering
;
; if (pbouncing) -- pbouncing;
;
L210F:	lda     _pbouncing
	beq     L2112
	dec     _pbouncing
;
; hitv = hith = 0;
;
L2112:	lda     #$00
	sta     _hith
	sta     _hitv
;
; pcx = prx; pcy = pry;
;
	lda     _prx
	sta     _pcx
	lda     _pry
	sta     _pcy
;
; pnotsafe = 0;
;
	lda     #$00
	sta     _pnotsafe
;
; oppossee = ppossee;
;
	lda     _ppossee
	sta     _oppossee
;
; ppossee = 0;
;
	lda     #$00
	sta     _ppossee
;
; if (!(pad0 & PAD_UP || pad0 & PAD_DOWN)) {
;
	lda     _pad0
	and     #$10
	bne     L2124
	lda     _pad0
	and     #$20
	beq     L2125
L2124:	lda     #$01
L2125:	jsr     bnega
	beq     L2138
;
; pfacingv = 0xff;
;
	lda     #$FF
	sta     _pfacingv
;
; if (pvy > 0) {
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L212A
	eor     #$80
L212A:	bpl     L2128
;
; pvy -= PLAYER_RX;
;
	lda     _pvy
	sec
	sbc     #$20
	sta     _pvy
	bcs     L212D
	dec     _pvy+1
;
; if (pvy < 0)
;
L212D:	ldx     _pvy+1
	cpx     #$80
	bcc     L2138
;
; } else if (pvy < 0) {
;
	jmp     L2D7B
L2128:	ldx     _pvy+1
	cpx     #$80
	bcc     L2138
;
; pvy += PLAYER_RX;
;
	lda     #$20
	clc
	adc     _pvy
	sta     _pvy
	bcc     L2137
	inc     _pvy+1
;
; if (pvy > 0)
;
L2137:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L213A
	eor     #$80
L213A:	bpl     L2138
;
; pvy = 0;
;
L2D7B:	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; if (pad0 & PAD_UP) {
;
L2138:	lda     _pad0
	and     #$10
	beq     L2141
;
; pfacingv = CELL_FACING_UP;
;
	lda     #$04
	sta     _pfacingv
;
; if (pvy > -PLAYER_VX_MAX) {
;
	lda     _pvy
	cmp     #$81
	lda     _pvy+1
	sbc     #$FF
	bvs     L2143
	eor     #$80
L2143:	bpl     L2141
;
; pvy -= PLAYER_AX;
;
	lda     _pvy
	sec
	sbc     #$18
	sta     _pvy
	bcs     L2141
	dec     _pvy+1
;
; if (pad0 & PAD_DOWN) {
;
L2141:	lda     _pad0
	and     #$20
	beq     L214B
;
; pfacingv = CELL_FACING_DOWN;
;
	lda     #$06
	sta     _pfacingv
;
; if (pvy < PLAYER_VX_MAX) {
;
	lda     _pvy
	cmp     #$80
	lda     _pvy+1
	sbc     #$00
	bvc     L214D
	eor     #$80
L214D:	bpl     L214B
;
; pvy += PLAYER_AX;
;
	lda     #$18
	clc
	adc     _pvy
	sta     _pvy
	bcc     L214B
	inc     _pvy+1
;
; py += pvy;
;
L214B:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L2153
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L2153:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; cx1 = prx >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L215F
	inx
L215F:	jsr     shrax4
	sta     _cx2
;
; if (pvy < 0)
;
	ldx     _pvy+1
	cpx     #$80
	jcc     L2160
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$F8
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L2168
	lda     _at2
	and     #$08
	jeq     L2167
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L2168:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L2170
	inx
L2170:	jsr     shlax4
	clc
	adc     #$F8
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, cx1, cy1 - 1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L2179
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _cy1
	sec
	sbc     #$01
	bcs     L2181
	dex
L2181:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _player_process_tile
;
; if (cx1 != cx2) if (at2 & 2) player_process_tile (at2, cx2, cy1, cx2, cy1 - 1);
;
L2179:	lda     _cx1
	jsr     pusha0
	lda     _cx2
	jsr     tosicmp0
	jeq     L21D4
	lda     _at2
	ldx     #$00
	and     #$02
	jeq     L21D4
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx2
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx2
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _cy1
	sec
	sbc     #$01
	bcs     L218C
	dex
L218C:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _player_process_tile
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L21D4
L2167:	lda     _at1
	and     #$01
	jne     L2D7C
	lda     _at2
	and     #$01
	jeq     L21D4
;
; } else if (pvy > 0)
;
	jmp     L2D7C
L2160:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2198
	eor     #$80
L2198:	jpl     L21D4
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L219D
	inx
L219D:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) 
;
	lda     _at1
	and     #$08
	bne     L21A0
	lda     _at2
	and     #$08
	jeq     L219F
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L21A0:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, cx1, cy1 + 1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L21B3
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _cy1
	clc
	adc     #$01
	bcc     L21BB
	inx
L21BB:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _player_process_tile
;
; if (cx1 != cx2) if (at2 & 2) player_process_tile (at2, cx2, cy1, cx2, cy1 + 1);   
;
L21B3:	lda     _cx1
	jsr     pusha0
	lda     _cx2
	jsr     tosicmp0
	beq     L21BE
	lda     _at2
	ldx     #$00
	and     #$02
	beq     L21BE
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx2
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx2
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     _cy1
	clc
	adc     #$01
	bcc     L21C6
	inx
L21C6:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	jsr     _player_process_tile
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L21BE:	lda     _at1
	and     #$01
	bne     L21C8
	lda     _at2
	and     #$01
	beq     L21D4
L21C8:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L21D4
L219F:	lda     _at1
	and     #$01
	bne     L21D0
	lda     _at2
	and     #$01
	beq     L21D4
;
; if ((pry & 15) > 4) hitv = 1;
;
L21D0:	lda     _pry
	and     #$0F
	cmp     #$05
	bcc     L21D4
L2D7C:	lda     #$01
	sta     _hitv
;
; if (!(pad0 & PAD_LEFT || pad0 & PAD_RIGHT)) {
;
L21D4:	lda     _pad0
	and     #$40
	bne     L21DB
	lda     _pad0
	and     #$80
	beq     L21DC
L21DB:	lda     #$01
L21DC:	jsr     bnega
	beq     L21EF
;
; pfacingh = 0xff;
;
	lda     #$FF
	sta     _pfacingh
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L21E1
	eor     #$80
L21E1:	bpl     L21DF
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$20
	sta     _pvx
	bcs     L21E4
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L21E4:	ldx     _pvx+1
	cpx     #$80
	bcc     L21EF
;
; } else if (pvx < 0) {
;
	jmp     L2D7D
L21DF:	ldx     _pvx+1
	cpx     #$80
	bcc     L21EF
;
; pvx += PLAYER_RX;
;
	lda     #$20
	clc
	adc     _pvx
	sta     _pvx
	bcc     L21EE
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L21EE:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L21F1
	eor     #$80
L21F1:	bpl     L21EF
L2D7D:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pad0 & PAD_LEFT) {
;
L21EF:	lda     _pad0
	and     #$40
	beq     L21F8
;
; pfacingh = CELL_FACING_LEFT;
;
	lda     #$02
	sta     _pfacingh
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L21FA
	eor     #$80
L21FA:	bpl     L21F8
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$18
	sta     _pvx
	bcs     L21F8
	dec     _pvx+1
;
; if (pad0 & PAD_RIGHT) {
;
L21F8:	lda     _pad0
	and     #$80
	beq     L2202
;
; pfacingh = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacingh
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L2204
	eor     #$80
L2204:	bpl     L2202
;
; pvx += PLAYER_AX;
;
	lda     #$18
	clc
	adc     _pvx
	sta     _pvx
	bcc     L2202
	inc     _pvx+1
;
; px += pvx;
;
L2202:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) { px = 4 << FIXBITS; prx = 4;}
;
	ldx     _px+1
	cpx     #$01
	bcs     L220A
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$04
	sta     _prx
;
; else if (px > (MAX_PRX << FIXBITS)) { px = MAX_PRX << FIXBITS; prx = MAX_PRX; }
;
	jmp     L2219
L220A:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bcc     L2212
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$F4
	sta     _prx
;
; else player_to_pixels ();
;
	jmp     L2219
L2212:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L2219:	lda     _pry
	sec
	sbc     #$F8
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L2221
	inx
L2221:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L2268
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L2226
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L2240
;
; } else {
;
	jmp     L2240
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L2226:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L2237
	inx
L2237:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L223C
	dex
L223C:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L2240:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L2243
	lda     _at2
	and     #$08
	jeq     L2242
;
; pvx = 0; prx = PRXA; px = prx << FIXBITS; pfiring = 1;
;
L2243:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, rdm, cy1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L224F
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; if (cy1 != cy2) if (at2 & 2) player_process_tile (at2, cx1, cy2, rdm, cy2);
;
L224F:	lda     _cy1
	jsr     pusha0
	lda     _cy2
	jsr     tosicmp0
	beq     L2261
	lda     _at2
	ldx     #$00
	and     #$02
	beq     L2261
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; } else {
;
	jmp     L2261
;
; hith = ((at1 & 1) || (at2 & 1));
;
L2242:	lda     _at1
	and     #$01
	bne     L2264
	lda     _at2
	and     #$01
	beq     L2267
L2264:	lda     #$01
L2267:	sta     _hith
;
; if (pvy > 0) hith &= ((pry & 15) > 4);
;
L2261:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L226A
	eor     #$80
L226A:	bpl     L2268
	lda     _pry
	and     #$0F
	cmp     #$05
	lda     #$00
	rol     a
	and     _hith
	sta     _hith
;
; if (pfacingv != 0xff) {
;
L2268:	lda     _pfacingv
	cmp     #$FF
	beq     L226F
;
; pfacing = pfacingv; 
;
	lda     _pfacingv
;
; } else if (pfacingh != 0xff) {
;
	jmp     L2D77
L226F:	lda     _pfacingh
	cmp     #$FF
	beq     L2274
;
; pfacing = pfacingh;
;
	lda     _pfacingh
L2D77:	sta     _pfacing
;
; phit = 0;
;
L2274:	lda     #$00
	sta     _phit
;
; if (pgotten == 0) {
;
	lda     _pgotten
	jne     L22BD
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); pry = pcy; py = pry << FIXBITS; } 
;
	lda     _hitv
	beq     L227C
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L2284
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L2289
	eor     #$80
L2289:	bpl     L228A
	ldx     #$00
	lda     #$E0
	jmp     L2291
L228A:	ldx     #$FF
	lda     #$20
	jmp     L2291
L2284:	tax
L2291:	sta     _pvy
	stx     _pvy+1
	lda     _pcy
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); prx = pcx; px = prx << FIXBITS; }
;
L227C:	lda     _hith
	beq     L2298
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L22A0
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L22A5
	eor     #$80
L22A5:	bpl     L22A6
	ldx     #$00
	lda     #$E0
	jmp     L22AD
L22A6:	ldx     #$FF
	lda     #$20
	jmp     L22AD
L22A0:	tax
L22AD:	sta     _pvx
	stx     _pvx+1
	lda     _pcx
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if (!pflickering && !pbouncing) if (phit) { 
;
L2298:	lda     _pflickering
	bne     L22BD
	lda     _pbouncing
	bne     L22BD
	lda     _phit
	beq     L22BD
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; en_sg_2 = 1;
;
	lda     #$01
	sta     _en_sg_2
;
; if (en_sg_2)
;
	lda     _en_sg_2
	beq     L22BD
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; ) {
;
L22BD:	lda     _b_button
	beq     L22CA
;
; if (b_button) {
;
	lda     _b_button
	beq     L22C6
;
; run_fire_script ();
;
	jsr     _run_fire_script
;
; if (fire_script_success) b_button = 0;
;
	lda     _fire_script_success
	beq     L22C6
	lda     #$00
	sta     _b_button
;
; if (b_button) fire_bullet ();
;
L22C6:	lda     _b_button
	beq     L22CA
	jsr     _fire_bullet
;
; if (pvx != 0 || pvy != 0) {
;
L22CA:	lda     _pvx
	ora     _pvx+1
	bne     L22CE
	lda     _pvy
	ora     _pvy+1
	beq     L22D3
;
; pctfr ++;
;
L22CE:	lda     _pctfr
	clc
	adc     #$01
	sta     _pctfr
;
; if (pctfr == 4) {
;
	cmp     #$04
	bne     L22D3
;
; pctfr = 0;
;
	lda     #$00
	sta     _pctfr
;
; pfr = !pfr;
;
	lda     _pfr
	jsr     bnega
	sta     _pfr
;
; psprid = pfacing + pfr;
;
	lda     _pfacing
	clc
	adc     _pfr
	sta     _psprid
;
; prx_old = prx;
;
L22D3:	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems);
;
	lda     _c_enems
	sta     _gp_gen
	lda     _c_enems+1
	sta     _gp_gen+1
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; ++ gpjt) {
;
	lda     #$00
	sta     _gpjt
L22E3:	lda     _gpjt
	cmp     #$48
	bcc     L2D82
;
; }
;
	rts
;
; SET_FROM_PTR (rdt, gp_gen); ++ gp_gen;
;
L2D82:	ldy     #0
	lda     (_gp_gen),y
	sta     _rdt
	inc     _gp_gen
	bne     L22EF
	inc     _gp_gen+1
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
L22EF:	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L22F4
	inc     _gp_gen+1
;
; ep_y [gpjt] = rda & 0xf0;
;
L22F4:	lda     #<(_ep_y)
	ldx     #>(_ep_y)
	clc
	adc     _gpjt
	bcc     L22F7
	inx
L22F7:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; ep_x [gpjt] = rda << 4;
;
	lda     #<(_ep_x)
	ldx     #>(_ep_x)
	clc
	adc     _gpjt
	bcc     L22FB
	inx
L22FB:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L2301
	inc     _gp_gen+1
;
; rdc = rda & 0xf0;
;
L2301:	lda     _rda
	and     #$F0
	sta     _rdc
;
; rdb = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen; rda &= 0x0f;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L230A
	inc     _gp_gen+1
L230A:	lda     _rda
	and     #$0F
	sta     _rda
;
; if (rda > 1) rda >>= 1; // Store converted!
;
	cmp     #$02
	bcc     L230D
	lda     _rda
	lsr     a
	sta     _rda
;
; ep_mx [gpjt] = ADD_SIGN2 (rdb, ep_x [gpjt], rda);
;
L230D:	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _gpjt
	bcc     L2313
	inx
L2313:	jsr     pushax
	ldy     _gpjt
	lda     _ep_x,y
	cmp     _rdb
	bne     L231A
	lda     #$00
	jmp     L2328
L231A:	lda     _rdb
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_x,y
	jsr     tosicmp0
	bcc     L2325
	beq     L2325
	lda     _rda
	jmp     L2328
L2325:	ldx     #$00
	lda     _rda
	jsr     negax
L2328:	ldy     #$00
	jsr     staspidx
;
; ep_my [gpjt] = ADD_SIGN2 (rdc, ep_y [gpjt], rda);  
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _gpjt
	bcc     L232E
	inx
L232E:	jsr     pushax
	ldy     _gpjt
	lda     _ep_y,y
	cmp     _rdc
	bne     L2335
	lda     #$00
	jmp     L2343
L2335:	lda     _rdc
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_y,y
	jsr     tosicmp0
	bcc     L2340
	beq     L2340
	lda     _rda
	jmp     L2343
L2340:	ldx     #$00
	lda     _rda
	jsr     negax
L2343:	ldy     #$00
	jsr     staspidx
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; ++ gpjt) {
;
	inc     _gpjt
	jmp     L22E3

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_update: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	beq     L234D
;
; gpjt = on_pant + on_pant + on_pant;
;
	lda     _on_pant
	clc
	adc     _on_pant
	bcc     L2D85
	clc
L2D85:	adc     _on_pant
	sta     _gpjt
;
; for (gpit = 0; gpit < NENEMS; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L234C:	lda     _gpit
	cmp     #$03
	bcs     L234D
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("ldy %v", gpjt);
;
	ldy     _gpjt
;
; __asm__ ("lda %v,x", en_x);
;
	lda     _en_x,x
;
; __asm__ ("sta %v,y", ep_x);
;
	sta     _ep_x,y
;
; __asm__ ("lda %v,x", en_y);
;
	lda     _en_y,x
;
; __asm__ ("sta %v,y", ep_y);
;
	sta     _ep_y,y
;
; __asm__ ("lda %v,x", en_mx);
;
	lda     _en_mx,x
;
; __asm__ ("sta %v,y", ep_mx);
;
	sta     _ep_mx,y
;
; __asm__ ("lda %v,x", en_my);
;
	lda     _en_my,x
;
; __asm__ ("sta %v,y", ep_my);
;
	sta     _ep_my,y
;
; ++ gpjt; 
;
	inc     _gpjt
;
; for (gpit = 0; gpit < NENEMS; ++ gpit) {
;
	inc     _gpit
	jmp     L234C
;
; }
;
L234D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; __asm__ ("lda %v", _en_state);
;
	lda     __en_state
;
; __asm__ ("sta %v, y", en_state);
;
	sta     _en_state,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init_fp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init_fp: near

.segment	"CODE"

;
; _enf_x = _en_x << 6;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << 6;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_boioiong_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_boioiong_init: near

.segment	"CODE"

;
; enems_init_fp ();
;
	jsr     _enems_init_fp
;
; _enf_vy = 0; 
;
	ldx     #$00
	txa
	sta     __enf_vy
	sta     __enf_vy+1
;
; _enf_vx = ADD_SIGN2 (_en_x2, _en_x1, rdm << FIXBITS);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L238C
	txa
	jmp     L2398
L238C:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L2395
	beq     L2395
	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jmp     L2398
L2395:	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jsr     negax
L2398:	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3)); // * 12
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; en_offs = rdc = (n_pant << 1) + n_pant;                               // * 3
;
	lda     _n_pant
	asl     a
	bcc     L2D8B
	clc
L2D8B:	adc     _n_pant
	sta     _rdc
	sta     _en_offs
;
; for (gpit = 0; gpit < NENEMS; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L23A8:	lda     _gpit
	cmp     #$03
	bcc     L2D8C
;
; }
;
	rts
;
; SET_FROM_PTR (_en_t, gp_gen); ++ gp_gen;
;
L2D8C:	ldy     #0
	lda     (_gp_gen),y
	sta     __en_t
	inc     _gp_gen
	bne     L23B4
	inc     _gp_gen+1
;
; _en_state = 0;
;
L23B4:	sty     __en_state
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L23BB
	inc     _gp_gen+1
;
; _en_y1 = rda & 0xf0;
;
L23BB:	lda     _rda
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L23C4
	inc     _gp_gen+1
;
; _en_y2 = rda & 0xf0;
;
L23C4:	lda     _rda
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L23CD
	inc     _gp_gen+1
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
L23CD:	lda     _rda
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = ep_x [rdc];
;
	ldy     _rdc
	lda     _ep_x,y
	sta     __en_x
;
; _en_y = ep_y [rdc];
;
	ldy     _rdc
	lda     _ep_y,y
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L23DE
	cmp     #$02
	beq     L23DE
	cmp     #$03
	beq     L23DE
	cmp     #$04
	beq     L23DE
	cmp     #$07
	jeq     L240F
	jmp     L23DC
;
; _en_ct = 0;   
;
L23DE:	lda     #$00
	sta     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ep_mx [rdc];
;
	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _rdc
	bcc     L23EE
	inx
L23EE:	ldy     #$00
	jsr     ldaidx
	sta     __en_mx
;
; _en_my = ep_my [rdc];
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _rdc
	bcc     L23F2
	inx
L23F2:	jsr     ldaidx
	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L23F3
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
;
; } else {
;
	jmp     L2D89
;
; en_status [gpit] = 0;
;
L23F3:	ldy     _gpit
	lda     #$00
L2D89:	sta     _en_status,y
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L23FE
	beq     L23FE
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L23FE:	lda     __en_y1
	sec
	sbc     __en_y2
	bcc     L23DC
	beq     L23DC
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
;
; break;
;
	jmp     L2D8A
;
; _en_ct = DEATH_COUNT_EXPRESSION; 
;
L240F:	jsr     _rand8
	and     #$3F
	clc
	adc     #$32
	sta     __en_ct
;
; _en_s = ((TYPE_7_FIXED_SPRITE - 1) << 3);
;
	lda     #$18
	sta     __en_s
;
; _en_x2 = rdm;     // != 0 means "spawned enemy fires"
;
	lda     _rdm
	sta     __en_x2
;
; _en_y2 = rdd|0xf; // Frequency
;
	lda     _rdd
	ora     #$0F
L2D8A:	sta     __en_y2
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
L23DC:	ldy     _gpit
	lda     #$02
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; en_invincible [gpit] = 0;
;
	ldy     _gpit
	sta     _en_invincible,y
;
; ++ rdc;
;
	inc     _rdc
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < NENEMS; ++ gpit) {
;
	inc     _gpit
	jmp     L23A8

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_flags [gpit] |= EN_STATE_DEAD;
;
	lda     #<(_en_flags)
	ldx     #>(_en_flags)
	clc
	adc     _gpit
	bcc     L2431
	inx
L2431:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; run_script (2 * MAP_SIZE + 5);
;
	lda     #$35
	jsr     pusha
	jsr     _run_script
;
; ++ pkilled;
;
	inc     _pkilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L243B
	lda     #$00
	jmp     L243D
L243B:	lda     #$04
L243D:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; -- en_life [gpit]; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L2445
	inx
L2445:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (en_life [gpit] == 0) 
;
	ldy     _gpit
	lda     _en_life,y
	bne     L2456
;
; if (_en_t == 7) {
;
	lda     __en_t
	cmp     #$07
	jne     _enems_kill
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; _en_ct = DEATH_COUNT_EXPRESSION;
;
	jsr     _rand8
	and     #$3F
	clc
	adc     #$32
	sta     __en_ct
;
; en_life [gpit] = ENEMS_LIFE_GAUGE; 
;
	ldy     _gpit
	lda     #$02
	sta     _en_life,y
;
; } else 
;
	rts
;
; }
;
L2456:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; touched = 0;
;
	lda     #$00
	sta     _touched
;
; ++ en_initial; if (en_initial >= NENEMS) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$03
	bcc     L245C
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L245C:	lda     _en_initial
	sta     _gpit
;
; gpjt = NENEMS; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L2464:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L2DA9
;
; }
;
	rts
;
; gpit += NENEMS-1; if (gpit > NENEMS-1) gpit -=NENEMS;
;
L2DA9:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L2469
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L2469:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; __asm__ ("lda %v, y", en_state);
;
	lda     _en_state,y
;
; __asm__ ("sta %v", _en_state);
;
	sta     __en_state
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	beq     L2464
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; en_spr_x_mod = 0;
;
	lda     #$00
	sta     _en_spr_x_mod
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	jeq     L2493
;
; -- en_cttouched [gpit];
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L2499
	inx
L2499:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; rda = frame_counter & 0xf;
;
	lda     _frame_counter
	and     #$0F
	sta     _rda
;
; _en_x + jitter [rda],
;
	jsr     decsp3
	ldy     _rda
	lda     _jitter,y
	clc
	adc     __en_x
	ldy     #$02
	sta     (sp),y
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	lda     #$0F
	sec
	sbc     _rda
	sta     ptr1
;
; _en_x + jitter [rda],
;
	lda     #$00
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	clc
	adc     #>(_jitter)
	sta     ptr1+1
	ldy     #<(_jitter)
	lda     (ptr1),y
	clc
	adc     __en_y
	bcc     L2DA8
	clc
L2DA8:	adc     #$10
	sec
	sbc     #$08
	bcs     L2D9D
	sec
L2D9D:	sbc     #$10
	bcs     L2D9E
	sec
L2D9E:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$41
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (en_life [gpit]) 
;
	ldy     _gpit
	lda     _en_life,y
	jeq     L24AA
;
; if (en_rmx [gpit])
;
	lda     #<(_en_rmx)
	ldx     #>(_en_rmx)
	clc
	adc     _gpit
	bcc     L24B1
	inx
L24B1:	ldy     #$00
	jsr     ldaidx
	jeq     L24AE
;
; RECOIL_RDX = _en_x; _en_x += en_rmx [gpit];
;
	lda     __en_x
	sta     _rdx
	lda     #<(_en_rmx)
	ldx     #>(_en_rmx)
	clc
	adc     _gpit
	bcc     L24B7
	inx
L24B7:	jsr     ldaidx
	clc
	adc     __en_x
	sta     __en_x
;
; cy1 = _en_y >> 4;
;
	ldx     #$00
	lda     __en_y
	jsr     asrax4
	sta     _cy1
;
; cy2 = (_en_y + 15) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L24BD
	inx
L24BD:	jsr     shrax4
	sta     _cy2
;
; if (en_rmx [gpit] < 0) {
;
	lda     #<(_en_rmx)
	ldx     #>(_en_rmx)
	clc
	adc     _gpit
	bcc     L24C1
	inx
L24C1:	jsr     ldaidx
	asl     a
	bcc     L24BE
;
; cx1 = cx2 = _en_x >> 4;
;
	ldx     #$00
	lda     __en_x
	jsr     asrax4
;
; } else {
;
	jmp     L2DA5
;
; cx1 = cx2 = (_en_x + 15) >> 4;
;
L24BE:	ldx     #$00
	lda     __en_x
	clc
	adc     #$0F
	bcc     L24CA
	inx
L24CA:	jsr     shrax4
L2DA5:	sta     _cx2
	sta     _cx1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; en_collx = at1 | at2;
;
	lda     _at2
	ora     _at1
	sta     _en_collx
;
; (_en_x <= _en_x1 || _en_x >= _en_x2)
;
	lda     __en_x
	sec
	sbc     __en_x1
	bcc     L24D1
	beq     L24D1
	lda     __en_x
	cmp     __en_x2
	bcc     L2D92
;
; && _en_t != 7
;
L24D1:	lda     __en_t
;
; ) 
;
	cmp     #$07
	bne     L24CF
;
; ) _en_x = RECOIL_RDX;
;
L2D92:	lda     _en_collx
	beq     L24AE
L24CF:	lda     _rdx
	sta     __en_x
;
; if (en_rmy [gpit]) {
;
L24AE:	lda     #<(_en_rmy)
	ldx     #>(_en_rmy)
	clc
	adc     _gpit
	bcc     L24DB
	inx
L24DB:	ldy     #$00
	jsr     ldaidx
	jeq     L24AA
;
; rdy = _en_y; _en_y += en_rmy [gpit];
;
	lda     __en_y
	sta     _rdy
	lda     #<(_en_rmy)
	ldx     #>(_en_rmy)
	clc
	adc     _gpit
	bcc     L24E1
	inx
L24E1:	jsr     ldaidx
	clc
	adc     __en_y
	sta     __en_y
;
; cx1 = _en_x >> 4;
;
	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx1
;
; cy1 = (_en_y + 15) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L24E7
	inx
L24E7:	jsr     shrax4
	sta     _cy1
;
; if (en_rmy [gpit] < 0) {
;
	lda     #<(_en_rmy)
	ldx     #>(_en_rmy)
	clc
	adc     _gpit
	bcc     L24EB
	inx
L24EB:	jsr     ldaidx
	asl     a
	bcc     L24E8
;
; cy1 = cy2 = _en_y >> 4;
;
	ldx     #$00
	lda     __en_y
	jsr     asrax4
;
; } else {
;
	jmp     L2DA6
;
; cy1 = cy2 = (_en_y + 15) >> 4;
;
L24E8:	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L24F4
	inx
L24F4:	jsr     shrax4
L2DA6:	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; en_colly = at1 | at2;
;
	lda     _at2
	ora     _at1
	sta     _en_colly
;
; (_en_y <= _en_y1 || _en_y >= _en_y2)
;
	lda     __en_y
	sec
	sbc     __en_y1
	bcc     L24FB
	beq     L24FB
	lda     __en_y
	cmp     __en_y2
	bcc     L2D93
;
; && _en_t != 7
;
L24FB:	lda     __en_t
;
; )
;
	cmp     #$07
	bne     L24F9
;
; ) _en_y = rdy;
;
L2D93:	lda     _en_colly
	beq     L24AA
L24F9:	lda     _rdy
	sta     __en_y
;
; if (en_cttouched [gpit] == 0 && en_life [gpit])
;
L24AA:	ldy     _gpit
	lda     _en_cttouched,y
	jne     L2731
	ldy     _gpit
	lda     _en_life,y
	jeq     L2731
;
; en_invincible [gpit] = ENEMS_INVINCIBILITY;
;
	ldy     _gpit
	lda     #$08
	sta     _en_invincible,y
;
; } else
;
	jmp     L2731
;
; if (en_is_alive) {
;
L2493:	lda     _en_is_alive
	jeq     L2731
;
; rdt = _en_t & 63;
;
	lda     __en_t
	and     #$3F
	sta     _rdt
;
; pregotten = (prx + 7 >= EN_X_ABSOLUTE && prx <= EN_X_ABSOLUTE + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L2516
	inx
L2516:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L2517
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L2518
	ldx     #$01
L2518:	jsr     tosicmp
	bcc     L2515
	beq     L2515
L2517:	lda     #$00
	jmp     L2519
L2515:	lda     #$01
L2519:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y) + 4) >> 3) & 1;
;
	lda     __en_mx
	beq     L2520
	lda     __en_x
	jmp     L2D97
L2520:	lda     __en_y
L2D97:	ldx     #$00
	clc
	adc     #$04
	bcc     L2524
	inx
L2524:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; switch (rdt) {
;
	lda     _rdt
;
; }
;
	cmp     #$01
	beq     L2529
	cmp     #$02
	beq     L2529
	cmp     #$03
	beq     L2529
	cmp     #$04
	beq     L2529
	cmp     #$07
	jeq     L25AE
	jmp     L2527
;
; __asm__ ("ldx %v", gpit);
;
L2529:	ldx     _gpit
;
; __asm__ ("lda %v, x", en_status);
;
	lda     _en_status,x
;
; __asm__ ("beq %g", enl_movement_do);
;
	beq     L2533
;
; __asm__ ("lda %v", half_life);
;
	lda     _half_life
;
; __asm__ ("beq %g", enl_movement_done);
;
	jeq     L2598
;
; __asm__ ("lda %v", _en_x);
;
L2533:	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_mx);
;
	adc     __en_mx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("bcs %g", enl_h_wse_neg);
;
	bcs     L254C
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("jmp %g", enl_h_wse_set_cx);
;
	jmp     L2551
;
; __asm__ ("lda %v", _en_x);
;
L254C:	lda     __en_x
;
; __asm__ ("lsr a");
;
L2551:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; __asm__ ("jsr %v", cm_two_points);
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("ora %v", at2);
;
	ora     _at2
;
; __asm__ ("sta %v", en_collx);
;
	sta     _en_collx
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_my);
;
	adc     __en_my
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx1);
;
	sta     _cx1
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cx2);
;
	sta     _cx2
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("bcs %g", enl_v_wse_neg);
;
	bcs     L2572
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #15");
;
	adc     #15
;
; __asm__ ("jmp %g", enl_v_wse_set_cy);
;
	jmp     L2577
;
; __asm__ ("lda %v", _en_y);
;
L2572:	lda     __en_y
;
; __asm__ ("lsr a");
;
L2577:	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", cy1);
;
	sta     _cy1
;
; __asm__ ("sta %v", cy2);
;
	sta     _cy2
;
; __asm__ ("jsr %v", cm_two_points);
;
	jsr     _cm_two_points
;
; __asm__ ("lda %v", at1);
;
	lda     _at1
;
; __asm__ ("ora %v", at2);
;
	ora     _at2
;
; __asm__ ("sta %v", en_colly);
;
	sta     _en_colly
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("cmp %v", _en_x1);
;
	cmp     __en_x1
;
; __asm__ ("beq %g", enl_h_chgd_do);
;
	beq     L2586
;
; __asm__ ("cmp %v", _en_x2);
;
	cmp     __en_x2
;
; __asm__ ("beq %g", enl_h_chgd_do);
;
	beq     L2586
;
; __asm__ ("lda %v", en_collx);
;
	lda     _en_collx
;
; __asm__ ("beq %g", enl_h_chgd_done);
;
	beq     L258B
;
; __asm__ ("lda #$0");
;
L2586:	lda     #$0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_mx);
;
	sbc     __en_mx
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v", _en_y);
;
L258B:	lda     __en_y
;
; __asm__ ("cmp %v", _en_y1);
;
	cmp     __en_y1
;
; __asm__ ("beq %g", enl_v_chgd_do);
;
	beq     L2593
;
; __asm__ ("cmp %v", _en_y2);
;
	cmp     __en_y2
;
; __asm__ ("beq %g", enl_v_chgd_do);
;
	beq     L2593
;
; __asm__ ("lda %v", en_colly);
;
	lda     _en_colly
;
; __asm__ ("beq %g", enl_v_chgd_done);
;
	beq     L2598
;
; __asm__ ("lda #$0");
;
L2593:	lda     #$0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_my);
;
	sbc     __en_my
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v", _en_mx);
;
L2598:	lda     __en_mx
;
; __asm__ ("jmp %g", enl_facing_do);
;
	bne     L25A1
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("asl a");
;
L25A1:	asl     a
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("rol a");
;
	rol     a
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("jsr %v", enems_facing);
;
	jsr     _enems_facing
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", en_fr);
;
	adc     _en_fr
;
; __asm__ ("adc %v", _en_facing);
;
	adc     __en_facing
;
; __asm__ ("sta %v", en_spr);
;
	sta     _en_spr
;
; break;
;
	jmp     L2527
;
; switch (_en_state) {
;
L25AE:	lda     __en_state
;
; }     
;
	beq     L25B3
	cmp     #$01
	jeq     L25DF
	cmp     #$02
	jeq     L25E9
	jmp     L25B1
;
; if (_en_ct) {
;
L25B3:	lda     __en_ct
	beq     L25B4
;
; -- _en_ct; _en_y = 240;
;
	dec     __en_ct
	lda     #$F0
	sta     __en_y
;
; } else {
;
	jmp     L25B1
;
; _en_state = 1;
;
L25B4:	lda     #$01
	sta     __en_state
;
; _en_x = _en_x1;
;
	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;
;
	lda     __en_y1
	sta     __en_y
;
; en_rawv [gpit] = 1 << (rand8 () % 5);
;
	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L25C2
	inx
L25C2:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; if (en_rawv [gpit] > 4) en_rawv [gpit] = 1;
;
	ldy     _gpit
	lda     _en_rawv,y
	cmp     #$05
	bcc     L25C5
	ldy     _gpit
	lda     #$01
	sta     _en_rawv,y
;
; if (en_rawv [gpit] == 1) en_status [gpit] = 1; else en_rawv [gpit] >>= 1;
;
L25C5:	ldy     _gpit
	lda     _en_rawv,y
	cmp     #$01
	bne     L25CD
	ldy     _gpit
	sta     _en_status,y
	jmp     L25D5
L25CD:	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L25D8
	inx
L25D8:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	lsr     a
	sta     (ptr1),y
;
; _en_ct = 50 + (rand8 () & 31);
;
L25D5:	jsr     _rand8
	and     #$1F
	clc
	adc     #$32
	sta     __en_ct
;
; break;
;
	jmp     L25B1
;
; en_spr = ENEMS_EXPLODING_CELL;
;
L25DF:	lda     #$20
	sta     _en_spr
;
; if (_en_ct) -- _en_ct; else _en_state = 2;
;
	lda     __en_ct
	beq     L25E2
	dec     __en_ct
	jmp     L25B1
L25E2:	lda     #$02
	sta     __en_state
;
; break;
;
	jmp     L25B1
;
; if (pflickering == 0 && pbouncing == 0 && (!en_status [gpit] || half_life)) {
;
L25E9:	lda     _pflickering
	jne     L265C
	lda     _pbouncing
	jne     L265C
	ldy     _gpit
	lda     _en_status,y
	beq     L25EB
	lda     _half_life
	jeq     L265C
;
; _en_mx = add_sign (((prx >> 2) << 2) - _en_x, en_rawv [gpit]);
;
L25EB:	jsr     decsp4
	ldx     #$00
	lda     _prx
	jsr     asrax2
	jsr     aslax2
	sec
	sbc     __en_x
	pha
	txa
	sbc     #$00
	tax
	pla
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     _gpit
	lda     _en_rawv,y
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _add_sign
	sta     __en_mx
;
; _en_my = add_sign (((pry >> 2) << 2) - _en_y, en_rawv [gpit]);
;
	jsr     decsp4
	ldx     #$00
	lda     _pry
	jsr     asrax2
	jsr     aslax2
	sec
	sbc     __en_y
	pha
	txa
	sbc     #$00
	tax
	pla
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     _gpit
	lda     _en_rawv,y
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _add_sign
	sta     __en_my
;
; _en_y += _en_my;
;
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_my) {
;
	lda     __en_my
	jeq     L2628
;
; cx1 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L260A
	inx
L260A:	jsr     shrax4
	sta     _cx1
;
; cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L260E
	inx
L260E:	jsr     shrax4
	sta     _cx2
;
; if (_en_my < 0) {
;
	lda     __en_my
	asl     a
	bcc     L260F
;
; cy1 = cy2 = (_en_y + 8) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$08
	bcc     L2616
	inx
L2616:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 8;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L261B
	inx
L261B:	jsr     shlax4
	sec
	sbc     #$08
;
; } else {
;
	jmp     L2D98
;
; cy1 = cy2 = (_en_y + 15) >> 4;
;
L260F:	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L2622
	inx
L2622:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = (cy1 - 1) << 4;
;
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
L2D98:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 || at2) {
;
	lda     _at1
	bne     L2629
	lda     _at2
	beq     L2628
;
; _en_y = rda;
;
L2629:	lda     _rda
	sta     __en_y
;
; _en_x += _en_mx;
;
L2628:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; if (_en_mx) {
;
	lda     __en_mx
	jeq     L2655
;
; cy1 = (_en_y + 8) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$08
	bcc     L2635
	inx
L2635:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 15) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L2639
	inx
L2639:	jsr     shrax4
	sta     _cy2
;
; if (_en_mx < 0) {
;
	lda     __en_mx
	asl     a
	bcc     L263A
;
; cx1 = cx2 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L2641
	inx
L2641:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L2646
	inx
L2646:	jsr     shlax4
	sec
	sbc     #$04
;
; } else {
;
	jmp     L2D99
;
; cx1 = cx2 = (_en_x + 11) >> 4;
;
L263A:	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L264D
	inx
L264D:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L2652
	dex
L2652:	jsr     shlax4
	clc
	adc     #$04
L2D99:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 || at2) {
;
	lda     _at1
	bne     L2656
	lda     _at2
	beq     L2655
;
; _en_x = rda;
;
L2656:	lda     _rda
	sta     __en_x
;
; if (_en_x2) {
;
L2655:	lda     __en_x2
	beq     L265C
;
; if ((rand8() & _en_y2) == 1) {
;
	jsr     _rand8
	sta     ptr1
	stx     ptr1+1
	lda     __en_y2
	and     ptr1
	pha
	lda     #$00
	and     ptr1+1
	tax
	pla
	cpx     #$00
	bne     L265C
	cmp     #$01
	bne     L265C
;
; rdx = _en_x + 4;
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
;
; rdy = _en_y + 4;
;
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
;
; cocos_shoot_aimed ();
;
	jsr     _cocos_shoot_aimed
;
; en_spr = ((TYPE_7_FIXED_SPRITE - 1) << 3) + en_fr;
;
L265C:	lda     _en_fr
	clc
	adc     #$18
	sta     _en_spr
;
; _en_facing = 0;
;
L25B1:	lda     #$00
	sta     __en_facing
;
; en_spr_id [gpit] = en_spr;
;
L2527:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (!pkill) {
;
	lda     _pkill
	jne     L2729
;
; if (en_invincible [gpit]) {
;
	ldy     _gpit
	lda     _en_invincible,y
	beq     L267B
;
; -- en_invincible [gpit];
;
	lda     #<(_en_invincible)
	ldx     #>(_en_invincible)
	clc
	adc     _gpit
	bcc     L267A
	inx
L267A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (half_life) en_spr = 0xff;
;
	lda     _half_life
	beq     L267B
	lda     #$FF
	sta     _en_spr
;
; en_is_alive == 0 // General condition.
;
L267B:	lda     _en_is_alive
;
; || en_cttouched [gpit]
;
	jeq     L2731
	ldy     _gpit
	lda     _en_cttouched,y
;
; || (_en_t == 7 && _en_state != 2)
;
	jne     L2731
	lda     __en_t
	cmp     #$07
	bne     L267F
	lda     __en_state
	cmp     #$02
	jne     L2731
;
; touched == 0 &&
;
L267F:	lda     _touched
	jne     L2688
;
; ) {
;
	jsr     _collide
	tax
	jeq     L2688
;
; en_sg_1 = 0;
;
	lda     #$00
	sta     _en_sg_1
;
; en_sg_2 = (pflickering == 0);
;
	lda     _pflickering
	jsr     booleq
	sta     _en_sg_2
;
; if (en_invincible [gpit]) en_sg_1 = 0;
;
	ldy     _gpit
	lda     _en_invincible,y
	beq     L2691
	stx     _en_sg_1
;
; if (en_sg_1) enems_hit ();
;
L2691:	lda     _en_sg_1
	beq     L2697
	jsr     _enems_hit
;
; if (en_sg_2) { 
;
L2697:	lda     _en_sg_2
	jeq     L269A
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; pvx = ADD_SIGN (_en_mx, PLAYER_V_REBOUND); 
;
	lda     __en_mx
	beq     L26A2
	lda     __en_mx
	sec
	sbc     #$01
	bvs     L26A8
	eor     #$80
L26A8:	bpl     L26A9
	ldx     #$00
	lda     #$E0
	jmp     L26B0
L26A9:	ldx     #$FF
	lda     #$20
	jmp     L26B0
L26A2:	tax
L26B0:	sta     _pvx
	stx     _pvx+1
;
; pvy = ADD_SIGN (_en_my, PLAYER_V_REBOUND); 
;
	lda     __en_my
	beq     L26B7
	lda     __en_my
	sec
	sbc     #$01
	bvs     L26BD
	eor     #$80
L26BD:	bpl     L26BE
	ldx     #$00
	lda     #$E0
	jmp     L26C5
L26BE:	ldx     #$FF
	lda     #$20
	jmp     L26C5
L26B7:	tax
L26C5:	sta     _pvy
	stx     _pvy+1
;
; if (!_en_mx) _en_my = ADD_SIGN (_en_y - pry, ABS (_en_my));
;
	lda     __en_mx
	bne     L26C8
	lda     __en_y
	sec
	sbc     _pry
	pha
	lda     #$00
	sta     tmp1
	pla
	ora     tmp1
	beq     L26F6
	lda     __en_y
	sec
	sbc     _pry
	pha
	pla
	beq     L26D5
	lda     __en_my
	asl     a
	bcc     L26DB
	ldx     #$00
	lda     __en_my
	bpl     L26DE
	dex
L26DE:	jsr     negax
L26E3:	cmp     #$80
	bcc     L26F6
	jmp     L26F6
L26DB:	lda     __en_my
	cmp     #$80
	bcc     L26E3
	jmp     L26F6
L26D5:	lda     __en_my
	asl     a
	bcc     L26EC
	ldx     #$00
	lda     __en_my
	bpl     L26EF
	dex
L26EF:	jsr     negax
L26F4:	ldx     #$00
	cmp     #$80
	bcc     L26F5
	jmp     L2D9A
L26EC:	lda     __en_my
	cmp     #$80
	bcc     L26F4
L2D9A:	ldx     #$FF
L26F5:	jsr     negax
L26F6:	sta     __en_my
;
; _en_mx = ADD_SIGN (EN_X_ABSOLUTE - prx, ABS (_en_mx));
;
L26C8:	lda     __en_x
	sec
	sbc     _prx
	pha
	lda     #$00
	sta     tmp1
	pla
	ora     tmp1
	beq     L2724
	lda     __en_x
	sec
	sbc     _prx
	pha
	pla
	beq     L2703
	lda     __en_mx
	asl     a
	bcc     L2709
	ldx     #$00
	lda     __en_mx
	bpl     L270C
	dex
L270C:	jsr     negax
L2711:	cmp     #$80
	bcc     L2724
	jmp     L2724
L2709:	lda     __en_mx
	cmp     #$80
	bcc     L2711
	jmp     L2724
L2703:	lda     __en_mx
	asl     a
	bcc     L271A
	ldx     #$00
	lda     __en_mx
	bpl     L271D
	dex
L271D:	jsr     negax
L2722:	ldx     #$00
	cmp     #$80
	bcc     L2723
	jmp     L2D9B
L271A:	lda     __en_mx
	cmp     #$80
	bcc     L2722
L2D9B:	ldx     #$FF
L2723:	jsr     negax
L2724:	sta     __en_mx
;
; touched = 1; 
;
L269A:	lda     #$01
	sta     _touched
;
; || en_invincible [gpit]
;
L2688:	lda     _touched
	jne     L2731
	ldy     _gpit
	lda     _en_invincible,y
;
; ) goto skipdo;
;
	jne     L2731
;
; bi = MAX_BULLETS; while (bi --) if (by [bi]) {
;
L2729:	lda     #$04
	sta     _bi
L2730:	lda     _bi
	pha
	sec
	sbc     #$01
	sta     _bi
	pla
	tax
	jeq     L2731
	ldy     _bi
	lda     _by,y
	beq     L2730
;
; if (_en_t != 7 || _en_state == 2)
;
	lda     __en_t
	cmp     #$07
	bne     L2738
	lda     __en_state
	cmp     #$02
	bne     L2730
;
; bx [bi] + 3 >= EN_X_ABSOLUTE &&
;
L2738:	ldy     _bi
	ldx     #$00
	lda     _bx,y
	clc
	adc     #$03
	bcc     L273E
	inx
L273E:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L2730
;
; bx [bi] <= EN_X_ABSOLUTE + 12 &&
;
	ldy     _bi
	lda     _bx,y
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0C
	bcc     L2742
	ldx     #$01
L2742:	jsr     tosicmp
	beq     L2DA2
	bcs     L2730
;
; by [bi] + 3 >= _en_y && 
;
L2DA2:	ldy     _bi
	ldx     #$00
	lda     _by,y
	clc
	adc     #$03
	bcc     L2745
	inx
L2745:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2730
;
; by [bi] <= _en_y + 12
;
	ldy     _bi
	lda     _by,y
	jsr     pusha0
	lda     __en_y
;
; ) {
;
	clc
	adc     #$0C
	bcc     L2748
	ldx     #$01
L2748:	jsr     tosicmp
	bcc     L273B
	jne     L2730
;
; sfx_play (SFX_ENHIT, 1);
;
L273B:	lda     #$06
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (_en_t >= PLAYER_BULLETS_MIN_KILLABLE)
;
	lda     __en_t
	cmp     #$03
	bcc     L274D
;
; enems_hit ();
;
	jsr     _enems_hit
;
; if (_en_t != 5 && _en_t != 9 && _en_t != 11) {
;
L274D:	lda     __en_t
	cmp     #$05
	jeq     L277A
	lda     __en_t
	cmp     #$09
	jeq     L277A
	lda     __en_t
	cmp     #$0B
	jeq     L277A
;
; if (bmx [bi]) {
;
	lda     #<(_bmx)
	ldx     #>(_bmx)
	clc
	adc     _bi
	bcc     L2757
	inx
L2757:	ldy     #$00
	jsr     ldaidx
	beq     L2754
;
; en_rmy [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_rmy,y
;
; en_rmx [gpit] = ENEMS_RECOIL_X;
;
	lda     #<(_en_rmx)
	ldx     #>(_en_rmx)
	clc
	adc     _gpit
	bcc     L275E
	inx
L275E:	jsr     pushax
	lda     __en_t
	cmp     #$05
	beq     L2761
	lda     __en_t
	cmp     #$09
	beq     L2761
	lda     __en_t
	cmp     #$0B
	bne     L2763
L2761:	lda     #$00
	jmp     L2799
L2763:	lda     _prx
	cmp     __en_x
	bne     L276A
	lda     #$00
	jmp     L2799
L276A:	lda     __en_x
	sec
	sbc     _prx
	bcc     L2796
	beq     L2796
	lda     #$01
	jmp     L2799
;
; en_rmx [gpit] = 0;
;
L2754:	ldy     _gpit
	lda     #$00
	sta     _en_rmx,y
;
; en_rmy [gpit] = ENEMS_RECOIL_Y;
;
	lda     #<(_en_rmy)
	ldx     #>(_en_rmy)
	clc
	adc     _gpit
	bcc     L2781
	inx
L2781:	jsr     pushax
	lda     __en_t
	cmp     #$05
	beq     L2784
	lda     __en_t
	cmp     #$09
	beq     L2784
	lda     __en_t
	cmp     #$0B
	bne     L2786
L2784:	lda     #$00
	jmp     L2799
L2786:	lda     _pry
	cmp     __en_y
	bne     L278D
	lda     #$00
	jmp     L2799
L278D:	lda     __en_y
	sec
	sbc     _pry
	bcc     L2796
	beq     L2796
	lda     #$01
	jmp     L2799
L2796:	lda     #$FF
L2799:	ldy     #$00
	jsr     staspidx
;
; bullets_destroy ();
;
L277A:	jsr     _bullets_destroy
;
; if (en_spr != 0xff) {
;
L2731:	lda     _en_spr
	cmp     #$FF
	beq     L279E
;
; _en_x + en_spr_x_mod, 
;
	jsr     decsp3
	lda     __en_x
	clc
	adc     _en_spr_x_mod
	ldy     #$02
	sta     (sp),y
;
; _en_y + SPRITE_ADJUST, 
;
	lda     __en_y
	clc
	adc     #$10
	sec
	sbc     #$08
	bcs     L2D9F
	sec
L2D9F:	sbc     #$10
	bcs     L2DA0
	sec
L2DA0:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L2DA1
	inx
	clc
L2DA1:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L279E:	jsr     _enems_update_unsigned_char_arrays
;
; } 
;
	jmp     L2464

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; unrle_vram (frame_rle, 0x2000);
;
	lda     #<(_frame_rle)
	ldx     #>(_frame_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; memfill (attr_table, 0xff, 64);
;
	jsr     decsp3
	lda     #<(_attr_table)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$FF
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (oobjs != pobjs) {
;
	lda     _pobjs
	cmp     _oobjs
	beq     L27B5
;
; oobjs = pobjs;
;
	lda     _pobjs
	sta     _oobjs
;
; _x = OBJECTS_X; _y = OBJECTS_Y; 
;
	lda     #$1B
	sta     __x
	lda     #$1D
	sta     __y
;
; _n = pobjs; 
;
	lda     _pobjs
	sta     __n
;
; p_t ();
;
	jsr     _p_t
;
; if (okeys != pkeys) {
;
L27B5:	lda     _pkeys
	cmp     _okeys
	beq     L27C0
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
;
	lda     #$16
	sta     __x
	lda     #$1D
	sta     __y
	lda     _pkeys
	sta     __n
	jsr     _p_t
;
; if (olife != plife) {
;
L27C0:	lda     _plife
	cmp     _olife
	beq     L27CB
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$03
	sta     __x
	lda     #$1D
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; if (oammo != pammo) {
;
L27CB:	lda     _pammo
	cmp     _oammo
	beq     L27D6
;
; oammo = pammo;
;
	lda     _pammo
	sta     _oammo
;
; _x = AMMO_X; _y = AMMO_Y; _n = pammo; p_t ();
;
	lda     #$08
	sta     __x
	lda     #$1D
	sta     __y
	lda     _pammo
	sta     __n
	jmp     _p_t
;
; }
;
L27D6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; while (pad_poll (0));
;
L27E3:	lda     #$00
	jsr     _pad_poll
	tax
	bne     L27E3
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ pres_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres_title: near

.segment	"CODE"

;
; unrle_vram (title_rle, 0x2000);
;
	lda     #<(_title_rle)
	ldx     #>(_title_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (MUSIC_TITLE);
;
	lda     #$01
	jsr     _music_play
;
; gpit = 0;
;
	lda     #$00
	sta     _gpit
;
; pad0 = pad_poll (0);
;
L27F7:	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; if (pad0 & PAD_START) break;
;
	and     #$08
	bne     L27F8
;
; if (pad0 & PAD_SELECT) {
;
	lda     _pad0
	and     #$04
	beq     L2807
;
; sfx_play (0, 1);
;
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; gpit = 1 - gpit;
;
	lda     #$01
	sec
	sbc     _gpit
	sta     _gpit
;
; while (pad_poll (0));
;
L2806:	lda     #$00
	jsr     _pad_poll
	tax
	bne     L2806
;
; oam_meta_spr (84, 156 + (gpit << 4) + 7, 128, spr_player [0]);
;
L2807:	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _gpit
	jsr     aslax4
	clc
	adc     #$9C
	bcc     L2DAE
	clc
L2DAE:	adc     #$07
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _spr_player
	ldx     _spr_player+1
	jsr     _oam_meta_spr
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; }
;
	jmp     L27F7
;
; music_stop ();
;
L27F8:	jsr     _music_stop
;
; sfx_play (7, 1);
;
	lda     #$07
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; bat_out ();
;
	jsr     _bat_out
;
; return gpit;
;
	ldx     #$00
	lda     _gpit
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pres_common (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres_common: near

.segment	"CODE"

;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (MUSIC_GAME_OVER);
;
	lda     #$02
	jsr     _music_play
;
; while (!pad_poll (0));
;
L281E:	lda     #$00
	jsr     _pad_poll
	tax
	beq     L281E
;
; bat_out ();
;
	jmp     _bat_out

.endproc

; ---------------------------------------------------------------
; void __near__ pres_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres_game_over: near

.segment	"CODE"

;
; unrle_vram (cuts_rle, 0x2000);
;
	lda     #<(_cuts_rle)
	ldx     #>(_cuts_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; _x = 10; _y = 12; pr_str ("GAME OVER!");
;
	lda     #$0A
	sta     __x
	lda     #$0C
	sta     __y
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _x =  4; _y = 14; pr_str ("NICE TRY, BUT NO BANANA!");
;
	lda     #$04
	sta     __x
	lda     #$0E
	sta     __y
	lda     #<(L0001+11)
	ldx     #>(L0001+11)
	jsr     pushax
	jsr     _pr_str
;
; _x =  5; _y = 16; pr_str ("DO IT BETTER NEXT TIME");
;
	lda     #$05
	sta     __x
	lda     #$10
	sta     __y
	lda     #<(L0001+36)
	ldx     #>(L0001+36)
	jsr     pushax
	jsr     _pr_str
;
; _x =  9; _y = 18; pr_str ("MISSION FAILED");
;
	lda     #$09
	sta     __x
	lda     #$12
	sta     __y
	lda     #<(L0001+59)
	ldx     #>(L0001+59)
	jsr     pushax
	jsr     _pr_str
;
; pres_common ();
;
	jmp     _pres_common

.endproc

; ---------------------------------------------------------------
; void __near__ pres_ending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres_ending: near

.segment	"CODE"

;
; unrle_vram (cuts_rle, 0x2000);
;
	lda     #<(_cuts_rle)
	ldx     #>(_cuts_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; _x = 9; _y = 12; pr_str ("CONGRATULATIONS!");
;
	lda     #$09
	sta     __x
	lda     #$0C
	sta     __y
	lda     #<(L0001+74)
	ldx     #>(L0001+74)
	jsr     pushax
	jsr     _pr_str
;
; _x = 2; _y = 14; pr_str ("YOU MANAGED TO SET THE BOMBS");
;
	lda     #$02
	sta     __x
	lda     #$0E
	sta     __y
	lda     #<(L0001+91)
	ldx     #>(L0001+91)
	jsr     pushax
	jsr     _pr_str
;
; _x = 4; _y = 16; pr_str ("AND DESTROY THE COMPUTER");
;
	lda     #$04
	sta     __x
	lda     #$10
	sta     __y
	lda     #<(L0001+120)
	ldx     #>(L0001+120)
	jsr     pushax
	jsr     _pr_str
;
; _x = 5; _y = 18; pr_str ("MISSION ACCOMPLISHED!!"); 
;
	lda     #$05
	sta     __x
	lda     #$12
	sta     __y
	lda     #<(L0001+145)
	ldx     #>(L0001+145)
	jsr     pushax
	jsr     _pr_str
;
; pres_common ();
;
	jmp     _pres_common

.endproc

; ---------------------------------------------------------------
; void __near__ credits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_credits: near

.segment	"CODE"

;
; pal_bg (palts0);
;
	lda     #<(_palts0)
	ldx     #>(_palts0)
	jsr     _pal_bg
;
; pal_spr (palss0);
;
	lda     #<(_palss0)
	ldx     #>(_palss0)
	jsr     _pal_spr
;
; vram_adr (0x2000); vram_fill (0xff,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$FF
	jsr     pusha
	ldx     #$04
	lda     #$00
	jsr     _vram_fill
;
; oam_clear (); scroll (0, 0);
;
	jsr     _oam_clear
	jsr     push0
	jsr     _scroll
;
; lower_end = 0; rdy = 240;
;
	lda     #$00
	sta     _lower_end
	sta     _lower_end+1
	lda     #$F0
	sta     _rdy
;
; _x = 3; _y = 22; pr_str ("SGT. HELMET - TRAINING DAY");
;
	lda     #$03
	sta     __x
	lda     #$16
	sta     __y
	lda     #<(L0001+168)
	ldx     #>(L0001+168)
	jsr     pushax
	jsr     _pr_str
;
; _y = 26; pr_str ("NESLIB & SFX CODE BY SHIRU");
;
	lda     #$1A
	sta     __y
	lda     #<(L0001+195)
	ldx     #>(L0001+195)
	jsr     pushax
	jsr     _pr_str
;
; _y = 27; pr_str ("TITLE TUNE ARR BY DAVIDIAN");
;
	lda     #$1B
	sta     __y
	lda     #<(L0001+222)
	ldx     #>(L0001+222)
	jsr     pushax
	jsr     _pr_str
;
; _x = 0; _y = 24; pr_str ("(C) 2013,2018 BY THE MOJON TWINS");
;
	lda     #$00
	sta     __x
	lda     #$18
	sta     __y
	lda     #<(L0001+249)
	ldx     #>(L0001+249)
	jsr     pushax
	jsr     _pr_str
;
; _y = 25; pr_str ("DESIGN:ANJUEL  NES PORT:NA-TH-AN");
;
	lda     #$19
	sta     __y
	lda     #<(L0001+282)
	ldx     #>(L0001+282)
	jsr     pushax
	jsr     _pr_str
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; bat_in ();
;
	jsr     _bat_in
;
; while (!(pad_poll (0) & PAD_START) && lower_end < 300) {
;
L288A:	lda     #$00
	jsr     _pad_poll
	and     #$08
	jne     _bat_out
	lda     _lower_end
	cmp     #$2C
	lda     _lower_end+1
	sbc     #$01
	bvc     L2890
	eor     #$80
L2890:	jpl     _bat_out
;
; oam_meta_spr (102, rdy, 0, spr_logo_00);
;
	jsr     decsp3
	lda     #$66
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #<(_spr_logo_00)
	ldx     #>(_spr_logo_00)
	jsr     _oam_meta_spr
;
; if (rdy > 112) rdy --;
;
	lda     _rdy
	cmp     #$71
	bcc     L2897
	lda     _rdy
	sec
	sbc     #$01
	sta     _rdy
;
; ppu_waitnmi ();
;
L2897:	jsr     _ppu_waitnmi
;
; lower_end ++;
;
	lda     _lower_end
	ldx     _lower_end+1
	clc
	adc     #$01
	bcc     L289C
	inx
L289C:	sta     _lower_end
	stx     _lower_end+1
;
; };
;
	jmp     L288A

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_byte: near

.segment	"CODE"

;
; return *script ++;
;
	lda     _script
	ldx     _script+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2A66
	inx
L2A66:	sta     _script
	stx     _script+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_vbyte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_vbyte: near

.segment	"CODE"

;
; sc_c = *script ++;
;
	lda     _script
	ldx     _script+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2A6A
	inx
L2A6A:	sta     _script
	stx     _script+1
	ldy     #$00
	lda     (regsave),y
	sta     _sc_c
;
; if (sc_c & 128) return flags [sc_c & 127];
;
	and     #$80
	beq     L2A6B
	lda     _sc_c
	and     #$7F
	sta     ptr1
	tya
	clc
	adc     #>(_flags)
	sta     ptr1+1
	ldy     #<(_flags)
	ldx     #$00
	lda     (ptr1),y
	rts
;
; return sc_c;
;
L2A6B:	ldx     #$00
	lda     _sc_c
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readxy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readxy: near

.segment	"CODE"

;
; sc_x = read_vbyte ();
;
	jsr     _read_vbyte
	sta     _sc_x
;
; sc_y = read_vbyte ();
;
	jsr     _read_vbyte
	sta     _sc_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_horizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_horizontal: near

.segment	"CODE"

;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L2B16
;
; pvx < 0
;
	ldx     _pvx+1
;
; ) {
;
	cpx     #$80
	bcc     L2B16
;
; -- n_pant;
;
	dec     _n_pant
;
; px = MAX_PRX << FIXBITS;
;
	ldx     #$3D
;
; } else if (prx == MAX_PRX && 
;
	jmp     L2DB1
L2B16:	lda     _prx
	cmp     #$F4
	bne     L2B20
;
; pvx > 0
;
	lda     _pvx
;
; ) {
;
	cmp     #$01
;
; pvx > 0
;
	lda     _pvx+1
;
; ) {
;
	sbc     #$00
	bvs     L2B21
	eor     #$80
L2B21:	bmi     L2B1F
L2B20:	rts
;
; ++ n_pant;
;
L2B1F:	inc     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
L2DB1:	lda     #$00
	sta     _px
	stx     _px+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_vertical (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_vertical: near

.segment	"CODE"

;
; if (pry <= 16 && pvy < 0) {
;
	lda     _pry
	cmp     #$11
	bcs     L2B27
	ldx     _pvy+1
	cpx     #$80
	bcc     L2B27
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
;
; } else if (pry >= 192 && pvy > 0) {
;
	jmp     L2DB4
L2B27:	lda     _pry
	cmp     #$C0
	bcc     L2B32
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2B33
	eor     #$80
L2B33:	bmi     L2B31
L2B32:	rts
;
; n_pant += c_map_w;
;
L2B31:	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 16 << FIXBITS;
;
	ldx     #$04
L2DB4:	lda     #$00
	sta     _py
	stx     _py+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_do: near

.segment	"CODE"

;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("bne %g", hrt_interaction_coll_1);
;
	bne     L2B3C
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("lda %v", prx);
;
L2B3C:	lda     _prx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #4");
;
	adc     #4
;
; __asm__ ("cmp %v", hrx);
;
	cmp     _hrx
;
; __asm__ ("bcc %g", hrt_interaction_done);
;
	bcc     L2B43
;
; __asm__ ("lda %v", hrx);
;
	lda     _hrx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #11");
;
	adc     #11
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("bcc %g", hrt_interaction_done);
;
	bcc     L2B43
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #8"); 
;
	adc     #8
;
; __asm__ ("cmp %v", hry);
;
	cmp     _hry
;
; __asm__ ("bcc %g", hrt_interaction_done);
;
	bcc     L2B43
;
; __asm__ ("lda %v", hry);
;
	lda     _hry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", pry);
;
	cmp     _pry
;
; __asm__ ("jmp %g", hrt_interaction_pre);
;
	bcs     L2B54
;
; __asm__ ("rts");
;
L2B43:	rts
;
; __asm__ ("lda #0");
;
L2B54:	lda     #0
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("cmp %b", HOTSPOT_TYPE_OBJECT);
;
	cmp     $01
;
; __asm__ ("beq %g", hrt_type_object);
;
	beq     L2B5C
;
; __asm__ ("cmp %b", HOTSPOT_TYPE_KEYS);
;
	cmp     $02
;
; __asm__ ("beq %g", hrt_type_keys);
;
	beq     L2B60
;
; __asm__ ("cmp %b", HOTSPOT_TYPE_AMMO);
;
	cmp     $04
;
; __asm__ ("beq %g", hrt_type_ammo);
;
	beq     L2B64
;
; __asm__ ("lda %v", plife);
;
	lda     _plife
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", PLAYER_REFILL);
;
	adc     #$01
;
; __asm__ ("sta %v", plife);
;
	sta     _plife
;
; __asm__ ("lda #%b", SFX_USE);
;
	lda     #$03
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("jmp %g", hrt_interaction_finish);
;
	jmp     L2B6E
;
; __asm__ ("inc %v", pobjs);
;
L2B5C:	inc     _pobjs
;
; __asm__ ("lda #%b", SFX_OBJECT);
;
	lda     #$02
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("jmp %g", hrt_interaction_finish); 
;
	jmp     L2B6E
;
; __asm__ ("inc %v", pkeys);
;
L2B60:	inc     _pkeys
;
; __asm__ ("lda #%b", SFX_OBJECT);
;
	lda     #$02
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("jmp %g", hrt_interaction_finish); 
;
	jmp     L2B6E
;
; __asm__ ("lda #%b", SFX_OBJECT);
;
L2B64:	lda     #$02
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda #%b", MAX_AMMO);
;
	lda     #$63
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", pammo);
;
	sbc     _pammo
;
; __asm__ ("cmp #%b", AMMO_REFILL);
;
	cmp     #$32
;
; __asm__ ("bcc %g", hrt_type_ammo_do_set);
;
	bcc     L2B83
;
; __asm__ ("lda %v", pammo);
;
	lda     _pammo
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %b", AMMO_REFILL);
;
	adc     $32
;
; __asm__ ("jmp %g", hrt_interaction_finish);
;
	jmp     L2DB5
;
; __asm__ ("lda %b", MAX_AMMO);
;
L2B83:	lda     $63
;
; __asm__ ("sta %v", pammo);
;
L2DB5:	sta     _pammo
;
; if (rda) {
;
L2B6E:	lda     _rda
	beq     L2B8E
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [HS_CUR_PANT] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; }
;
L2B8E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   l_pal_bg [level];
;
	tax
	lda     _level
	asl     a
	bcc     L2DC1
	inx
	clc
L2DC1:	adc     #<(_l_pal_bg)
	sta     ptr1
	txa
	adc     #>(_l_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_pal_bg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_bg
;
; c_pal_fg =   l_pal_fg [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC2
	inx
	clc
L2DC2:	adc     #<(_l_pal_fg)
	sta     ptr1
	txa
	adc     #>(_l_pal_fg)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_pal_fg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_fg
;
; c_ts_tmaps =  l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC3
	inx
	clc
L2DC3:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_ts_pals =  l_ts_pals [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC4
	inx
	clc
L2DC4:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_behs =   l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC5
	inx
	clc
L2DC5:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; spr_enems =  l_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC6
	inx
	clc
L2DC6:	adc     #<(_l_spr_enems)
	sta     ptr1
	txa
	adc     #>(_l_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; c_map =   l_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC7
	inx
	clc
L2DC7:	adc     #<(_l_map)
	sta     ptr1
	txa
	adc     #>(_l_map)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_map+1
	dey
	lda     (ptr1),y
	sta     _c_map
;
; c_locks =  l_locks [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC8
	inx
	clc
L2DC8:	adc     #<(_l_locks)
	sta     ptr1
	txa
	adc     #>(_l_locks)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_locks+1
	dey
	lda     (ptr1),y
	sta     _c_locks
;
; l_n_bolts [level];
;
	ldy     _level
	lda     _l_n_bolts,y
	sta     _c_max_bolts
;
; c_enems =   l_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC9
	inx
	clc
L2DC9:	adc     #<(_l_enems)
	sta     ptr1
	txa
	adc     #>(_l_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_enems+1
	dey
	lda     (ptr1),y
	sta     _c_enems
;
; c_hotspots =  l_hotspots [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DCA
	inx
	clc
L2DCA:	adc     #<(_l_hotspots)
	sta     ptr1
	txa
	adc     #>(_l_hotspots)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_hotspots+1
	dey
	lda     (ptr1),y
	sta     _c_hotspots
;
; c_max_enems =  l_player_max_enems [level];
;
	ldy     _level
	lda     _l_player_max_enems,y
	sta     _c_max_enems
;
; c_map_w =   l_map_w [level];
;
	ldy     _level
	lda     _l_map_w,y
	sta     _c_map_w
;
; c_map_h =   l_map_h [level];
;
	ldy     _level
	lda     _l_map_h,y
	sta     _c_map_h
;
; rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
;
	sta     _rda
	lda     #$00
L2DC0:	sta     _c_map_size
	lda     _rda
	pha
	sec
	sbc     #$01
	sta     _rda
	pla
	tax
	beq     L2BD0
	lda     _c_map_w
	clc
	adc     _c_map_size
	jmp     L2DC0
;
; pal_bg (c_pal_bg);
;
L2BD0:	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; memfill (lkact, 1, c_max_bolts);
;
	jsr     decsp3
	lda     #<(_lkact)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lkact)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	lda     _c_max_bolts
	ldx     #$00
	jsr     _memfill
;
; if (!warp_to_level) {
;
	lda     _warp_to_level
	bne     L2BDF
;
; n_pant = SCR_INI;
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	clc
	adc     #$04
	bcc     L2BED
	inx
L2BED:	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_to_pixels ();
;
L2BDF:	jsr     _player_to_pixels
;
; player_init ();
;
	jsr     _player_init
;
; enems_persistent_load ();
;
	jsr     _enems_persistent_load
;
; pobjs = 0;
;
	lda     #$00
	sta     _pobjs
;
; pkeys = 0;
;
	sta     _pkeys
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) {
;
	lda     _ft
	bne     L2C03
;
; fade_out (); 
;
	jsr     _fade_out
;
; } else {
;
	jmp     L2DCB
;
; ft = 0;
;
L2C03:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
L2DCB:	jsr     _ppu_off
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; enems_persistent_update ();
;
	jsr     _enems_persistent_update
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; cocos_init ();
;
	jsr     _cocos_init
;
; f_zone_ac = 0;
;
	lda     #$00
	sta     _f_zone_ac
;
; fzx1 = fzx2 = fzy1 = fzy2 = 240;
;
	lda     #$F0
	sta     _fzy2
	sta     _fzy1
	sta     _fzx2
	sta     _fzx1
;
; draw_scr ();
;
	jsr     _draw_scr
;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) brkf [gpit] = 0;
;
	lda     #$04
	sta     _gpit
L2C1D:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2C1E
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
	jmp     L2C1D
;
; _x = LINE_OF_TEXT_X; _y = LINE_OF_TEXT;
;
L2C1E:	lda     #$01
	sta     __x
	lda     #$1A
	sta     __y
;
; pr_str ("                              ");
;
	lda     #<(L0001+315)
	ldx     #>(L0001+315)
	jsr     pushax
	jsr     _pr_str
;
; for (gpit = 0; gpit < MAX_BULLETS; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L2C2A:	lda     _gpit
	cmp     #$04
	bcs     L2C2B
;
; b_slots [gpit] = gpit; by [gpit] = 0;
;
	ldy     _gpit
	lda     _gpit
	sta     _b_slots,y
	ldy     _gpit
	lda     #$00
	sta     _by,y
;
; for (gpit = 0; gpit < MAX_BULLETS; ++ gpit) {
;
	inc     _gpit
	jmp     L2C2A
;
; b_slots_i = MAX_BULLETS;
;
L2C2B:	lda     #$04
	sta     _b_slots_i
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; run_script (2 * MAP_SIZE + 1);
;
	lda     #$31
	jsr     pusha
	jsr     _run_script
;
; run_script (n_pant << 1);
;
	lda     _n_pant
	asl     a
	jsr     pusha
	jsr     _run_script
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
	lda     #$03
	sta     _gpit
L2C43:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2C44
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L2C48
	inx
L2C48:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L2C43
;
; oam_index = 4;
;
L2C44:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L2C54
	jsr     _hotspots_paint
;
; hud_update ();
;
L2C54:	jsr     _hud_update
;
; update_cycle ();
;
	jsr     _update_cycle
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (l_music [level]);
;
	ldy     _level
	lda     _l_music,y
	jsr     _music_play
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; msc_clear_flags ();
;
	jsr     _msc_clear_flags
;
; run_script (2 * MAP_SIZE);
;
	lda     #$30
	jsr     pusha
	jsr     _run_script
;
; half_life = frame_counter = real_frame_counter = 0;
;
	lda     #$00
	sta     _real_frame_counter
	sta     _frame_counter
	sta     _half_life
;
; ntsc_frame = level_reset = warp_to_level = 0; 
;
	sta     _warp_to_level
	sta     _level_reset
	sta     _ntsc_frame
;
; oam_index = 4; ticker = 50;
;
	lda     #$04
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; if (n_pant != 0xfe && on_pant != 0xfe) 
;
L2C7C:	lda     _n_pant
	cmp     #$FE
	beq     L2C7F
	lda     _on_pant
	cmp     #$FE
	beq     L2C7F
;
; hud_update ();
;
	jsr     _hud_update
;
; if (pkill) {
;
L2C7F:	lda     _pkill
	beq     L2C84
;
; player_kill (); 
;
	jsr     _player_kill
;
; if (game_over || level_reset) break;   
;
L2C84:	lda     _game_over
	jne     L2C7D
	lda     _level_reset
	jne     L2C7D
;
; flick_override = 0;
;
	sta     _flick_override
;
; if (flick_override == 0) {
;
	lda     _flick_override
	bne     L2C8C
;
; flickscreen_do_horizontal ();
;
	jsr     _flickscreen_do_horizontal
;
; flickscreen_do_vertical ();
;
	jsr     _flickscreen_do_vertical
;
; if (on_pant != n_pant) {
;
L2C8C:	lda     _n_pant
	cmp     _on_pant
	beq     L2C90
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; update_cycle ();
;
L2C90:	jsr     _update_cycle
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; ++ real_frame_counter;
;
	inc     _real_frame_counter
;
; ++ ntsc_frame; if (ntsc_frame == 6) ntsc_frame = 0;
;
	inc     _ntsc_frame
	lda     _ntsc_frame
	cmp     #$06
	bne     L2C9F
	lda     #$00
	sta     _ntsc_frame
;
; if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
;
L2C9F:	lda     _paused
	jne     L2CD2
	lda     _ntsc
	beq     L2CA4
	lda     _ntsc_frame
	jeq     L2CD2
;
; if (ticker) -- ticker; else ticker = 50;
;
L2CA4:	lda     _ticker
	beq     L2CA9
	dec     _ticker
	jmp     L2CAC
L2CA9:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L2CAC:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; hotspots_do ();
;
	jsr     _hotspots_do
;
; if (f_zone_ac && (prx >= fzx1 && prx <= fzx2 && pry >= fzy1 && pry <= fzy2)) {
;
	lda     _f_zone_ac
	beq     L2CB3
	lda     _prx
	cmp     _fzx1
	bcc     L2CB3
	lda     _prx
	sec
	sbc     _fzx2
	sta     tmp1
	lda     tmp1
	beq     L2DCD
	bcs     L2CB3
L2DCD:	lda     _pry
	cmp     _fzy1
	bcc     L2CB3
	lda     _pry
	sec
	sbc     _fzy2
	bcc     L2CB4
	bne     L2CB3
;
; run_fire_script ();
;
L2CB4:	jsr     _run_fire_script
;
; if (!warp_to_level && !pkill) {
;
L2CB3:	lda     _warp_to_level
	bne     L2CBB
	lda     _pkill
	bne     L2CBB
;
; player_move ();
;
	jsr     _player_move
;
; script_result == 1
;
L2CBB:	lda     _script_result
;
; ) {
;
	cmp     #$01
	bne     L2CC0
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L2C7D
;
; bullets_move ();
;
L2CC0:	jsr     _bullets_move
;
; if (!warp_to_level) player_render ();
;
	lda     _warp_to_level
	bne     L2CC6
	jsr     _player_render
;
; enems_move ();
;
L2CC6:	jsr     _enems_move
;
; cocos_do ();
;
	jsr     _cocos_do
;
; if (warp_to_level) {
;
	lda     _warp_to_level
	beq     L2CCB
;
; update_cycle (); music_stop (); break;
;
	jsr     _update_cycle
	jsr     _music_stop
	jmp     L2C7D
;
; if (hrt) hotspots_paint ();
;
L2CCB:	lda     _hrt
	beq     L2CCF
	jsr     _hotspots_paint
;
; if (do_process_breakable) breakable_do_anim ();
;
L2CCF:	lda     _do_process_breakable
	beq     L2CD2
	jsr     _breakable_do_anim
;
; if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
;
L2CD2:	lda     _pad0
	and     #$16
	cmp     #$16
	beq     L2C7D
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	jeq     L2C7C
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L2C7C
;
; fade_delay = 4;
;
L2C7D:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
	sta     _first_game
;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; credits ();
;
	jsr     _credits
;
; scroll (0, SCROLL_Y);
;
	jsr     push0
	lda     #$08
	jsr     _scroll
;
; level = pres_title ();
;
L2CFA:	jsr     _pres_title
	sta     _level
;
; plife = PLAYER_LIFE;
;
	lda     #$09
	sta     _plife
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
	beq     L2D06
;
; pres_game_over ();
;
	jsr     _pres_game_over
;
; break;
;
	jmp     L2D02
;
; pres_ending ();
;
L2D06:	jsr     _pres_ending
;
; first_game = 0;
;
L2D02:	lda     #$00
	sta     _first_game
;
; }
;
	jmp     L2CFA

.endproc

