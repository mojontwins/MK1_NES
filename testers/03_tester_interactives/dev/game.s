;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_delay
	.export		_bitmasks
	.export		_bits
	.export		_palts0
	.export		_palss0
	.export		_behs0
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_scr_0_03
	.export		_scr_0_04
	.export		_scr_0_06
	.export		_scr_0_08
	.export		_scr_0_09
	.export		_map_0
	.export		_enems_0
	.export		_hotspots_0
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06_a
	.export		_sspl_06_b
	.export		_sspl_07_a
	.export		_sspl_07_b
	.export		_sspl_08_a
	.export		_sspl_08_b
	.export		_sspl_09_a
	.export		_sspl_09_b
	.export		_sspl_0A_a
	.export		_sspl_0A_b
	.export		_sspl_0B_a
	.export		_sspl_0B_b
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssit_05
	.export		_ssit_06
	.export		_ssit_07
	.export		_ssit_08
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_hs
	.export		_custom_text0
	.export		_custom_text1
	.export		_custom_text2
	.export		_custom_texts
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_pad0
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_rds16
	.export		_gpint
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_ram
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rde
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_rdaa
	.export		_en_x_offs
	.export		_split_on
	.export		_ast1
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_is_alive
	.export		_pregotten
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__en_state
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pcx
	.export		_pcy
	.export		_pfacing
	.export		_pfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pgotten
	.export		_ppossee
	.export		_oppossee
	.export		_pflickering
	.export		_pbouncing
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_hitv
	.export		_hith
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pcontinues
	.export		_plife
	.export		_pobjs
	.export		_pammo
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_map_h
	.export		_c_map_size
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_sc_x
	.export		_sc_y
	.export		_sc_n
	.export		_sc_c
	.export		_next_script
	.export		_script
	.export		_script_result
	.export		_sc_terminado
	.export		_sc_continuar
	.export		_nametable_base
	.export		_buff_offset
	.export		_attr_table_offset
	.export		_buff_ptr
	.export		_attr_ptr
	.export		_scroll_x
	.export		_scroll_x_r
	.export		_on_screen
	.export		_ntsc
	.export		_ntsc_frame
	.export		_update_index
	.export		_update_list
	.export		_attr_table
	.export		_fader
	.export		_fade_delay
	.export		_map_attr
	.export		_map_buff
	.export		_first_game
	.export		_level
	.export		_c_max_enems
	.export		_n_pant
	.export		_on_pant
	.export		_half_life
	.export		_frame_counter
	.export		_real_frame_counter
	.export		_paused
	.export		_win_level
	.export		_game_over
	.export		_warp_to_level
	.export		_level_reset
	.export		_flick_override
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_oam_index_player
	.export		_prx_old
	.export		_pry_old
	.export		_vertical_engine_type
	.export		_use_ct
	.export		_use_sub_ct
	.export		_run_fire_script_do
	.export		_use_type
	.export		_en_sg_1
	.export		_en_sg_2
	.export		_hact
	.export		_d_hrx
	.export		_d_hry
	.export		_d_hrt
	.export		_run_script
	.export		_f_zone_ac
	.export		_fzx1
	.export		_fzx2
	.export		_fzy1
	.export		_fzy2
	.export		_fire_script_success
	.export		_just_interacted
	.export		_script_arg
	.export		_odd
	.export		_flags
	.export		_interactives_interact_with
	.export		_interactives_index
	.export		_interactives_f
	.export		_interactives_x
	.export		_interactives_y
	.export		_en_t
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_s
	.export		_en_facing
	.export		_en_state
	.export		_en_flags
	.export		_en_cttouched
	.export		_en_life
	.export		_en_status
	.export		_en_ct
	.export		_en_spr_x_mod
	.export		_en_spr_id
	.export		_player_render
	.export		_player_to_pixels
	.export		_fade_body
	.export		_fade_out
	.export		_fade_in
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_half_scr
	.export		_draw_scr
	.export		_pr_str
	.export		_cm_two_points
	.export		_collide
	.export		_add_sign
	.export		_run_fire_script
	.export		_saturate
	.export		_pad_read
	.export		_jump_start
	.export		_update_cycle
	.export		_scroll_to
	.export		_calc_scroll_pos
	.export		_calc_en_x_absolute
	.export		_box_buff
	.export		_textbox_frame
	.export		_textbox_draw_text
	.export		_textbox_do
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_interactives_paint
	.export		_interactives_add
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_kill
	.export		_player_move
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_init_fp
	.export		_enems_boioiong_init
	.export		_enems_load
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_script_pool_0
	.export		_script_pool
	.export		_read_byte
	.export		_read_vbyte
	.export		_readxy
	.export		_flickscreen_do_horizontal
	.export		_flickscreen_do_vertical
	.export		_hotspots_do
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_palts0:
	.byte	$0F
	.byte	$04
	.byte	$27
	.byte	$35
	.byte	$0F
	.byte	$02
	.byte	$13
	.byte	$24
	.byte	$0F
	.byte	$05
	.byte	$15
	.byte	$24
	.byte	$0F
	.byte	$07
	.byte	$1A
	.byte	$29
_palss0:
	.byte	$0F
	.byte	$04
	.byte	$24
	.byte	$27
	.byte	$0F
	.byte	$06
	.byte	$1A
	.byte	$29
	.byte	$0F
	.byte	$15
	.byte	$24
	.byte	$3D
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$38
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$04
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_scr_0_00:
	.byte	$05
	.byte	$15
	.byte	$65
	.byte	$12
	.byte	$E0
	.byte	$00
	.byte	$85
	.byte	$15
	.byte	$05
	.byte	$12
	.byte	$E0
	.byte	$45
	.byte	$15
	.byte	$65
	.byte	$12
	.byte	$C0
	.byte	$85
	.byte	$15
	.byte	$45
	.byte	$12
	.byte	$A0
	.byte	$01
	.byte	$C3
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$E3
	.byte	$01
	.byte	$A0
	.byte	$02
	.byte	$C3
	.byte	$1D
	.byte	$1C
	.byte	$A0
	.byte	$01
	.byte	$C3
	.byte	$E1
	.byte	$01
	.byte	$0C
	.byte	$E3
	.byte	$83
	.byte	$22
	.byte	$13
	.byte	$E3
	.byte	$83
	.byte	$21
	.byte	$08
	.byte	$13
	.byte	$43
	.byte	$27
	.byte	$C3
	.byte	$02
	.byte	$01
	.byte	$11
	.byte	$E5
	.byte	$05
	.byte	$12
	.byte	$23
	.byte	$22
	.byte	$00
_scr_0_01:
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$E2
	.byte	$E2
	.byte	$00
_scr_0_02:
	.byte	$00
	.byte	$11
	.byte	$E5
	.byte	$05
	.byte	$12
	.byte	$23
	.byte	$22
	.byte	$00
	.byte	$0D
	.byte	$E3
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$E3
	.byte	$83
	.byte	$02
	.byte	$14
	.byte	$09
	.byte	$E3
	.byte	$83
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$03
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$83
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$03
	.byte	$01
	.byte	$29
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$1C
	.byte	$23
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$01
	.byte	$29
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$00
	.byte	$1C
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$01
	.byte	$29
	.byte	$03
	.byte	$5B
	.byte	$1C
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$5B
	.byte	$03
	.byte	$02
	.byte	$29
	.byte	$43
	.byte	$1C
	.byte	$00
	.byte	$1C
	.byte	$20
	.byte	$3C
	.byte	$03
	.byte	$1C
	.byte	$03
	.byte	$01
	.byte	$0A
	.byte	$09
	.byte	$0D
	.byte	$3C
	.byte	$40
	.byte	$1E
	.byte	$40
	.byte	$1C
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$29
	.byte	$0D
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$0D
	.byte	$44
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$0D
	.byte	$11
	.byte	$E5
	.byte	$25
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$12
	.byte	$00
_scr_0_03:
	.byte	$E1
	.byte	$E1
	.byte	$01
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$E1
	.byte	$E1
	.byte	$01
	.byte	$00
_scr_0_04:
	.byte	$E1
	.byte	$81
	.byte	$00
	.byte	$41
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$03
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$C3
	.byte	$21
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$83
	.byte	$13
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$63
	.byte	$11
	.byte	$05
	.byte	$15
	.byte	$21
	.byte	$5B
	.byte	$03
	.byte	$3B
	.byte	$01
	.byte	$83
	.byte	$1C
	.byte	$03
	.byte	$21
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$03
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$83
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$1C
	.byte	$20
	.byte	$21
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$63
	.byte	$40
	.byte	$21
	.byte	$5B
	.byte	$03
	.byte	$5B
	.byte	$43
	.byte	$1C
	.byte	$40
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$22
	.byte	$83
	.byte	$60
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$22
	.byte	$23
	.byte	$1C
	.byte	$03
	.byte	$1C
	.byte	$60
	.byte	$22
	.byte	$23
	.byte	$0E
	.byte	$43
	.byte	$1C
	.byte	$00
	.byte	$1C
	.byte	$80
	.byte	$02
	.byte	$00
_scr_0_06:
	.byte	$01
	.byte	$E3
	.byte	$A3
	.byte	$21
	.byte	$02
	.byte	$63
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$83
	.byte	$1C
	.byte	$21
	.byte	$03
	.byte	$02
	.byte	$43
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$63
	.byte	$1C
	.byte	$00
	.byte	$21
	.byte	$23
	.byte	$02
	.byte	$23
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$3C
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$83
	.byte	$5B
	.byte	$23
	.byte	$60
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$3C
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$1C
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$23
	.byte	$1C
	.byte	$20
	.byte	$3C
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$23
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$1C
	.byte	$E0
	.byte	$00
	.byte	$0E
	.byte	$20
	.byte	$21
	.byte	$1C
	.byte	$E0
	.byte	$80
	.byte	$21
	.byte	$C0
	.byte	$0C
	.byte	$A7
	.byte	$41
	.byte	$40
	.byte	$E1
	.byte	$41
	.byte	$00
_scr_0_08:
	.byte	$21
	.byte	$40
	.byte	$E1
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$02
	.byte	$40
	.byte	$11
	.byte	$12
	.byte	$E0
	.byte	$29
	.byte	$02
	.byte	$E0
	.byte	$80
	.byte	$0A
	.byte	$09
	.byte	$35
	.byte	$12
	.byte	$E0
	.byte	$60
	.byte	$0A
	.byte	$01
	.byte	$0C
	.byte	$E0
	.byte	$00
	.byte	$11
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$A0
	.byte	$14
	.byte	$C0
	.byte	$01
	.byte	$13
	.byte	$60
	.byte	$14
	.byte	$04
	.byte	$0D
	.byte	$C0
	.byte	$02
	.byte	$08
	.byte	$0B
	.byte	$20
	.byte	$04
	.byte	$2D
	.byte	$09
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$14
	.byte	$04
	.byte	$0D
	.byte	$49
	.byte	$0D
	.byte	$14
	.byte	$20
	.byte	$14
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$08
	.byte	$4D
	.byte	$29
	.byte	$0A
	.byte	$29
	.byte	$0D
	.byte	$24
	.byte	$2D
	.byte	$09
	.byte	$2D
	.byte	$29
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$2A
	.byte	$09
	.byte	$2D
	.byte	$69
	.byte	$2A
	.byte	$09
	.byte	$00
	.byte	$0A
	.byte	$60
	.byte	$0A
	.byte	$09
	.byte	$2A
	.byte	$09
	.byte	$0A
	.byte	$00
_scr_0_09:
	.byte	$0D
	.byte	$EA
	.byte	$8A
	.byte	$49
	.byte	$E0
	.byte	$80
	.byte	$0A
	.byte	$29
	.byte	$E0
	.byte	$A0
	.byte	$09
	.byte	$0A
	.byte	$E0
	.byte	$A0
	.byte	$09
	.byte	$05
	.byte	$12
	.byte	$E0
	.byte	$80
	.byte	$09
	.byte	$E0
	.byte	$C0
	.byte	$09
	.byte	$E0
	.byte	$C0
	.byte	$09
	.byte	$04
	.byte	$14
	.byte	$44
	.byte	$E0
	.byte	$20
	.byte	$09
	.byte	$8D
	.byte	$24
	.byte	$14
	.byte	$24
	.byte	$80
	.byte	$A9
	.byte	$8D
	.byte	$24
	.byte	$14
	.byte	$24
	.byte	$E9
	.byte	$49
	.byte	$8D
	.byte	$09
	.byte	$8A
	.byte	$E9
	.byte	$49
	.byte	$00
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
	.addr	_scr_0_03
	.addr	_scr_0_04
	.addr	_scr_0_03
	.addr	_scr_0_06
	.addr	_scr_0_03
	.addr	_scr_0_08
	.addr	_scr_0_09
_enems_0:
	.byte	$04
	.byte	$81
	.byte	$87
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B7
	.byte	$B4
	.byte	$01
	.byte	$02
	.byte	$B9
	.byte	$BB
	.byte	$01
	.byte	$04
	.byte	$2D
	.byte	$9D
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$81
	.byte	$8B
	.byte	$02
	.byte	$04
	.byte	$4B
	.byte	$46
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$51
	.byte	$5E
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$93
	.byte	$94
	.byte	$02
	.byte	$03
	.byte	$23
	.byte	$83
	.byte	$01
	.byte	$04
	.byte	$5A
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
_hotspots_0:
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0C
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0B
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$13
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$15
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1A
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$80
_sspl_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_sspl_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$80
_sspl_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2B
	.byte	$00
	.byte	$80
_sspl_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$27
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$26
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$29
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2B
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2A
	.byte	$40
	.byte	$80
_sspl_08_a:
	.byte	$FC
	.byte	$F8
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_sspl_08_b:
	.byte	$FC
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$2D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$40
	.byte	$80
_sspl_09_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2F
	.byte	$00
	.byte	$80
_sspl_09_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2E
	.byte	$40
	.byte	$80
_sspl_0A_a:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$31
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_sspl_0A_b:
	.byte	$FC
	.byte	$F8
	.byte	$31
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$35
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$40
	.byte	$80
_sspl_0B_a:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$31
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_sspl_0B_b:
	.byte	$FC
	.byte	$F8
	.byte	$31
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$37
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$35
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$40
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$F8
	.byte	$38
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$39
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$00
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$F8
	.byte	$39
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$38
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3B
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$3C
	.byte	$42
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$F8
	.byte	$38
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$39
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$02
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$F8
	.byte	$39
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$38
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$42
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$F8
	.byte	$42
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$43
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$02
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$F8
	.byte	$43
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$42
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$F8
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$49
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$F8
	.byte	$49
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$48
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$F8
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$4F
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$F8
	.byte	$4F
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$4E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$50
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$42
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$F8
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$55
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$F8
	.byte	$55
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$54
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$58
	.byte	$42
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5B
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5C
	.byte	$02
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5E
	.byte	$02
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$60
	.byte	$43
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$00
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$69
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$69
	.byte	$C2
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$01
	.byte	$80
_ssit_05:
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6E
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$C1
	.byte	$80
_ssit_06:
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$71
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$02
	.byte	$80
_ssit_07:
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$02
	.byte	$80
_ssit_08:
	.byte	$00
	.byte	$F8
	.byte	$77
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$78
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$7B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$7C
	.byte	$03
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$4F
	.byte	$79
	.byte	$7A
	.byte	$4F
	.byte	$7B
	.byte	$50
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$4F
	.byte	$4F
	.byte	$85
	.byte	$51
	.byte	$48
	.byte	$86
	.byte	$4A
	.byte	$86
	.byte	$87
	.byte	$49
	.byte	$87
	.byte	$4B
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8B
	.byte	$48
	.byte	$49
	.byte	$8C
	.byte	$4B
	.byte	$8D
	.byte	$8E
	.byte	$4A
	.byte	$4B
	.byte	$8F
	.byte	$90
	.byte	$90
	.byte	$00
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$99
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$99
	.byte	$99
	.byte	$A6
	.byte	$A7
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$A8
	.byte	$A9
	.byte	$99
	.byte	$AA
	.byte	$99
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B3
	.byte	$B4
	.byte	$B4
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$00
	.byte	$BA
	.byte	$BA
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$BC
	.byte	$00
	.byte	$BB
	.byte	$BB
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$BB
	.byte	$BB
	.byte	$00
	.byte	$BD
	.byte	$BA
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$BA
	.byte	$00
	.byte	$BB
	.byte	$BA
	.byte	$BE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.addr	_sspl_05_a
	.addr	_sspl_06_a
	.addr	_sspl_00_a
	.addr	_sspl_09_a
	.addr	_sspl_0A_a
	.addr	_sspl_0B_a
	.addr	_sspl_0B_a
	.addr	_sspl_0A_a
	.addr	_sspl_09_a
	.addr	_sspl_08_a
	.addr	_sspl_08_a
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.addr	_sspl_05_b
	.addr	_sspl_06_b
	.addr	_sspl_00_b
	.addr	_sspl_09_b
	.addr	_sspl_0A_b
	.addr	_sspl_0B_b
	.addr	_sspl_0B_b
	.addr	_sspl_0A_b
	.addr	_sspl_09_b
	.addr	_sspl_08_b
	.addr	_sspl_08_b
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
_spr_hs:
	.addr	_ssit_03
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssit_04
	.addr	_ssit_05
	.addr	_ssit_06
	.addr	_ssit_07
	.addr	_ssit_08
_custom_text0:
	.byte	$48,$49,$2C,$20,$55,$4E,$4E,$41,$4D,$45,$44,$20,$48,$45,$52,$4F
	.byte	$21,$25,$54,$48,$49,$53,$20,$49,$53,$20,$43,$48,$45,$52,$49,$4C
	.byte	$2E,$20,$49,$4E,$25,$54,$48,$49,$53,$20,$54,$45,$53,$54,$45,$52
	.byte	$20,$59,$4F,$55,$20,$48,$41,$56,$45,$25,$54,$4F,$20,$50,$4C,$41
	.byte	$43,$45,$20,$54,$48,$45,$20,$53,$4B,$55,$4C,$4C,$25,$49,$4E,$20
	.byte	$54,$48,$45,$20,$50,$45,$44,$45,$53,$54,$41,$4C,$2E,$00
_custom_text1:
	.byte	$49,$54,$20,$53,$45,$45,$4D,$53,$20,$54,$48,$41,$54,$20,$59,$4F
	.byte	$55,$25,$4D,$41,$44,$45,$20,$59,$4F,$55,$52,$20,$4F,$46,$46,$45
	.byte	$52,$21,$25,$49,$46,$20,$59,$4F,$55,$20,$41,$52,$45,$20,$4E,$4F
	.byte	$54,$20,$53,$55,$52,$45,$25,$4A,$55,$53,$54,$20,$54,$41,$4C,$4B
	.byte	$20,$54,$4F,$20,$43,$48,$45,$52,$49,$4C,$2E,$25,$54,$45,$53,$54
	.byte	$45,$52,$20,$41,$48,$4F,$59,$21,$00
_custom_text2:
	.byte	$54,$48,$49,$53,$20,$49,$53,$20,$41,$4E,$20,$45,$4D,$50,$54,$59
	.byte	$25,$50,$45,$44,$45,$53,$54,$41,$4C,$2E,$20,$50,$4C,$45,$41,$53
	.byte	$45,$25,$50,$4C,$41,$43,$45,$20,$41,$4E,$20,$4F,$46,$46,$45,$52
	.byte	$21,$00
_custom_texts:
	.addr	_custom_text0
	.addr	_custom_text1
	.addr	_custom_text2
_box_buff:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$FF
	.byte	$FF
_script_pool_0:
	.byte	$34
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$10
	.byte	$05
	.byte	$06
	.byte	$FF
	.byte	$20
	.byte	$08
	.byte	$06
	.byte	$03
	.byte	$51
	.byte	$E9
	.byte	$01
	.byte	$FF
	.byte	$7F
	.byte	$FF
	.byte	$07
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$21
	.byte	$0F
	.byte	$0F
	.byte	$FF
	.byte	$F1
	.byte	$FF
	.byte	$07
	.byte	$61
	.byte	$62
	.byte	$08
	.byte	$FF
	.byte	$ED
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$08
	.byte	$09
	.byte	$85
	.byte	$FF
	.byte	$FF
	.byte	$0B
	.byte	$61
	.byte	$63
	.byte	$85
	.byte	$13
	.byte	$05
	.byte	$00
	.byte	$FF
	.byte	$ED
	.byte	$01
	.byte	$F2
	.byte	$FF
	.byte	$07
	.byte	$61
	.byte	$63
	.byte	$85
	.byte	$FF
	.byte	$ED
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$04
	.byte	$09
	.byte	$81
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$0E
	.byte	$05
	.byte	$82
	.byte	$FF
	.byte	$FF
	.byte	$13
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$01
	.byte	$03
	.byte	$83
	.byte	$86
	.byte	$0D
	.byte	$04
	.byte	$84
	.byte	$20
	.byte	$18
	.byte	$06
	.byte	$01
	.byte	$86
	.byte	$1C
	.byte	$0A
	.byte	$08
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$61
	.byte	$62
	.byte	$08
	.byte	$FF
	.byte	$ED
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$15
	.byte	$F0
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$FF
	.byte	$FF
_script_pool:
	.addr	_script_pool_0
L0001:
	.byte	$4C,$49,$46,$45,$3A,$30,$30,$20,$20,$20,$49,$54,$45,$4D,$3A,$20
	.byte	$20,$20,$20,$20,$20,$4B,$45,$59,$53,$3A,$30,$30,$00,$49,$4E,$54
	.byte	$45,$52,$41,$43,$54,$49,$56,$45,$53,$2D,$54,$48,$45,$20,$4D,$4F
	.byte	$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_pad0:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_rds16:
	.res	2,$00
_gpint:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rde:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_rdaa:
	.res	2,$00
_en_x_offs:
	.res	2,$00
_split_on:
	.res	1,$00
_ast1:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__en_state:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	2,$00
_pry:
	.res	1,$00
_pcx:
	.res	2,$00
_pcy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_oppossee:
	.res	1,$00
_pflickering:
	.res	1,$00
_pbouncing:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pcontinues:
	.res	1,$00
_plife:
	.res	1,$00
_pobjs:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_hrx:
	.res	2,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_map_h:
	.res	1,$00
_c_map_size:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
_sc_x:
	.res	1,$00
_sc_y:
	.res	1,$00
_sc_n:
	.res	1,$00
_sc_c:
	.res	1,$00
_next_script:
	.res	2,$00
_script:
	.res	2,$00
_script_result:
	.res	1,$00
_sc_terminado:
	.res	1,$00
_sc_continuar:
	.res	1,$00
_nametable_base:
	.res	2,$00
_buff_offset:
	.res	2,$00
_attr_table_offset:
	.res	1,$00
_buff_ptr:
	.res	2,$00
_attr_ptr:
	.res	2,$00
_scroll_x:
	.res	2,$00
_scroll_x_r:
	.res	2,$00
_on_screen:
	.res	1,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ntsc_frame:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_attr_table:
	.res	128,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_map_attr:
	.res	384,$00
_map_buff:
	.res	384,$00
_first_game:
	.res	1,$00
_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_real_frame_counter:
	.res	1,$00
_paused:
	.res	1,$00
_win_level:
	.res	1,$00
_game_over:
	.res	1,$00
_warp_to_level:
	.res	1,$00
_level_reset:
	.res	1,$00
_flick_override:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_oam_index_player:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_vertical_engine_type:
	.res	1,$00
_use_ct:
	.res	1,$00
_use_sub_ct:
	.res	1,$00
_run_fire_script_do:
	.res	1,$00
_use_type:
	.res	1,$00
_en_sg_1:
	.res	1,$00
_en_sg_2:
	.res	1,$00
_hact:
	.res	10,$00
_d_hrx:
	.res	4,$00
_d_hry:
	.res	2,$00
_d_hrt:
	.res	2,$00
_f_zone_ac:
	.res	1,$00
_fzx1:
	.res	1,$00
_fzx2:
	.res	1,$00
_fzy1:
	.res	1,$00
_fzy2:
	.res	1,$00
_fire_script_success:
	.res	1,$00
_just_interacted:
	.res	1,$00
_script_arg:
	.res	1,$00
_odd:
	.res	1,$00
_flags:
	.res	16,$00
_interactives_interact_with:
	.res	1,$00
_interactives_index:
	.res	1,$00
_interactives_f:
	.res	4,$00
_interactives_x:
	.res	4,$00
_interactives_y:
	.res	4,$00
_en_t:
	.res	6,$00
_en_x:
	.res	6,$00
_en_y:
	.res	6,$00
_en_x1:
	.res	6,$00
_en_y1:
	.res	6,$00
_en_x2:
	.res	6,$00
_en_y2:
	.res	6,$00
_en_mx:
	.res	6,$00
_en_my:
	.res	6,$00
_en_s:
	.res	6,$00
_en_facing:
	.res	6,$00
_en_state:
	.res	6,$00
_en_flags:
	.res	6,$00
_en_cttouched:
	.res	6,$00
_en_life:
	.res	6,$00
_en_status:
	.res	6,$00
_en_ct:
	.res	6,$00
_en_spr_x_mod:
	.res	1,$00
_en_spr_id:
	.res	6,$00

; ---------------------------------------------------------------
; void __near__ run_script (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run_script: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) script_pool [level] + (whichs << 1);
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L14CF
	inx
	clc
L14CF:	adc     #<(_script_pool)
	sta     ptr1
	txa
	adc     #>(_script_pool)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L14D0
	inx
	clc
L14D0:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	sta     _gp_gen
	stx     _gp_gen+1
;
; rda = *gp_gen ++; rdb = *gp_gen;
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L11CF
	inx
L11CF:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rdb
;
; script_result = 0;
;
	tya
	sta     _script_result
;
; if (!(rda | rdb)) return;
;
	tax
	lda     _rdb
	ora     _rda
	pha
	pla
	jeq     incsp1
;
; script = (unsigned char *) script_pool [level] + rda + (rdb << 8);
;
	lda     _level
	asl     a
	bcc     L14D1
	inx
	clc
L14D1:	adc     #<(_script_pool)
	sta     ptr1
	txa
	adc     #>(_script_pool)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     _rda
	bcc     L14C6
	inx
L14C6:	sta     ptr1
	stx     ptr1+1
	tya
	clc
	adc     ptr1
	sta     _script
	lda     _rdb
	adc     ptr1+1
L14D3:	sta     _script+1
;
; while ((sc_c = read_byte ()) != 0xff) {
;
	jsr     _read_byte
	sta     _sc_c
	cmp     #$FF
	jeq     incsp1
;
; next_script = script + sc_c;
;
	lda     _script
	ldx     _script+1
	clc
	adc     _sc_c
	bcc     L14C7
	inx
L14C7:	sta     _next_script
	stx     _next_script+1
;
; sc_terminado = sc_continuar = 0;
;
	lda     #$00
L14D2:	sta     _sc_continuar
L14CD:	sta     _sc_terminado
;
; while (!sc_terminado) {
;
L11E5:	lda     _sc_terminado
	jne     L11E6
;
; switch (read_byte ()) {
;
	jsr     _read_byte
;
; }
;
	cmp     #$10
	beq     L11EC
	cmp     #$13
	beq     L11F4
	cmp     #$21
	beq     L11FC
	cmp     #$61
	jeq     L1207
	cmp     #$62
	jeq     L120C
	cmp     #$63
	jeq     L1211
	cmp     #$F0
	beq     L11E5
	cmp     #$FF
	jeq     L1218
	jmp     L11E5
;
; case 0x10: readxy (); sc_terminado = (flags [sc_x] != sc_y); break;
;
L11EC:	jsr     _readxy
	ldy     _sc_x
	lda     _flags,y
	cmp     _sc_y
	jsr     boolne
	jmp     L14CD
;
; case 0x13: readxy (); sc_terminado = (flags [sc_x] == sc_y); break;
;
L11F4:	jsr     _readxy
	ldy     _sc_x
	lda     _flags,y
	cmp     _sc_y
	jsr     booleq
	jmp     L14CD
;
; case 0x21: sc_terminado = (!(prx + 15 >= read_byte () << 4 && prx <= (read_byte () << 4) + 15)); break;
;
L11FC:	lda     _prx
	ldx     _prx+1
	clc
	adc     #$0F
	bcc     L1201
	inx
L1201:	jsr     pushax
	jsr     _read_byte
	jsr     aslax4
	jsr     tosicmp
	bcc     L1202
	lda     _prx
	ldx     _prx+1
	jsr     pushax
	jsr     _read_byte
	jsr     aslax4
	clc
	adc     #$0F
	bcc     L1204
	inx
L1204:	jsr     tosicmp
	bcc     L1200
	beq     L1200
L1202:	lda     #$00
	jmp     L1205
L1200:	lda     #$01
L1205:	jsr     bnega
	jmp     L14CD
;
; case 0x61: sc_terminado = (!just_interacted); break;
;
L1207:	lda     _just_interacted
	jsr     bnega
	jmp     L14CD
;
; case 0x62: sc_terminado = (script_arg != read_vbyte ()); break;
;
L120C:	lda     _script_arg
	jsr     pusha0
	jsr     _read_vbyte
	jsr     tosneax
	jmp     L14CD
;
; case 0x63: sc_terminado = (script_arg != read_byte ()); break;
;
L1211:	lda     _script_arg
	jsr     pusha0
	jsr     _read_byte
	jsr     tosneax
	jmp     L14CD
;
; case 0xff: sc_terminado = sc_continuar = 1; break;
;
L1218:	lda     #$01
	jmp     L14D2
;
; if (sc_continuar) {
;
L11E6:	lda     _sc_continuar
	jeq     L1223
;
; fire_script_success = 1;
;
	lda     #$01
	sta     _fire_script_success
;
; sc_terminado = 0;
;
	lda     #$00
L14CE:	sta     _sc_terminado
;
; while (!sc_terminado) {
;
L1222:	lda     _sc_terminado
	jne     L1223
;
; switch (read_byte ()) {
;
	jsr     _read_byte
;
; }
;
	cmp     #$01
	beq     L1229
	cmp     #$20
	beq     L1230
	cmp     #$51
	beq     L123A
	cmp     #$86
	jeq     L124C
	cmp     #$ED
	beq     L1246
	cmp     #$F1
	jeq     L1252
	cmp     #$F2
	jeq     incsp1
	cmp     #$FF
	jeq     L1258
	jmp     L1222
;
; case 0x01: readxy (); flags [sc_x] = sc_y; break;
;
L1229:	jsr     _readxy
	ldy     _sc_x
	lda     _sc_y
	sta     _flags,y
	jmp     L1222
;
; case 0x20: readxy (); _x = sc_x; _y = sc_y; _t = read_vbyte (); map_set (); break;
;
L1230:	jsr     _readxy
	lda     _sc_x
	sta     __x
	lda     _sc_y
	sta     __y
	jsr     _read_vbyte
	sta     __t
	jsr     _map_set
	jmp     L1222
;
; case 0x51: f_zone_ac = 1; fzx1 = read_byte (); fzy1 = read_byte (); fzx2 = read_byte (); fzy2 = read_byte (); break;
;
L123A:	lda     #$01
	sta     _f_zone_ac
	jsr     _read_byte
	sta     _fzx1
	jsr     _read_byte
	sta     _fzy1
	jsr     _read_byte
	sta     _fzx2
	jsr     _read_byte
	sta     _fzy2
	jmp     L1222
;
; case 0xed: gp_gen = custom_texts [read_vbyte ()]; textbox_do (); break;
;
L1246:	jsr     _read_vbyte
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_custom_texts)
	sta     ptr1
	lda     tmp1
	adc     #>(_custom_texts)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
	jsr     _textbox_do
	jmp     L1222
;
; case 0x86: readxy (); sc_n = read_byte (); interactives_add (); break;
;
L124C:	jsr     _readxy
	jsr     _read_byte
	sta     _sc_n
	jsr     _interactives_add
	jmp     L1222
;
; case 0xf1: script_result = 1; return;
;
L1252:	lda     #$01
	sta     _script_result
	jmp     incsp1
;
; case 0xff: sc_terminado = 1; break;
;
L1258:	lda     #$01
	jmp     L14CE
;
; script = next_script;
;
L1223:	lda     _next_script
	sta     _script
	lda     _next_script+1
;
; }
;
	jmp     L14D3

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (0 == pflickering || half_life) 
;
	lda     _pflickering
	beq     L0CE4
	lda     _half_life
	bne     L0CE4
	rts
;
; prx - scroll_x, 
;
L0CE4:	jsr     decsp3
	lda     _prx
	sec
	sbc     _scroll_x
	pha
	lda     _prx+1
	sbc     _scroll_x+1
	pla
	ldy     #$02
	sta     (sp),y
;
; pry + SPRITE_ADJUST, 
;
	lda     _pry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L14D6
	sec
L14D6:	sbc     #$10
	bcs     L14D7
	sec
L14D7:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L14D8
	inx
	clc
L14D8:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
	stx     _prx+1
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_body (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_body: near

.segment	"CODE"

;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; -- fader) {
;
	lda     #$04
	sta     _fader
L092E:	ldx     _fader
	bmi     L092F
;
; fade_body ();
;
	jsr     _fade_body
;
; for (fader = 4; fader > -1; -- fader) {
;
	dec     _fader
	lda     _fader
	bpl     L092E
	jmp     L092E
;
; }
;
L092F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; ++ fader) {
;
	lda     #$00
	sta     _fader
L093A:	lda     _fader
	sec
	sbc     #$05
	bvc     L0942
	eor     #$80
L0942:	bpl     L093B
;
; fade_body ();
;
	jsr     _fade_body
;
; for (fader = 0; fader < 5; ++ fader) {
;
	inc     _fader
	lda     _fader
	bpl     L093A
	jmp     L093A
;
; }
;
L093B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (0x2000); vram_fill(0x00, 
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
;
; );
;
	ldx     #$08
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; __asm__ ("ldx %v", update_index);
;
	ldx     _update_index
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inc %v", gp_addr);
;
	inc     _gp_addr
;
; __asm__ ("bne %g", ul_putc_inc16_0);
;
	bne     L0958
;
; __asm__ ("inc %v + 1", gp_addr);
;
	inc     _gp_addr + 1
;
; __asm__ ("inc %v", update_index);
;
L0958:	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (_y << 5) + _x + 0x2000;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L14D9
	inx
L14D9:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L0964:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop_0);
;
	bcs     L0964
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; _n += 16;      ul_putc ();
;
	lda     #$10
	clc
	adc     __n
	sta     __n
	jsr     _ul_putc
;
; _n = rda + 16; ul_putc ();
;
	lda     _rda
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", rdc); // rdc = (_x >> 2)
;
	sta     _rdc
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("and #$f8");  // A = (_y << 1) & 0xf8
;
	and     #$f8
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdc);
;
	adc     _rdc
;
; __asm__ ("sta %v", rdc); // Result
;
	sta     _rdc
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", attr_table_offset);
;
	adc     _attr_table_offset
;
; __asm__ ("sta %v", rde);
;
	sta     _rde
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", attr_table);
;
	lda     _attr_table,x
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", rdb); // rdb = ((_x >> 1) & 1)
;
	sta     _rdb
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("asl a");   // A = (((_y >> 1) & 1) << 1)
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdb);
;
	adc     _rdb
;
; __asm__ ("sta %v", rdb); // Result
;
	sta     _rdb
;
; __asm__ ("lda %v", c_ts_pals);
;
	lda     _c_ts_pals
;
; __asm__ ("ldx %v + 1", c_ts_pals);
;
	ldx     _c_ts_pals + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("stx ptr1+1");
;
	stx     ptr1+1
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("ldx %v", rdb); 
;
	ldx     _rdb
;
; __asm__ ("beq %g", upd_attr_table_loop_0_skip);
;
	beq     L0996
;
; __asm__ ("asl a");
;
L0997:	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", upd_attr_table_loop_0);
;
	bne     L0997
;
; __asm__ ("sta %v", ast1); // ast1 = (c_ts_pals [_t] << (rdb << 1));
;
L0996:	sta     _ast1
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("ldx %v", rdb);
;
	ldx     _rdb
;
; __asm__ ("and %v, x", bitmasks);
;
	and     _bitmasks,x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("sta %v", rda); // Result
;
	sta     _rda
;
; __asm__ ("ldx %v", rde);
;
	ldx     _rde
;
; __asm__ ("sta %v, x", attr_table);
;
	sta     _attr_table,x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L14DB
	inx
	clc
L14DB:	adc     _nametable_base
	pha
	txa
	adc     _nametable_base+1
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
	jsr     _vram_adr
	inc     _gp_addr
	bne     L09B0
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L09B0:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L09B5
	inc     _gp_tmap+1
L09B5:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L09BC
	inc     _gp_tmap+1
L09BC:	lda     _rda
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L09C1
	inc     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
L09C1:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
	inc     _gp_addr
	bne     L09C5
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L09C5:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L09CA
	inc     _gp_tmap+1
L09CA:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap);             vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; caux = _x;
;
	lda     __x
	sta     _caux
;
; if (_x > 31) {
;
	lda     __x
	cmp     #$20
	bcc     L09D5
;
; _x -= 32;
;
	lda     __x
	sec
	sbc     #$20
	sta     __x
;
; attr_table_offset = 64;
;
	lda     #$40
	sta     _attr_table_offset
;
; NAMETABLE_BASE = 0x2400;
;
	ldx     #$24
	lda     #$00
;
; } else {
;
	jmp     L14E0
;
; attr_table_offset = 0;
;
L09D5:	lda     #$00
	sta     _attr_table_offset
;
; NAMETABLE_BASE = 0x2000;
;
	ldx     #$20
L14E0:	sta     _nametable_base
	stx     _nametable_base+1
;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = (NAMETABLE_BASE + 0x03c0) + rdc;
;
	lda     _nametable_base
	clc
	adc     #$C0
	pha
	lda     _nametable_base+1
	adc     #$03
	tax
	pla
	clc
	adc     _rdc
	bcc     L14DC
	inx
L14DC:	sta     _gp_addr
	stx     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L14DF
	inx
	clc
L14DF:	adc     _nametable_base
	sta     _gp_addr
	txa
	adc     _nametable_base+1
	sta     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L09F4
	inc     _gp_tmap+1
L09F4:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L09FA
	inc     _gp_tmap+1
L09FA:	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L09FE
	inc     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
L09FE:	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L0A03
	inc     _gp_tmap+1
L0A03:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap);             ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	jsr     _ul_putc
;
; _x = caux;
;
	lda     _caux
	sta     __x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [COORDS (_x, _y)] = _t;
;
	lda     __x
	cmp     #$10
	bcc     L0A0F
	lda     __x
	and     #$0F
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     ptr1
	clc
	adc     #$C0
	bcc     L14E3
	inx
	jmp     L0A18
L0A0F:	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
L0A18:	clc
L14E3:	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     __t
	ldy     #$00
	sta     (ptr1),y
;
; map_attr [COORDS (_x, _y)] = c_behs [_t];
;
	lda     __x
	cmp     #$10
	bcc     L0A22
	lda     __x
	and     #$0F
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     ptr1
	clc
	adc     #$C0
	bcc     L14E4
	inx
	jmp     L0A2B
L0A22:	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
L0A2B:	clc
L14E4:	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; __asm__ ("asl %v", _x);
;
	asl     __x
;
; _y = TOP_ADJUST + (_y << 1);
;
	lda     __y
	asl     a
	bcc     L14E5
	clc
L14E5:	adc     #$04
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A3C
	inx
L0A3C:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; buff_ptr [rdm] = rda;
;
	lda     _buff_ptr
	ldx     _buff_ptr+1
	clc
	adc     _rdm
	bcc     L14E6
	inx
L14E6:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	ldy     #$00
	sta     (ptr1),y
;
; ++ rdm;
;
	inc     _rdm
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_half_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_half_scr: near

.segment	"CODE"

;
; buff_ptr = map_buff + buff_offset;
;
	lda     _buff_offset
	clc
	adc     #<(_map_buff)
	sta     _buff_ptr
	lda     _buff_offset+1
	adc     #>(_map_buff)
	sta     _buff_ptr+1
;
; attr_ptr = map_attr + buff_offset;
;
	lda     _buff_offset
	clc
	adc     #<(_map_attr)
	sta     _attr_ptr
	lda     _buff_offset+1
	adc     #>(_map_attr)
	sta     _attr_ptr+1
;
; rdm = 0;
;
	lda     #$00
	sta     _rdm
;
; gp_gen = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L14EB
	inx
	clc
L14EB:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
;
; while (rdm < 192) {
;
L0A4C:	lda     _rdm
	cmp     #$C0
	bcs     L0A4D
;
; SET_FROM_PTR (rdt, gp_gen); 
;
	ldy     #0
	lda     (_gp_gen),y
	sta     _rdt
;
; gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0A53
	inx
L0A53:	sta     _gp_gen
	stx     _gp_gen+1
;
; rda = rdt & 0x1f;
;
	lda     _rdt
	and     #$1F
	sta     _rda
;
; rdct = rdt;
;
	lda     _rdt
L14EA:	sta     _rdct
;
; while (rdct >= 32) {
;
	cmp     #$20
	bcc     L0A59
;
; add_tile (); rdct -= 32;
;
	jsr     _add_tile
	lda     _rdct
	sec
	sbc     #$20
;
; } add_tile ();
;
	jmp     L14EA
L0A59:	jsr     _add_tile
;
; }
;
	jmp     L0A4C
;
; _x = 0; _y = TOP_ADJUST; 
;
L0A4D:	lda     #$00
	sta     __x
	lda     #$04
	sta     __y
;
; gp_ram = buff_ptr;
;
	lda     _buff_ptr
	sta     _gp_ram
	lda     _buff_ptr+1
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; ++ rdm) {
;
	lda     #$00
	sta     _rdm
L0A65:	lda     _rdm
	cmp     #$C0
	bcs     L0A66
;
; SET_FROM_PTR (rdt, gp_ram); ++ gp_ram;
;
	ldy     #0
	lda     (_gp_ram),y
	sta     _rdt
	inc     _gp_ram
	bne     L0A71
	inc     _gp_ram+1
;
; attr_ptr [rdm] = c_behs [rdt];
;
L0A71:	lda     _attr_ptr
	ldx     _attr_ptr+1
	clc
	adc     _rdm
	bcc     L14E7
	inx
L14E7:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _t = rdt; draw_tile ();
;
	lda     _rdt
	sta     __t
	jsr     _draw_tile
;
; _x = (_x + 2) & 0x1f; if (!_x) _y += 2;
;
	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L0A67
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; for (rdm = 0; rdm < 192; ++ rdm) {
;
L0A67:	inc     _rdm
	jmp     L0A65
;
; vram_write (attr_table + attr_table_offset, NAMETABLE_BASE + 0x3c0, 64);
;
L0A66:	jsr     decsp4
	lda     _attr_table_offset
	clc
	adc     #<(_attr_table)
	tay
	lda     #$00
	adc     #>(_attr_table)
	tax
	tya
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _nametable_base
	clc
	adc     #$C0
	pha
	lda     _nametable_base+1
	adc     #$03
	tax
	pla
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; nametable_base = 0x2000;
;
	ldx     #$20
	lda     #$00
	sta     _nametable_base
	stx     _nametable_base+1
;
; buff_offset = attr_table_offset = 0;
;
	sta     _attr_table_offset
	sta     _buff_offset
	sta     _buff_offset+1
;
; draw_half_scr ();
;
	jsr     _draw_half_scr
;
; ++ n_pant;
;
	inc     _n_pant
;
; nametable_base = 0x2400;
;
	ldx     #$24
	lda     #$00
	sta     _nametable_base
	stx     _nametable_base+1
;
; buff_offset = 192;
;
	sta     _buff_offset+1
	lda     #$C0
	sta     _buff_offset
;
; attr_table_offset = 64;
;
	lda     #$40
	sta     _attr_table_offset
;
; draw_half_scr ();
;
	jsr     _draw_half_scr
;
; -- n_pant;
;
	dec     _n_pant
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L14FB:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L0A9A:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A9E
	inx
L0A9E:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L0A9F
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L14FB
L0A9F:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L0A9A

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L0AAC
	lda     _cy2
	cmp     #$0D
	bcc     L0AAB
L0AAC:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = MAP_ATTR (COORDS (cx1, cy1 ? cy1 - 1 : 0));
;
L0AAB:	lda     _cx1
	cmp     #$10
	bcc     L0AB5
	lda     _cx1
	and     #$0F
	sta     ptr1
	lda     _cy1
	beq     L0ABD
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L0AC0
	dex
	jmp     L0AC0
L0ABD:	tax
L0AC0:	jsr     shlax4
	ora     ptr1
	clc
	adc     #$C0
	bcc     L0AC3
	inx
	jmp     L0AC3
L0AB5:	lda     _cy1
	beq     L0AC9
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L0ACC
	dex
	jmp     L0ACC
L0AC9:	tax
L0ACC:	jsr     shlax4
	ora     _cx1
L0AC3:	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = MAP_ATTR (COORDS (cx2, cy2 ? cy2 - 1 : 0));
;
	lda     _cx2
	cmp     #$10
	bcc     L0AD2
	lda     _cx2
	and     #$0F
	sta     ptr1
	lda     _cy2
	beq     L0ADA
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L0ADD
	dex
	jmp     L0ADD
L0ADA:	tax
L0ADD:	jsr     shlax4
	ora     ptr1
	clc
	adc     #$C0
	bcc     L0AE0
	inx
	jmp     L0AE0
L0AD2:	lda     _cy2
	beq     L0AE6
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L0AE9
	dex
	jmp     L0AE9
L0AE6:	tax
L0AE9:	jsr     shlax4
	ora     _cx2
L0AE0:	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= EN_X_ABSOLUTE && 
;
	lda     _prx
	ldx     _prx+1
	clc
	adc     #$03
	bcc     L0AEE
	inx
L0AEE:	cmp     _rdaa
	txa
	sbc     _rdaa+1
	bcc     L0AEF
;
; prx <= EN_X_ABSOLUTE + 11 && 
;
	lda     _prx
	ldx     _prx+1
	jsr     pushax
	lda     _rdaa
	ldx     _rdaa+1
	clc
	adc     #$0B
	bcc     L0AF0
	inx
L0AF0:	jsr     tosicmp
	beq     L14FD
	bcs     L0AEF
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L14FD:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L0AF1
	inx
L0AF1:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L0AEF
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L14FC
	ldx     #$01
;
; );
;
	clc
L14FC:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	jsr     tosicmp
	bcc     L0AED
	beq     L0AED
L0AEF:	ldx     #$00
	txa
	rts
L0AED:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L0AF7
	cmp     #$00
	jeq     incsp4
L0AF7:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L0AFB
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L0AFB:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ run_fire_script (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run_fire_script: near

.segment	"CODE"

;
; fire_script_success = 0;
;
	lda     #$00
	sta     _fire_script_success
;
; run_script (2 * MAP_SIZE + 2);
;
	lda     #$16
	jsr     pusha
	jsr     _run_script
;
; run_script ((n_pant << 1) + 1);
;
	lda     _n_pant
	asl     a
	bcc     L14FF
	clc
L14FF:	adc     #$01
	jsr     pusha
	jsr     _run_script
;
; just_interacted = 0;
;
	lda     #$00
	sta     _just_interacted
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L0B0C
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L0B16
	beq     L0B16
	ldy     #$01
	jmp     L1506
L0B0C:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L0B16
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L0B16:	ldy     #$03
L1506:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad0;
;
	lda     _pad0
	sta     _pad_this_frame
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_this_frame = (pad_this_frame ^ pad0) & pad0;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ jump_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jump_start: near

.segment	"CODE"

;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cycle: near

.segment	"CODE"

;
; scroll (scroll_x, SCROLL_Y);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     _scroll
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; update_list [update_index] = 0xff;
;
	ldy     _update_index
	lda     #$FF
	sta     _update_list,y
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_to (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_to: near

.segment	"CODE"

;
; scroll_x &= 0xfff8; // Make multiple of 8
;
	lda     _scroll_x
	ldx     _scroll_x+1
	and     #$F8
	sta     _scroll_x
	stx     _scroll_x+1
;
; while (scroll_x != rds16) {
;
L0B3F:	lda     _rds16
	ldx     _rds16+1
	cpx     _scroll_x+1
	bne     L1509
	cmp     _scroll_x
	beq     L0B40
;
; if (scroll_x < rds16) scroll_x += 8;
;
L1509:	lda     _scroll_x
	cmp     _rds16
	lda     _scroll_x+1
	sbc     _rds16+1
	bvc     L1508
	eor     #$80
L1508:	bpl     L0B42
	lda     #$08
	clc
	adc     _scroll_x
	sta     _scroll_x
	bcc     L0B4A
	inc     _scroll_x+1
;
; else scroll_x -= 8;
;
	jmp     L0B4A
L0B42:	lda     _scroll_x
	sec
	sbc     #$08
	sta     _scroll_x
	bcs     L0B4A
	dec     _scroll_x+1
;
; update_cycle ();
;
L0B4A:	jsr     _update_cycle
;
; }
;
	jmp     L0B3F
;
; }
;
L0B40:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calc_scroll_pos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calc_scroll_pos: near

.segment	"CODE"

;
; scroll_x = prx - 124;
;
	lda     _prx
	ldx     _prx+1
	sec
	sbc     #$7C
	bcs     L0B4F
	dex
L0B4F:	sta     _scroll_x
	stx     _scroll_x+1
;
; if (scroll_x < 0) scroll_x = 0;
;
	cpx     #$80
	bcc     L0B50
	ldx     #$00
;
; else if (scroll_x > 256) scroll_x = 256;
;
	jmp     L150C
L0B50:	lda     _scroll_x
	cmp     #$01
	lda     _scroll_x+1
	sbc     #$01
	bvs     L0B57
	eor     #$80
L0B57:	bpl     L0B55
	ldx     #$01
L150C:	lda     #$00
	sta     _scroll_x
	stx     _scroll_x+1
;
; scroll_x_r = scroll_x + 240;
;
L0B55:	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$F0
	bcc     L0B5C
	inx
L0B5C:	sta     _scroll_x_r
	stx     _scroll_x_r+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calc_en_x_absolute (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calc_en_x_absolute: near

.segment	"CODE"

;
; EN_X_ABSOLUTE = en_x_offs + _en_x;
;
	lda     _en_x_offs
	ldx     _en_x_offs+1
	clc
	adc     __en_x
	bcc     L150D
	inx
L150D:	sta     _rdaa
	stx     _rdaa+1
;
; on_screen = 0;
;
	lda     #$00
	sta     _on_screen
;
; __asm__ ("lda %v", EN_X_ABSOLUTE);
;
	lda     _rdaa
;
; __asm__ ("cmp %v", scroll_x);
;
	cmp     _scroll_x
;
; __asm__ ("lda %v+1", EN_X_ABSOLUTE);
;
	lda     _rdaa+1
;
; __asm__ ("sbc %v+1", scroll_x);
;
	sbc     _scroll_x+1
;
; __asm__ ("bcs %g", calc_en_x_absolute_skip1);
;
	bcs     L0B67
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("lda %v", scroll_x_r);
;
L0B67:	lda     _scroll_x_r
;
; __asm__ ("cmp %v", EN_X_ABSOLUTE);
;
	cmp     _rdaa
;
; __asm__ ("lda %v+1", scroll_x_r);
;
	lda     _scroll_x_r+1
;
; __asm__ ("sbc %v+1", EN_X_ABSOLUTE);
;
	sbc     _rdaa+1
;
; __asm__ ("bcs %g", calc_en_x_absolute_do);
;
	bcs     L0B6E
;
; __asm__ ("rts");
;
	rts
;
; on_screen = 1;
;
L0B6E:	lda     #$01
	sta     _on_screen
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_frame: near

.segment	"CODE"

;
; rdct = 0; _y = 12;
;
	lda     #$00
	sta     _rdct
	lda     #$0C
	sta     __y
;
; _x = rdit ? 32 : 0;
;
	lda     _rdit
	beq     L0BBB
	lda     #$20
L0BBB:	sta     __x
;
; ((unsigned char *) box_buff) : 
;
	lda     _rdm
	beq     L0BBF
	lda     #<(_box_buff)
	ldx     #>(_box_buff)
;
; ((rdit ? 192 : 0) + map_buff + (((_y - TOP_ADJUST) >> 1) << 4));
;
	jmp     L0BC2
L0BBF:	lda     _rdit
	beq     L0BC8
	lda     #$C0
	jmp     L0BC8
L0BC8:	jsr     pusha0
	lda     #<(_map_buff)
	ldx     #>(_map_buff)
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __y
	sec
	sbc     #$04
	bcs     L0BCD
	dex
L0BCD:	jsr     shrax1
	jsr     shlax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
L0BC2:	sta     _gp_ram
	stx     _gp_ram+1
;
; gpit = 64; while (gpit --) {
;
	lda     #$40
	sta     _gpit
L0BD0:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L0BD1
;
; rdt = *gp_ram ++; 
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0BD5
	inx
L0BD5:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; if (rdt != 0xff) { 
;
	cmp     #$FF
	beq     L0BD6
;
; _t = rdt + rdm;
;
	lda     _rdt
	clc
	adc     _rdm
	sta     __t
;
; update_list_tile (); 
;
	jsr     _update_list_tile
;
; _x = _x + 2; if (_x == 32 || _x == 64) { _x = rdit ? 32 : 0; _y += 2; }
;
L0BD6:	lda     __x
	clc
	adc     #$02
	sta     __x
	cmp     #$20
	beq     L0BDF
	lda     __x
	cmp     #$40
	bne     L0BDE
L0BDF:	lda     _rdit
	beq     L0BE5
	lda     #$20
L0BE5:	sta     __x
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; ++ rdct; if (rdct == 4) { update_cycle (); rdct = 0; }
;
L0BDE:	inc     _rdct
	lda     _rdct
	cmp     #$04
	bne     L0BD0
	jsr     _update_cycle
	lda     #$00
	sta     _rdct
;
; }
;
	jmp     L0BD0
;
; }
;
L0BD1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_draw_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_draw_text: near

.segment	"CODE"

;
; rda = 1; // New line marker!
;
	lda     #$01
	sta     _rda
;
; rdy = 13;
;
	lda     #$0D
	sta     _rdy
;
; while (rdt = *gp_gen ++) {
;
L0BF4:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0BF8
	inx
L0BF8:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
	tax
	beq     L0BF5
;
; if (rda) { update_index = 0; rda = 0; gp_addr = NAMETABLE_BASE + 6 + (rdy << 5); }
;
	lda     _rda
	beq     L0BF9
	tya
	sta     _update_index
	sta     _rda
	lda     _nametable_base
	ldx     _nametable_base+1
	clc
	adc     #$06
	bcc     L0C01
	inx
L0C01:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	sta     _gp_addr
	lda     tmp1
	adc     ptr1+1
	sta     _gp_addr+1
;
; if (rdt == '%') rda = 1; else { _n = rdt - 32; ul_putc (); }
;
L0BF9:	lda     _rdt
	cmp     #$25
	bne     L0C03
	lda     #$01
	sta     _rda
	jmp     L0C07
L0C03:	lda     _rdt
	sec
	sbc     #$20
	sta     __n
	jsr     _ul_putc
;
; if (rda) { update_cycle (); ++ rdy; }
;
L0C07:	lda     _rda
	beq     L0BF4
	jsr     _update_cycle
	inc     _rdy
;
; } 
;
	jmp     L0BF4
;
; }
;
L0BF5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_do: near

.segment	"CODE"

;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; rdit = !!(prx & 0x100);
;
	lda     _prx+1
	and     #$01
	tax
	lda     #$00
	jsr     bnegax
	jsr     bnegax
	sta     _rdit
;
; rds16 = rdit ? 256 : 0;
;
	lda     _rdit
	beq     L0C17
	ldx     #$01
	jmp     L150F
L0C17:	tax
L150F:	lda     #$00
	sta     _rds16
	stx     _rds16+1
;
; scroll_to ();
;
	jsr     _scroll_to
;
; rdm = TEXT_BOX_FRAME_TILE_OFFSET; textbox_frame ();
;
	lda     #$30
	sta     _rdm
	jsr     _textbox_frame
;
; NAMETABLE_BASE = rdit ? 0x2400 : 0x2000;
;
	lda     _rdit
	beq     L0C21
	ldx     #$24
	jmp     L1510
L0C21:	ldx     #$20
L1510:	lda     #$00
	sta     _nametable_base
	stx     _nametable_base+1
;
; textbox_draw_text ();
;
	jsr     _textbox_draw_text
;
; update_cycle ();
;
L0C26:	jsr     _update_cycle
;
; pad_read (); if (pad_this_frame & (PAD_A|PAD_B)) break;
;
	jsr     _pad_read
	lda     _pad_this_frame
	and     #$03
	beq     L0C26
;
; rdm = 0; textbox_frame ();
;
	lda     #$00
	sta     _rdm
	jsr     _textbox_frame
;
; rds16 = prx - 124;
;
	lda     _prx
	ldx     _prx+1
	sec
	sbc     #$7C
	bcs     L0C33
	dex
L0C33:	sta     _rds16
	stx     _rds16+1
;
; if (rds16 < 0) rds16 = 0;
;
	cpx     #$80
	bcc     L0C34
	lda     #$00
	sta     _rds16
	sta     _rds16+1
;
; if (rds16 > 256) rds16 = 256;
;
L0C34:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$01
	bvs     L0C3A
	eor     #$80
L0C3A:	bpl     L0C38
	ldx     #$01
	lda     #$00
	sta     _rds16
	stx     _rds16+1
;
; rds16 &= 0xfff8;
;
L0C38:	lda     _rds16
	ldx     _rds16+1
	and     #$F8
	sta     _rds16
	stx     _rds16+1
;
; scroll_to ();
;
	jmp     _scroll_to

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_SIZE; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L0C43:	lda     _gpit
	cmp     #$0A
	bcs     L0C44
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; ++ gpit) {
;
	inc     _gpit
	jmp     L0C43
;
; }
;
L0C44:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; __asm__ ("lda %v", hrt); 
;
	lda     _hrt
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("bne %g", hotspots_paint_do);
;
	bne     L0C54
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("jsr decsp3");  // Make room
;
L0C54:	jsr     decsp3
;
; __asm__ ("ldy #2");   // Y will index SP
;
	ldy     #2
;
; __asm__ ("lda %v", hrx);
;
	lda     _hrx
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", scroll_x);
;
	sbc     _scroll_x
;
; __asm__ ("sta (sp), y");
;
	sta     (sp),y
;
; __asm__ ("dey");
;
	dey
;
; __asm__ ("lda %v", hry);
;
	lda     _hry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", SPRITE_ADJUST);
;
	adc     #$07
;
; __asm__ ("sta (sp), y");
;
	sta     (sp),y
;
; __asm__ ("dey");
;
	dey
;
; __asm__ ("lda %v", oam_index);
;
	lda     _oam_index
;
; __asm__ ("sta (sp), y");
;
	sta     (sp),y
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("adc #<(%v)", spr_hs); // LSB
;
	adc     #<(_spr_hs)
;
; __asm__ ("sta ptr1");   // temporally save
;
	sta     ptr1
;
; __asm__ ("lda #0");
;
	tya
;
; __asm__ ("adc #>(%v)", spr_hs); // MSB
;
	adc     #>(_spr_hs)
;
; __asm__ ("sta ptr1+1");   // MSB
;
	sta     ptr1+1
;
; __asm__ ("ldy #1");
;
	iny
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("dey");
;
	dey
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("jsr %v", oam_meta_spr);
;
	jsr     _oam_meta_spr
;
; __asm__ ("sta %v", oam_index);
;
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_hotspots + (HS_CUR_PANT << 1));
;
	ldx     #$00
	lda     _n_pant
	clc
	adc     _gpit
	bcc     L1511
	inx
L1511:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     _c_hotspots
	sta     _gp_gen
	lda     tmp1
	adc     _c_hotspots+1
	sta     _gp_gen+1
;
; SET_FROM_PTR (hrt, gp_gen); ++ gp_gen;
;
	ldy     #0
	lda     (_gp_gen),y
	sta     _hrt
	inc     _gp_gen
	bne     L0C7D
	inc     _gp_gen+1
;
; SET_FROM_PTR (rda, gp_gen);
;
L0C7D:	lda     (_gp_gen),y
	sta     _rda
;
; if (hrt && hact [HS_CUR_PANT]) {
;
	lda     _hrt
	beq     L0C81
	ldx     #$00
	lda     _n_pant
	clc
	adc     _gpit
	bcc     L1512
	inx
L1512:	sta     ptr1
	txa
	clc
	adc     #>(_hact)
	sta     ptr1+1
	ldy     #<(_hact)
	lda     (ptr1),y
	beq     L0C81
;
; hry = rda & 0xf0; hrx = rda << 4;
;
	lda     _rda
	and     #$F0
	sta     _hry
	ldx     #$00
	lda     _rda
	jsr     aslax4
	sta     _hrx
	stx     _hrx+1
;
; } else hrt = 0;
;
	rts
L0C81:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ interactives_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interactives_paint: near

.segment	"CODE"

;
; gpit = interactives_index; while (gpit --) {
;
	lda     _interactives_index
	sta     _gpit
L0C91:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	bne     L1519
;
; }
;
	rts
;
; rda = interactives_f [gpit];
;
L1519:	ldy     _gpit
	lda     _interactives_f,y
	sta     _rda
;
; rdaa = interactives_x [gpit] << 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _interactives_x,y
	jsr     aslax4
	sta     _rdaa
	stx     _rdaa+1
;
; if (rdaa >= scroll_x && rdaa <= scroll_x + 240)
;
	cmp     _scroll_x
	txa
	sbc     _scroll_x+1
	bvs     L1514
	eor     #$80
L1514:	bpl     L0C91
	lda     _rdaa
	ldx     _rdaa+1
	jsr     pushax
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$F0
	bcc     L0C9F
	inx
L0C9F:	jsr     tosicmp
	bmi     L0C9D
	bne     L0C91
;
; rdaa - scroll_x, interactives_y [gpit] + SPRITE_ADJUST,
;
L0C9D:	jsr     decsp3
	lda     _rdaa
	sec
	sbc     _scroll_x
	pha
	lda     _rdaa+1
	sbc     _scroll_x+1
	pla
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _interactives_y,y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1516
	sec
L1516:	sbc     #$10
	bcs     L1517
	sec
L1517:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda & 0x80 ? flags [rda & 0x7f] : rda]
;
	lda     _rda
	and     #$80
	beq     L0CAE
	lda     _rda
	and     #$7F
	sta     ptr1
	tya
	clc
	adc     #>(_flags)
	sta     ptr1+1
	ldy     #<(_flags)
	lda     (ptr1),y
	jmp     L1515
L0CAE:	lda     _rda
L1515:	ldx     #$00
	asl     a
	bcc     L1518
	inx
	clc
L1518:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda & 0x80 ? flags [rda & 0x7f] : rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	jmp     L0C91

.endproc

; ---------------------------------------------------------------
; void __near__ interactives_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interactives_add: near

.segment	"CODE"

;
; interactives_x [interactives_index] = sc_x;
;
	ldy     _interactives_index
	lda     _sc_x
	sta     _interactives_x,y
;
; interactives_y [interactives_index] = (sc_y << 4);
;
	lda     #<(_interactives_y)
	ldx     #>(_interactives_y)
	clc
	adc     _interactives_index
	bcc     L0CBA
	inx
L0CBA:	sta     ptr1
	stx     ptr1+1
	lda     _sc_y
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; interactives_f [interactives_index ++] = sc_n;
;
	lda     _interactives_index
	pha
	clc
	adc     #$01
	sta     _interactives_index
	pla
	clc
	adc     #<(_interactives_f)
	sta     ptr1
	tya
	adc     #>(_interactives_f)
	sta     ptr1+1
	lda     _sc_n
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; if (!warp_to_level) player_stop ();
;
	lda     _warp_to_level
	bne     L0CCC
	jsr     _player_stop
;
; pfacing = 0;
;
L0CCC:	lda     #$00
	sta     _pfacing
;
; pfr = 0;
;
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pflickering = pbouncing = 0;
;
	sta     _pbouncing
	sta     _pflickering
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$00
	sta     _vertical_engine_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) -- plife; else game_over = 1;
;
	lda     _plife
	beq     L0CFD
	dec     _plife
	jmp     L0D00
L0CFD:	lda     #$01
	sta     _game_over
;
; pflickering = PLAYER_FLICKERS;
;
L0D00:	lda     #$64
	sta     _pflickering
;
; use_ct = 0;
;
	lda     #$00
	sta     _use_ct
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; px = px_safe; 
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe; 
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; n_pant = n_pant_safe;  
;
	lda     _n_pant_safe
	sta     _n_pant
;
; player_stop ();
;
	jsr     _player_stop
;
; music_pause (0);
;
	lda     #$00
	jmp     _music_pause

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pflickering) -- pflickering;
;
	lda     _pflickering
	beq     L0D16
	dec     _pflickering
;
; if (pbouncing) -- pbouncing;
;
L0D16:	lda     _pbouncing
	beq     L0D19
	dec     _pbouncing
;
; if (use_ct) {
;
L0D19:	lda     _use_ct
	beq     L0D1C
;
; if (use_sub_ct) -- use_sub_ct; else {
;
	lda     _use_sub_ct
	beq     L0D1E
	dec     _use_sub_ct
	jmp     L0D31
;
; if (use_ct < USE_ANIM_MAX_FRAMES) {
;
L0D1E:	lda     _use_ct
	cmp     #$08
	bcs     L0D22
;
; ++ use_ct;
;
	inc     _use_ct
;
; use_sub_ct = (use_ct == USE_ANIM_MAX_FRAMES) ? 50 : USE_ANIM_FRAMES_PER_STEP;
;
	lda     _use_ct
	cmp     #$08
	bne     L0D28
	lda     #$32
	jmp     L0D2A
L0D28:	lda     #$04
L0D2A:	sta     _use_sub_ct
;
; use_type == USE_TYPE_SCRIPTING && 
;
	lda     _use_type
	cmp     #$03
	bne     L0D31
;
; fire_script_success == 0 && 
;
	lda     _fire_script_success
	bne     L0D31
;
; use_ct == USE_ANIM_MAX_FRAMES
;
	lda     _use_ct
;
; ) ++ use_ct;
;
	cmp     #$08
	bne     L0D31
	inc     _use_ct
;
; } else use_ct = 0;
;
	jmp     L0D31
L0D22:	lda     #$00
	sta     _use_ct
;
; a_button = b_button = pad0 = 0;
;
L0D31:	lda     #$00
	sta     _pad0
	sta     _b_button
	sta     _a_button
;
; hitv = hith = 0;
;
L0D1C:	sta     _hith
	sta     _hitv
;
; pcx = prx; pcy = pry;
;
	lda     _prx
	sta     _pcx
	lda     _prx+1
	sta     _pcx+1
	lda     _pry
	sta     _pcy
;
; pnotsafe = 0;
;
	lda     #$00
	sta     _pnotsafe
;
; oppossee = ppossee;
;
	lda     _ppossee
	sta     _oppossee
;
; ppossee = 0;
;
	lda     #$00
	sta     _ppossee
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$02
	beq     L0D4C
;
; if (!pj) {
;
	lda     _pj
	bne     L0D4C
;
; pvy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L0D4B
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L0D4B:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L0D4E
	eor     #$80
L0D4E:	bpl     L0D4C
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L0D4C:	lda     _pgotten
	beq     L0D51
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; py += pvy;
;
L0D51:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L0D57
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L0D57:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; cx1 = prx >> 4;
;
	lda     _prx
	ldx     _prx+1
	jsr     shrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	lda     _prx
	ldx     _prx+1
	clc
	adc     #$07
	bcc     L0D63
	inx
L0D63:	jsr     shrax4
	sta     _cx2
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	bcc     L0D66
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0D6E
	lda     _at2
	and     #$08
	beq     L0D6D
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L0D6E:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L0D76
	inx
L0D76:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0DB9
L0D6D:	lda     _at1
	and     #$01
	jne     L1520
	lda     _at2
	and     #$01
	jeq     L0DB9
;
; } else if (rds16 > 0)
;
	jmp     L1520
L0D66:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L0D8A
	eor     #$80
L0D8A:	jpl     L0DB9
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L0D8F
	inx
L0D8F:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry <= ((cy1 - 1) << 4) + (pvy >> 6) && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L0D95
	ldx     #$FF
L0D95:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _pvy
	ldx     _pvy+1
	jsr     asrax4
	jsr     asrax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     tosicmp
	beq     L151D
	bcs     L0D91
;
; (at1 & 12) || (at2 & 12)
;
L151D:	lda     _at1
	and     #$0C
	bne     L0D92
	lda     _at2
	and     #$0C
;
; )
;
	beq     L0D91
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L0D92:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
	lda     _at1
	and     #$01
	bne     L0DAD
	lda     _at2
	and     #$01
	beq     L0DB9
L0DAD:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0DB9
L0D91:	lda     _at1
	and     #$01
	bne     L0DB5
	lda     _at2
	and     #$01
	beq     L0DB9
;
; if ((pry & 15) > 4) hitv = 1;
;
L0DB5:	lda     _pry
	and     #$0F
	cmp     #$05
	bcc     L0DB9
L1520:	lda     #$01
	sta     _hitv
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L0DB9:	lda     _vertical_engine_type
	jne     L0DE0
;
; && !pj
;
	lda     _a_button
	beq     L0DC7
;
; && (
;
	lda     _pj
	bne     L0DC7
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L0DC1
	lda     _ppossee
	bne     L0DC1
;
; )
;
	lda     _hitv
	beq     L0DC7
;
; jump_start ();
;
L0DC1:	jsr     _jump_start
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L0DC9
	lda     _hitv
	bne     L0DC9
	lda     _pnotsafe
	beq     L0DCA
L0DC9:	lda     #$01
L0DCA:	jsr     bnega
	beq     L0DC7
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (pad0 & PAD_A) {
;
L0DC7:	lda     _pad0
	and     #$01
	beq     L151A
;
; if (pj) {
;
	lda     _pj
	beq     L0DE0
;
; if (pctj < PLAYER_AY_JUMP) pvy -= (PLAYER_AY_JUMP - (pctj));
;
	lda     _pctj
	cmp     #$0C
	bcs     L0DD0
	lda     #$0C
	sec
	sbc     _pctj
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
L0DD0:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$FF
	bvc     L0DD8
	eor     #$80
L0DD8:	bpl     L0DD6
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; ++ pctj; if (pctj == 16) pj = 0; 
;
L0DD6:	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L0DE0
	lda     #$00
;
; pj = 0; 
;
L151A:	sta     _pj
;
; if (!(pad0 & PAD_LEFT || pad0 & PAD_RIGHT)) {
;
L0DE0:	lda     _pad0
	and     #$40
	bne     L0DE5
	lda     _pad0
	and     #$80
	beq     L0DE6
L0DE5:	lda     #$01
L0DE6:	jsr     bnega
	beq     L0DF7
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0DE9
	eor     #$80
L0DE9:	bpl     L0DE7
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$10
	sta     _pvx
	bcs     L0DEC
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L0DEC:	ldx     _pvx+1
	cpx     #$80
	bcc     L0DF7
;
; } else if (pvx < 0) {
;
	jmp     L1521
L0DE7:	ldx     _pvx+1
	cpx     #$80
	bcc     L0DF7
;
; pvx += PLAYER_RX;
;
	lda     #$10
	clc
	adc     _pvx
	sta     _pvx
	bcc     L0DF6
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L0DF6:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0DF9
	eor     #$80
L0DF9:	bpl     L0DF7
L1521:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pad0 & PAD_LEFT) {
;
L0DF7:	lda     _pad0
	and     #$40
	beq     L0E00
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$10
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L0E02
	eor     #$80
L0E02:	bpl     L0E00
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$10
	sta     _pvx
	bcs     L0E00
	dec     _pvx+1
;
; if (pad0 & PAD_RIGHT) {
;
L0E00:	lda     _pad0
	and     #$80
	beq     L0E0A
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L0E0C
	eor     #$80
L0E0C:	bpl     L0E0A
;
; pvx += PLAYER_AX;
;
	lda     #$10
	clc
	adc     _pvx
	sta     _pvx
	bcc     L0E0A
	inc     _pvx+1
;
; px += pvx;
;
L0E0A:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L0E12
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) { px = 4 << FIXBITS; prx = 4;}
;
L0E12:	ldx     _px+1
	cpx     #$01
	bcs     L0E16
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
	dex
	lda     #$04
	sta     _prx
	stx     _prx+1
;
; else if (px > (MAX_PRX << FIXBITS)) { px = MAX_PRX << FIXBITS; prx = MAX_PRX; }
;
	jmp     L0E25
L0E16:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$7D
	bcc     L0E1E
	ldx     #$7D
	lda     #$00
	sta     _px
	stx     _px+1
	ldx     #$01
	lda     #$F4
	sta     _prx
	stx     _prx+1
;
; else player_to_pixels ();
;
	jmp     L0E25
L0E1E:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L0E25:	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L0E2D
	inx
L0E2D:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L0E62
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L0E32
;
; cx1 = cx2 = prx >> 4; 
;
	lda     _prx
	ldx     _prx+1
	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = (cx1 + 1) << 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L0E3A
	inx
L0E3A:	jsr     shlax4
	sta     _gpint
	stx     _gpint+1
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0E4C
;
; } else {
;
	jmp     L0E4C
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L0E32:	lda     _prx
	ldx     _prx+1
	clc
	adc     #$08
	bcc     L0E43
	inx
L0E43:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0E48
	dex
L0E48:	jsr     shlax4
	clc
	adc     #$08
	bcc     L0E49
	inx
L0E49:	sta     _gpint
	stx     _gpint+1
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L0E4C:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0E4F
	lda     _at2
	and     #$08
	beq     L0E4E
;
; pvx = 0; prx = PRXA; px = prx << FIXBITS; pfiring = 1;
;
L0E4F:	lda     #$00
	sta     _pvx
	sta     _pvx+1
	lda     _gpint
	ldx     _gpint+1
	sta     _prx
	stx     _prx+1
	jsr     shlax4
	jsr     shlax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; } else {
;
	jmp     L0E5B
;
; hith = ((at1 & 1) || (at2 & 1));
;
L0E4E:	lda     _at1
	and     #$01
	bne     L0E5E
	lda     _at2
	and     #$01
	beq     L0E61
L0E5E:	lda     #$01
L0E61:	sta     _hith
;
; if (pvy > 0) hith &= ((pry & 15) > 4);
;
L0E5B:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L0E64
	eor     #$80
L0E64:	bpl     L0E62
	lda     _pry
	and     #$0F
	cmp     #$05
	lda     #$00
	rol     a
	and     _hith
	sta     _hith
;
; phit = 0;
;
L0E62:	lda     #$00
	sta     _phit
;
; if (pgotten == 0) {
;
	lda     _pgotten
	jne     L0EAF
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); pry = pcy; py = pry << FIXBITS; } 
;
	lda     _hitv
	beq     L0E6D
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0E75
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0E7A
	eor     #$80
L0E7A:	bpl     L0E7B
	ldx     #$00
	lda     #$E0
	jmp     L0E82
L0E7B:	ldx     #$FF
	lda     #$20
	jmp     L0E82
L0E75:	tax
L0E82:	sta     _pvy
	stx     _pvy+1
	lda     _pcy
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; else
;
	jmp     L0E8A
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); prx = pcx; px = prx << FIXBITS; }
;
L0E6D:	lda     _hith
	beq     L0E8A
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0E92
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0E97
	eor     #$80
L0E97:	bpl     L0E98
	ldx     #$00
	lda     #$E0
	jmp     L0E9F
L0E98:	ldx     #$FF
	lda     #$20
	jmp     L0E9F
L0E92:	tax
L0E9F:	sta     _pvx
	stx     _pvx+1
	lda     _pcx
	ldx     _pcx+1
	sta     _prx
	stx     _prx+1
	jsr     shlax4
	jsr     shlax2
	sta     _px
	stx     _px+1
;
; if (!pflickering && !pbouncing) if (phit) { 
;
L0E8A:	lda     _pflickering
	bne     L0EAF
	lda     _pbouncing
	bne     L0EAF
	lda     _phit
	beq     L0EAF
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; en_sg_2 = 1;
;
	lda     #$01
	sta     _en_sg_2
;
; if (en_sg_2)
;
	lda     _en_sg_2
	beq     L0EAF
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; ) {
;
L0EAF:	lda     _b_button
	beq     L0EB5
;
; if (b_button && use_ct == 0) {
;
	lda     _b_button
	beq     L0EB5
	lda     _use_ct
	bne     L0EB5
;
; use_ct = 1;
;
	lda     #$01
	sta     _use_ct
;
; run_fire_script_do = 1;
;
	sta     _run_fire_script_do
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; use_type = USE_TYPE_SCRIPTING;
;
	lda     #$03
	sta     _use_type
;
; if (use_ct) {
;
L0EB5:	lda     _use_ct
	beq     L0EC1
;
; psprid = CELL_USE + use_ct - 1;
;
	lda     _use_ct
	clc
	adc     #$07
	sec
	sbc     #$01
;
; } else 
;
	jmp     L151C
;
; if (ppossee || pgotten) {
;
L0EC1:	lda     _ppossee
	bne     L0EC9
	lda     _pgotten
	beq     L0EC8
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L0EC9:	lda     _pvx
	cmp     #$41
	lda     _pvx+1
	sbc     #$00
	bvs     L0ECE
	eor     #$80
L0ECE:	bmi     L0ECC
	lda     _pvx
	cmp     #$C0
	lda     _pvx+1
	sbc     #$FF
	bvc     L0ED0
	eor     #$80
L0ED0:	bpl     L0ECB
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L0ECC:	lda     _prx
	ldx     _prx+1
	jsr     shrax3
	and     #$03
	clc
	adc     #$01
	bcc     L151C
;
; } else {
;
	jmp     L151C
;
; psprid = CELL_IDLE;
;
L0ECB:	lda     #$00
;
; } else {
;
	jmp     L151C
;
; if (pvy < PLAYER_VY_FALLING_MIN)
;
L0EC8:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$00
	bvc     L0EDD
	eor     #$80
L0EDD:	bpl     L0EDB
;
; psprid = CELL_ASCENDING;
;
	lda     #$05
;
; else
;
	jmp     L151C
;
; psprid = CELL_DESCENDING; 
;
L0EDB:	lda     #$06
L151C:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; __asm__ ("lda %v", _en_state);
;
	lda     __en_state
;
; __asm__ ("sta %v, y", en_state);
;
	sta     _en_state,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init_fp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init_fp: near

.segment	"CODE"

;
; if (gpit > 2) 
;
	lda     _gpit
	cmp     #$03
	bcc     L0F09
;
; _enf_x = (256 + _en_x) << 6;
;
	lda     __en_x
	ldx     #$01
	jsr     shlax4
	jsr     shlax2
;
; else
;
	jmp     L1523
;
; _enf_x = _en_x << 6;
;
L0F09:	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
L1523:	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << 6;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_boioiong_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_boioiong_init: near

.segment	"CODE"

;
; enems_init_fp ();
;
	jsr     _enems_init_fp
;
; _enf_vy = 0; 
;
	ldx     #$00
	txa
	sta     __enf_vy
	sta     __enf_vy+1
;
; _enf_vx = ADD_SIGN2 (_en_x2, _en_x1, rdm << FIXBITS);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L0F1C
	txa
	jmp     L0F28
L0F1C:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0F25
	beq     L0F25
	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jmp     L0F28
L0F25:	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jsr     negax
L0F28:	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3)); // * 12
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < NENEMS; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L0F34:	lda     _gpit
	cmp     #$06
	bcc     L1529
;
; }
;
	rts
;
; SET_FROM_PTR (_en_t, gp_gen); ++ gp_gen;
;
L1529:	ldy     #0
	lda     (_gp_gen),y
	sta     __en_t
	inc     _gp_gen
	bne     L0F40
	inc     _gp_gen+1
;
; _en_state = 0;
;
L0F40:	sty     __en_state
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L0F47
	inc     _gp_gen+1
;
; _en_y1 = rda & 0xf0;
;
L0F47:	lda     _rda
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L0F50
	inc     _gp_gen+1
;
; _en_y2 = rda & 0xf0;
;
L0F50:	lda     _rda
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; SET_FROM_PTR (rda, gp_gen); ++ gp_gen;
;
	lda     (_gp_gen),y
	sta     _rda
	inc     _gp_gen
	bne     L0F59
	inc     _gp_gen+1
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
L0F59:	lda     _rda
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = _en_x1;
;
	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;
;
	lda     __en_y1
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L0F66
	cmp     #$02
	beq     L0F66
	cmp     #$03
	beq     L0F66
	cmp     #$04
	jne     L0F64
;
; _en_ct = 0;   
;
L0F66:	sty     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L0F78
	tya
	jmp     L0F84
L0F78:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0F81
	beq     L0F81
	lda     _rdm
	jmp     L0F84
L0F81:	lda     _rdm
	jsr     negax
L0F84:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L0F8D
	tya
	jmp     L0F99
L0F8D:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L0F96
	beq     L0F96
	lda     _rdm
	jmp     L0F99
L0F96:	lda     _rdm
	jsr     negax
L0F99:	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L0F9D
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
	sta     _en_status,y
;
; } else {
;
	jmp     L0FA3
;
; en_status [gpit] = 0;
;
L0F9D:	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; _en_mx >>= 1;
;
	tax
	lda     __en_mx
	bpl     L0FA9
	dex
L0FA9:	jsr     asrax1
	sta     __en_mx
;
; _en_my >>= 1;
;
	ldx     #$00
	lda     __en_my
	bpl     L0FAC
	dex
L0FAC:	jsr     asrax1
	sta     __en_my
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
L0FA3:	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L0FAE
	beq     L0FAE
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L0FAE:	lda     __en_y1
	sec
	sbc     __en_y2
	bcc     L0F64
	beq     L0F64
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
L0F64:	ldy     _gpit
	lda     #$02
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < NENEMS; ++ gpit) {
;
	inc     _gpit
	jmp     L0F34

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; ++ en_initial; if (en_initial >= NENEMS) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$06
	bcc     L0FD3
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L0FD3:	lda     _en_initial
	sta     _gpit
;
; gpjt = NENEMS; while (gpjt --) {
;
	lda     #$06
	sta     _gpjt
L0FDB:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L1533
;
; }
;
	rts
;
; gpit += NENEMS-1; if (gpit > NENEMS-1) gpit -=NENEMS;
;
L1533:	lda     #$05
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$06
	bcc     L0FE0
	lda     _gpit
	sec
	sbc     #$06
	sta     _gpit
;
; en_x_offs = (gpit < 3 ? 0 : 256);
;
L0FE0:	lda     _gpit
	cmp     #$03
	bcs     L0FE7
	ldx     #$00
	jmp     L152E
L0FE7:	ldx     #$01
L152E:	lda     #$00
	sta     _en_x_offs
	stx     _en_x_offs+1
;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; __asm__ ("lda %v, y", en_state);
;
	lda     _en_state,y
;
; __asm__ ("sta %v", _en_state);
;
	sta     __en_state
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	jeq     L0FDB
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; en_spr_x_mod = 0;
;
	lda     #$00
	sta     _en_spr_x_mod
;
; calc_en_x_absolute ();
;
	jsr     _calc_en_x_absolute
;
; if (en_is_alive) {
;
	lda     _en_is_alive
	jeq     L10C6
;
; rdt = _en_t & 63;
;
	lda     __en_t
	and     #$3F
	sta     _rdt
;
; calc_en_x_absolute ();
;
	jsr     _calc_en_x_absolute
;
; pregotten = (prx + 7 >= EN_X_ABSOLUTE && prx <= EN_X_ABSOLUTE + 15);
;
	lda     _prx
	ldx     _prx+1
	clc
	adc     #$07
	bcc     L101A
	inx
L101A:	cmp     _rdaa
	txa
	sbc     _rdaa+1
	bcc     L101B
	lda     _prx
	ldx     _prx+1
	jsr     pushax
	lda     _rdaa
	ldx     _rdaa+1
	clc
	adc     #$0F
	bcc     L101C
	inx
L101C:	jsr     tosicmp
	bcc     L1019
	beq     L1019
L101B:	lda     #$00
	jmp     L101D
L1019:	lda     #$01
L101D:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y) + 4) >> 3) & 1;
;
	lda     __en_mx
	beq     L1024
	lda     __en_x
	jmp     L152F
L1024:	lda     __en_y
L152F:	ldx     #$00
	clc
	adc     #$04
	bcc     L1028
	inx
L1028:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; switch (rdt) {
;
	lda     _rdt
;
; }
;
	cmp     #$01
	beq     L102D
	cmp     #$02
	beq     L102D
	cmp     #$03
	beq     L102D
	cmp     #$04
	bne     L102B
;
; __asm__ ("ldx %v", gpit);
;
L102D:	ldx     _gpit
;
; __asm__ ("lda %v, x", en_status);
;
	lda     _en_status,x
;
; __asm__ ("beq %g", enl_movement_do);
;
	beq     L1037
;
; __asm__ ("lda %v", half_life);
;
	lda     _half_life
;
; __asm__ ("beq %g", enl_movement_done);
;
	beq     L1054
;
; __asm__ ("lda %v", _en_x);
;
L1037:	lda     __en_x
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_mx);
;
	adc     __en_mx
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", _en_my);
;
	adc     __en_my
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("cmp %v", _en_x1);
;
	cmp     __en_x1
;
; __asm__ ("beq %g", enl_h_chgd_do);
;
	beq     L1046
;
; __asm__ ("cmp %v", _en_x2);
;
	cmp     __en_x2
;
; __asm__ ("bne %g", enl_h_chgd_done);
;
	bne     L1049
;
; __asm__ ("lda #$0");
;
L1046:	lda     #$0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_mx);
;
	sbc     __en_mx
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v", _en_y);
;
L1049:	lda     __en_y
;
; __asm__ ("cmp %v", _en_y1);
;
	cmp     __en_y1
;
; __asm__ ("beq %g", enl_v_chgd_do);
;
	beq     L1051
;
; __asm__ ("cmp %v", _en_y2);
;
	cmp     __en_y2
;
; __asm__ ("bne %g", enl_v_chgd_done);
;
	bne     L1054
;
; __asm__ ("lda #$0");
;
L1051:	lda     #$0
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", _en_my);
;
	sbc     __en_my
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v", _en_mx);
;
L1054:	lda     __en_mx
;
; __asm__ ("jmp %g", enl_facing_do);
;
	bne     L105D
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("asl a");
;
L105D:	asl     a
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("rol a");
;
	rol     a
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("jsr %v", enems_facing);
;
	jsr     _enems_facing
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", en_fr);
;
	adc     _en_fr
;
; __asm__ ("adc %v", _en_facing);
;
	adc     __en_facing
;
; __asm__ ("sta %v", en_spr);
;
	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L102B:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; calc_en_x_absolute ();
;
	jsr     _calc_en_x_absolute
;
; if (!on_screen) goto skipall;
;
	lda     _on_screen
	jeq     L10C8
;
; if (!pkill) {
;
	lda     _pkill
	jne     L10C6
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
	lda     __en_t
	cmp     #$04
	jne     L108D
	lda     _pregotten
	jeq     L108D
	lda     _pgotten
	jne     L108D
	lda     _pj
	jne     L108D
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L1079
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L107B
	inx
L107B:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1079
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L107D
	inx
L107D:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L107A
	bne     L1079
;
; pgotten = 1;
;
L107A:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L1083
	dex
L1083:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L108A
	dex
L108A:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L1079:	lda     __en_my
	asl     a
	bcc     L152C
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L1092
	inx
L1092:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L152C
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L1093
	inx
L1093:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L108E
	beq     L108E
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L152C:	lda     __en_my
	sec
	sbc     #$01
	bvs     L1097
	eor     #$80
L1097:	jpl     L108D
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1099
	inx
L1099:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L109A
	dex
L109A:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L108D
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L109B
	inx
L109B:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L108E
	bne     L108D
;
; pgotten = 1;
;
L108E:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L10A2
	dex
L10A2:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L10A9
	dex
L10A9:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; if ((prx & 0x100) != (EN_X_ABSOLUTE & 0x100)) goto killdo;
;
L108D:	lda     _prx+1
	and     #$01
	tax
	lda     #$00
	jsr     pushax
	lda     _rdaa+1
	and     #$01
	tax
	lda     #$00
	jsr     tosicmp
	bne     L10C6
;
; en_is_alive == 0 // General condition.
;
	lda     _en_is_alive
;
; || _en_t == 4
;
	beq     L10C6
	lda     __en_t
;
; ) goto skipdo;
;
	cmp     #$04
	beq     L10C6
;
; touched == 0 &&
;
	lda     _touched
	bne     L10C6
;
; ) {
;
	jsr     _collide
	tax
	beq     L10C6
;
; en_sg_1 = 0;
;
	lda     #$00
	sta     _en_sg_1
;
; en_sg_2 = (pflickering == 0);
;
	lda     _pflickering
	jsr     booleq
	sta     _en_sg_2
;
; if (en_sg_2) { 
;
	lda     _en_sg_2
	beq     L10C0
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; touched = 1; 
;
L10C0:	lda     #$01
	sta     _touched
;
; if (en_spr != 0xff) {
;
L10C6:	lda     _en_spr
	cmp     #$FF
	beq     L10C8
;
; EN_X_ABSOLUTE + en_spr_x_mod - scroll_x,
;
	jsr     decsp3
	lda     _rdaa
	ldx     _rdaa+1
	clc
	adc     _en_spr_x_mod
	bcc     L152A
	inx
L152A:	sec
	sbc     _scroll_x
	pha
	txa
	sbc     _scroll_x+1
	pla
	ldy     #$02
	sta     (sp),y
;
; _en_y + SPRITE_ADJUST, 
;
	lda     __en_y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1530
	sec
L1530:	sbc     #$10
	bcs     L1531
	sec
L1531:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L1532
	inx
	clc
L1532:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L10C8:	jsr     _enems_update_unsigned_char_arrays
;
; } 
;
	jmp     L0FDB

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; _x = 2; _y = 3;  pr_str ("LIFE:00   ITEM:      KEYS:00");
;
	lda     #$02
	sta     __x
	lda     #$03
	sta     __y
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _y = 28; pr_str ("INTERACTIVES-THE MOJON TWINS");
;
	lda     #$1C
	sta     __y
	lda     #<(L0001+29)
	ldx     #>(L0001+29)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (olife != plife) {
;
	lda     _plife
	cmp     _olife
	beq     L10E2
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$07
	sta     __x
	lda     #$03
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; HS_INV_X, HS_INV_Y,
;
L10E2:	jsr     decsp3
	lda     #$88
	ldy     #$02
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [flags [FLAG_INVENTORY]]
;
	ldx     #$00
	lda     _flags
	asl     a
	bcc     L1536
	inx
	clc
L1536:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [flags [FLAG_INVENTORY]]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_byte: near

.segment	"CODE"

;
; return *script ++;
;
	lda     _script
	ldx     _script+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L11B9
	inx
L11B9:	sta     _script
	stx     _script+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_vbyte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_vbyte: near

.segment	"CODE"

;
; sc_c = *script ++;
;
	lda     _script
	ldx     _script+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L11BD
	inx
L11BD:	sta     _script
	stx     _script+1
	ldy     #$00
	lda     (regsave),y
	sta     _sc_c
;
; if (sc_c & 128) return flags [sc_c & 127];
;
	and     #$80
	beq     L11BE
	lda     _sc_c
	and     #$7F
	sta     ptr1
	tya
	clc
	adc     #>(_flags)
	sta     ptr1+1
	ldy     #<(_flags)
	ldx     #$00
	lda     (ptr1),y
	rts
;
; return sc_c;
;
L11BE:	ldx     #$00
	lda     _sc_c
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readxy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readxy: near

.segment	"CODE"

;
; sc_x = read_vbyte ();
;
	jsr     _read_vbyte
	sta     _sc_x
;
; sc_y = read_vbyte ();
;
	jsr     _read_vbyte
	sta     _sc_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_horizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_horizontal: near

.segment	"CODE"

;
; if (prx == 4 && 
;
	lda     _prx+1
	bne     L125E
	lda     _prx
	cmp     #$04
	bne     L125E
;
; pvx < 0
;
	ldx     _pvx+1
;
; ) {
;
	cpx     #$80
	bcc     L125E
;
; n_pant -= 2;
;
	lda     _n_pant
	sec
	sbc     #$02
	sta     _n_pant
;
; px = MAX_PRX << FIXBITS;
;
	ldx     #$7D
;
; } else if (prx == MAX_PRX && 
;
	jmp     L1539
L125E:	lda     _prx+1
	cmp     #$01
	bne     L126B
	lda     _prx
	cmp     #$F4
	bne     L126B
;
; pvx > 0
;
	lda     _pvx
;
; ) {
;
	cmp     #$01
;
; pvx > 0
;
	lda     _pvx+1
;
; ) {
;
	sbc     #$00
	bvs     L126C
	eor     #$80
L126C:	bmi     L1269
L126B:	rts
;
; n_pant += 2;
;
L1269:	lda     #$02
	clc
	adc     _n_pant
	sta     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
L1539:	lda     #$00
	sta     _px
	stx     _px+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_vertical (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_vertical: near

.segment	"CODE"

;
; if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	lda     _pry
	bne     L1273
	ldx     _pvy+1
	cpx     #$80
	bcc     L1273
	lda     _n_pant
	cmp     _c_map_w
	bcc     L1273
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$41
	lda     _pvy+1
	sbc     #$FF
	bvs     L127D
	eor     #$80
L127D:	bpl     L1281
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
;
	rts
L1273:	lda     _pry
	cmp     #$C0
	bcc     L1283
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L1284
	eor     #$80
L1284:	bpl     L1283
	lda     _n_pant
	jsr     pusha0
	lda     _c_map_size
	sec
	sbc     _c_map_w
	jsr     tosicmp0
	bcc     L1282
L1283:	rts
;
; n_pant += c_map_w;
;
L1282:	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; }
;
L1281:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_do: near

.segment	"CODE"

;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("bne %g", hrt_interaction_coll_1);
;
	bne     L128D
;
; __asm__ ("rts");
;
	rts
;
; __asm__ ("lda %v", prx);
;
L128D:	lda     _prx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #4");
;
	adc     #4
;
; __asm__ ("cmp %v", hrx);
;
	cmp     _hrx
;
; __asm__ ("bcc %g", hrt_interaction_done);
;
	bcc     L1294
;
; __asm__ ("lda %v", hrx);
;
	lda     _hrx
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #11");
;
	adc     #11
;
; __asm__ ("cmp %v", prx);
;
	cmp     _prx
;
; __asm__ ("bcc %g", hrt_interaction_done);
;
	bcc     L1294
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #8"); 
;
	adc     #8
;
; __asm__ ("cmp %v", hry);
;
	cmp     _hry
;
; __asm__ ("bcc %g", hrt_interaction_done);
;
	bcc     L1294
;
; __asm__ ("lda %v", hry);
;
	lda     _hry
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #7");
;
	adc     #7
;
; __asm__ ("cmp %v", pry);
;
	cmp     _pry
;
; __asm__ ("jmp %g", hrt_interaction_pre);
;
	bcs     L12A5
;
; __asm__ ("rts");
;
L1294:	rts
;
; use_ct == 0 && b_button 
;
L12A5:	lda     _use_ct
	bne     L12A7
;
; && ppossee
;
	lda     _b_button
	beq     L12A7
;
; ) {
;
	lda     _ppossee
	beq     L12A7
;
; use_ct = 1; use_sub_ct = USE_ANIM_FRAMES_PER_STEP;
;
	lda     #$01
	sta     _use_ct
	lda     #$04
	sta     _use_sub_ct
;
; b_button = a_button = 0;
;
	lda     #$00
	sta     _a_button
	sta     _b_button
;
; use_type = USE_TYPE_HOTSPOT;
;
	lda     #$01
	sta     _use_type
;
; use_ct != USE_ANIM_INTERACT_ON ||
;
L12A7:	lda     _use_ct
	cmp     #$03
	bne     L12B5
;
; use_sub_ct != USE_ANIM_FRAMES_PER_STEP ||
;
	lda     _use_sub_ct
	cmp     #$04
	bne     L12B5
;
; use_type != USE_TYPE_HOTSPOT
;
	lda     _use_type
;
; ) return;
;
	cmp     #$01
	beq     L12B4
L12B5:	rts
;
; __asm__ ("lda #0");
;
L12B4:	lda     #0
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", plife);
;
	lda     _plife
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc #%b", PLAYER_REFILL);
;
	adc     #$01
;
; __asm__ ("sta %v", plife);
;
	sta     _plife
;
; __asm__ ("lda #%b", SFX_USE);
;
	lda     #$03
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; if (rda) {
;
	lda     _rda
	beq     L12C4
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [HS_CUR_PANT] = 0;
;
	tax
	lda     _n_pant
	clc
	adc     _gpit
	bcc     L153B
	inx
	clc
L153B:	adc     #<(_hact)
	sta     ptr1
	txa
	adc     #>(_hact)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }
;
L12C4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   palts0;
;
	lda     #<(_palts0)
	sta     _c_pal_bg
	lda     #>(_palts0)
	sta     _c_pal_bg+1
;
; c_pal_fg =   palss0;
;
	lda     #<(_palss0)
	sta     _c_pal_fg
	lda     #>(_palss0)
	sta     _c_pal_fg+1
;
; c_ts_tmaps =  ts0_tmaps;
;
	lda     #<(_ts0_tmaps)
	sta     _c_ts_tmaps
	lda     #>(_ts0_tmaps)
	sta     _c_ts_tmaps+1
;
; c_ts_pals =  ts0_pals;
;
	lda     #<(_ts0_pals)
	sta     _c_ts_pals
	lda     #>(_ts0_pals)
	sta     _c_ts_pals+1
;
; c_behs =   behs0;
;
	lda     #<(_behs0)
	sta     _c_behs
	lda     #>(_behs0)
	sta     _c_behs+1
;
; spr_enems =  spr_enems0;
;
	lda     #<(_spr_enems0)
	sta     _spr_enems
	lda     #>(_spr_enems0)
	sta     _spr_enems+1
;
; c_map =  map_0;
;
	lda     #<(_map_0)
	sta     _c_map
	lda     #>(_map_0)
	sta     _c_map+1
;
; c_enems =   enems_0;
;
	lda     #<(_enems_0)
	sta     _c_enems
	lda     #>(_enems_0)
	sta     _c_enems+1
;
; c_hotspots =  hotspots_0;
;
	lda     #<(_hotspots_0)
	sta     _c_hotspots
	lda     #>(_hotspots_0)
	sta     _c_hotspots+1
;
; KILLABLE_ENEMS_0;
;
	lda     #$05
	sta     _c_max_enems
;
; c_map_w = MAP_W;
;
	lda     #$02
	sta     _c_map_w
;
; c_map_h = MAP_H;
;
	lda     #$05
	sta     _c_map_h
;
; rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
;
	sta     _rda
	lda     #$00
L153C:	sta     _c_map_size
	lda     _rda
	pha
	sec
	sbc     #$01
	sta     _rda
	pla
	tax
	beq     L12F0
	lda     _c_map_w
	clc
	adc     _c_map_size
	jmp     L153C
;
; pal_bg (c_pal_bg);
;
L12F0:	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; if (!warp_to_level) {
;
	lda     _warp_to_level
	bne     L12FB
;
; n_pant = SCR_INI;
;
	sta     _n_pant
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldx     #$39
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldx     #$24
	sta     _py
	stx     _py+1
;
; player_to_pixels ();
;
L12FB:	jsr     _player_to_pixels
;
; player_init ();
;
	jsr     _player_init
;
; if (!warp_to_level) use_ct = 0;
;
	lda     _warp_to_level
	bne     L1308
	sta     _use_ct
;
; olife = oammo = oobjs = okeys = 0xff;
;
L1308:	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) {
;
	lda     _ft
	bne     L1314
;
; fade_out (); 
;
	jsr     _fade_out
;
; } else {
;
	jmp     L1543
;
; ft = 0;
;
L1314:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
L1543:	jsr     _ppu_off
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; enems_load ();
;
	jsr     _enems_load
;
; for (gpit = 0; gpit < 2; gpit ++) {
;
	lda     #$00
L154B:	sta     _gpit
	cmp     #$02
	jcs     L1320
;
; hotspots_create ();
;
	jsr     _hotspots_create
;
; hrx &= 0x00ff;
;
	lda     _hrx
	sta     _hrx
	lda     #$00
	sta     _hrx+1
;
; if (gpit) hrx |= 0x0100;
;
	lda     _gpit
	beq     L132A
	lda     _hrx
	sta     _hrx
	lda     _hrx+1
	ora     #$01
	sta     _hrx+1
;
; d_hrx [gpit] = hrx;
;
L132A:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1544
	inx
	clc
L1544:	adc     #<(_d_hrx)
	sta     ptr1
	txa
	adc     #>(_d_hrx)
	sta     ptr1+1
	lda     _hrx
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     _hrx+1
	sta     (ptr1),y
;
; d_hry [gpit] = hry;
;
	ldy     _gpit
	lda     _hry
	sta     _d_hry,y
;
; d_hrt [gpit] = hrt;
;
	ldy     _gpit
	lda     _hrt
	sta     _d_hrt,y
;
; *((unsigned char *) 0xfc + gpit*2) = MSB(d_hrx [gpit]);
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1545
	inx
	clc
L1545:	adc     #$FC
	bcc     L133B
	inx
L133B:	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1546
	inx
	clc
L1546:	adc     #<(_d_hrx)
	sta     ptr1
	txa
	adc     #>(_d_hrx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	txa
	jsr     staspidx
;
; *((unsigned char *) 0xfd + gpit*2) = LSB(d_hrx [gpit]);
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1547
	inx
	clc
L1547:	adc     #$FD
	bcc     L1343
	inx
L1343:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1548
	inx
	clc
L1548:	adc     #<(_d_hrx)
	sta     ptr1
	txa
	adc     #>(_d_hrx)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     (sreg),y
;
; for (gpit = 0; gpit < 2; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L154B
;
; f_zone_ac = 0;
;
L1320:	lda     #$00
	sta     _f_zone_ac
;
; fzx1 = fzx2 = fzy1 = fzy2 = 240;
;
	lda     #$F0
	sta     _fzy2
	sta     _fzy1
	sta     _fzx2
	sta     _fzx1
;
; draw_scr ();
;
	jsr     _draw_scr
;
; interactives_index = 0;
;
	lda     #$00
	sta     _interactives_index
;
; interactives_interact_with = 0xff;
;
	lda     #$FF
	sta     _interactives_interact_with
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; just_interacted = 0;
;
	lda     #$00
	sta     _just_interacted
;
; run_script (2 * MAP_SIZE + 1);
;
	lda     #$15
	jsr     pusha
	jsr     _run_script
;
; run_script (n_pant << 1);
;
	lda     _n_pant
	asl     a
	jsr     pusha
	jsr     _run_script
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
	lda     #$03
	sta     _gpit
L135E:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L135F
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L1363
	inx
L1363:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L135E
;
; oam_index = 4;
;
L135F:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
	stx     _prx+1
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; calc_scroll_pos ();
;
	jsr     _calc_scroll_pos
;
; enems_move ();
;
	jsr     _enems_move
;
; for (gpit = 0; gpit < 2; ++ gpit)  {
;
	lda     #$00
	sta     _gpit
L1370:	lda     _gpit
	cmp     #$02
	bcs     L1371
;
; hrx = d_hrx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1549
	inx
	clc
L1549:	adc     #<(_d_hrx)
	sta     ptr1
	txa
	adc     #>(_d_hrx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _hrx+1
	dey
	lda     (ptr1),y
	sta     _hrx
;
; hrt = d_hrt [gpit];
;
	ldy     _gpit
	lda     _d_hrt,y
	sta     _hrt
;
; if (hrx < scroll_x || hrx > scroll_x + 240 || hrt == 0) continue;
;
	lda     _hrx
	cmp     _scroll_x
	lda     _hrx+1
	sbc     _scroll_x+1
	bcc     L1372
	lda     _hrx
	ldx     _hrx+1
	jsr     pushax
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$F0
	bcc     L1381
	inx
L1381:	jsr     tosicmp
	beq     L154A
	bcs     L1372
L154A:	lda     _hrt
	beq     L1372
;
; hry = d_hry [gpit];
;
	ldy     _gpit
	lda     _d_hry,y
	sta     _hry
;
; hotspots_paint ();
;
	jsr     _hotspots_paint
;
; for (gpit = 0; gpit < 2; ++ gpit)  {
;
L1372:	inc     _gpit
	jmp     L1370
;
; interactives_paint ();
;
L1371:	jsr     _interactives_paint
;
; hud_update ();
;
	jsr     _hud_update
;
; update_cycle ();
;
	jsr     _update_cycle
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (MUSIC_INGAME);
;
	lda     #$00
	jsr     _music_play
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; run_script (2 * MAP_SIZE);
;
	lda     #$14
	jsr     pusha
	jsr     _run_script
;
; half_life = frame_counter = real_frame_counter = 0;
;
	lda     #$00
	sta     _real_frame_counter
	sta     _frame_counter
	sta     _half_life
;
; ntsc_frame = level_reset = warp_to_level = 0; 
;
	sta     _warp_to_level
	sta     _level_reset
	sta     _ntsc_frame
;
; oam_index = 4; ticker = 50;
;
	lda     #$04
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; if (n_pant != 0xfe && on_pant != 0xfe) 
;
L13AB:	lda     _n_pant
	cmp     #$FE
	beq     L13AE
	lda     _on_pant
	cmp     #$FE
	beq     L13AE
;
; hud_update ();
;
	jsr     _hud_update
;
; if (pkill) {
;
L13AE:	lda     _pkill
	beq     L13B3
;
; player_kill (); 
;
	jsr     _player_kill
;
; if (game_over || level_reset) break;   
;
L13B3:	lda     _game_over
	jne     L13AC
	lda     _level_reset
	jne     L13AC
;
; flick_override = 0;
;
	sta     _flick_override
;
; if (flick_override == 0) {
;
	lda     _flick_override
	bne     L13BB
;
; flickscreen_do_horizontal ();
;
	jsr     _flickscreen_do_horizontal
;
; flickscreen_do_vertical ();
;
	jsr     _flickscreen_do_vertical
;
; if (on_pant != n_pant) {
;
L13BB:	lda     _n_pant
	cmp     _on_pant
	beq     L13BF
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; update_cycle ();
;
L13BF:	jsr     _update_cycle
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; ++ real_frame_counter;
;
	inc     _real_frame_counter
;
; ++ ntsc_frame; if (ntsc_frame == 6) ntsc_frame = 0;
;
	inc     _ntsc_frame
	lda     _ntsc_frame
	cmp     #$06
	bne     L13CE
	lda     #$00
	sta     _ntsc_frame
;
; if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
;
L13CE:	lda     _paused
	jne     L13D2
	lda     _ntsc
	beq     L13D3
	lda     _ntsc_frame
	jeq     L13D2
;
; if (ticker) -- ticker; else ticker = 50;
;
L13D3:	lda     _ticker
	beq     L13D8
	dec     _ticker
	jmp     L13DB
L13D8:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L13DB:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; if (interactives_index) { 
;
	lda     _interactives_index
	jeq     L1417
;
; && use_ct == 0
;
	lda     _b_button
	jeq     L13F0
	lda     _use_ct
;
; ) {  
;
	jne     L13F0
;
; PRXA = prx + 4; rdy = pry + 8;
;
	lda     _prx
	ldx     _prx+1
	clc
	adc     #$04
	bcc     L13E9
	inx
L13E9:	sta     _gpint
	stx     _gpint+1
	lda     _pry
	clc
	adc     #$08
	sta     _rdy
;
; gpit = interactives_index; while (gpit --) {   
;
	lda     _interactives_index
	sta     _gpit
L13EF:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     L13F0
;
; rdaa = interactives_x [gpit] << 4; rdc = interactives_y [gpit];
;
	ldy     _gpit
	ldx     #$00
	lda     _interactives_x,y
	jsr     aslax4
	sta     _rdaa
	stx     _rdaa+1
	ldy     _gpit
	lda     _interactives_y,y
	sta     _rdc
;
; if (PRXA + 4 >= rdaa && PRXA <= rdaa + 19 && rdy >= rdc && rdy <= rdc + 15)
;
	lda     _gpint
	ldx     _gpint+1
	clc
	adc     #$04
	bcc     L13FC
	inx
L13FC:	cmp     _rdaa
	txa
	sbc     _rdaa+1
	bcc     L13EF
	lda     _gpint
	ldx     _gpint+1
	jsr     pushax
	lda     _rdaa
	ldx     _rdaa+1
	clc
	adc     #$13
	bcc     L13FE
	inx
L13FE:	jsr     tosicmp
	beq     L154F
	bcs     L13EF
L154F:	lda     _rdy
	cmp     _rdc
	bcc     L13EF
	lda     _rdy
	jsr     pusha0
	lda     _rdc
	clc
	adc     #$0F
	bcc     L13FF
	ldx     #$01
L13FF:	jsr     tosicmp
	bcc     L13FB
	bne     L13EF
;
; if (interactives_f [gpit] & 0x80) {
;
L13FB:	ldy     _gpit
	lda     _interactives_f,y
	and     #$80
	beq     L1401
;
; use_ct = 1; use_sub_ct = USE_ANIM_FRAMES_PER_STEP;
;
	lda     #$01
	sta     _use_ct
	lda     #$04
	sta     _use_sub_ct
;
; use_type = USE_TYPE_INTERACTIVE;
;
	lda     #$02
	sta     _use_type
;
; interactives_interact_with = gpit;
;
L1401:	lda     _gpit
	sta     _interactives_interact_with
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; if (interactives_interact_with != 0xff) {
;
L13F0:	lda     _interactives_interact_with
	cmp     #$FF
	beq     L1417
;
; rdc = interactives_f [interactives_interact_with];
;
	ldy     _interactives_interact_with
	lda     _interactives_f,y
	sta     _rdc
;
; script_arg = rdc;
;
	sta     _script_arg
;
; (use_ct == USE_ANIM_INTERACT_ON && use_sub_ct == USE_ANIM_FRAMES_PER_STEP)
;
	lda     _use_ct
	cmp     #$03
	bne     L154D
	lda     _use_sub_ct
	cmp     #$04
	beq     L1418
;
; || (rdc & 0x80) == 0
;
L154D:	lda     _rdc
	and     #$80
;
; )
;
	bne     L1417
;
; if (rdc & 0x80) { 
;
L1418:	lda     _rdc
	and     #$80
	beq     L141F
;
; rda = rdc & 0x7f;
;
	lda     _rdc
	and     #$7F
	sta     _rda
;
; rdb = flags [rda];
;
	ldy     _rda
	lda     _flags,y
	sta     _rdb
;
; flags [rda] = flags [FLAG_INVENTORY];
;
	ldy     _rda
	lda     _flags
	sta     _flags,y
;
; flags [FLAG_INVENTORY] = rdb;
;
	lda     _rdb
	sta     _flags
;
; sfx_play (SFX_OBJECT, 1);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; just_interacted = 1;
;
L141F:	lda     #$01
	sta     _just_interacted
;
; run_fire_script ();
;
	jsr     _run_fire_script
;
; fire_script_success = 1;
;
	lda     #$01
	sta     _fire_script_success
;
; interactives_interact_with = 0xff;
;
	lda     #$FF
	sta     _interactives_interact_with
;
; __asm__ ("ldy #0");
;
L1417:	ldy     #0
;
; __asm__ ("sty %v", gpit);
;
	sty     _gpit
;
; __asm__ ("lda %v", gpit);
;
L143B:	lda     _gpit
;
; __asm__ ("cmp #2");
;
	cmp     #2
;
; __asm__ ("jeq %g", dw_hotspots_done);
;
	beq     L143F
;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v, y", d_hrt);
;
	lda     _d_hrt,y
;
; __asm__ ("sta %v", hrt);
;
	sta     _hrt
;
; __asm__ ("lda %v, y", d_hry);
;
	lda     _d_hry,y
;
; __asm__ ("sta %v", hry);
;
	sta     _hry
;
; __asm__ ("lda %v", gpit);
;
	lda     _gpit
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("tay");
;
	tay
;
; __asm__ ("lda %v, y", d_hrx);
;
	lda     _d_hrx,y
;
; __asm__ ("sta %v", hrx);
;
	sta     _hrx
;
; __asm__ ("lda %v+1, y", d_hrx);
;
	lda     _d_hrx+1,y
;
; __asm__ ("sta %v+1", hrx);
;
	sta     _hrx+1
;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("jeq %g", dw_hotspots_continue); // DO
;
	beq     L144E
;
; __asm__ ("lda %v", hrx);
;
	lda     _hrx
;
; __asm__ ("cmp %v", scroll_x);
;
	cmp     _scroll_x
;
; __asm__ ("lda %v+1", hrx);
;
	lda     _hrx+1
;
; __asm__ ("sbc %v+1", scroll_x);
;
	sbc     _scroll_x+1
;
; __asm__ ("jmp %g", dw_hotspots_continue); // DO
;
	bcc     L144E
;
; __asm__ ("lda %v", hrx);
;
	lda     _hrx
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("sbc %v", scroll_x_r);
;
	sbc     _scroll_x_r
;
; __asm__ ("sta tmp1");
;
	sta     tmp1
;
; __asm__ ("lda %v+1", hrx);
;
	lda     _hrx+1
;
; __asm__ ("sbc %v+1", scroll_x_r);
;
	sbc     _scroll_x_r+1
;
; __asm__ ("ora tmp1");
;
	ora     tmp1
;
; __asm__ ("bcc %g", dw_hotspots_check_done); // SKIP
;
	bcc     L145E
;
; __asm__ ("jmp %g", dw_hotspots_continue); // DO
;
	bne     L144E
;
; hotspots_do ();
;
L145E:	jsr     _hotspots_do
;
; hotspots_paint ();
;
	jsr     _hotspots_paint
;
; __asm__ ("lda %v", hrt);
;
	lda     _hrt
;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("sta %v, y", d_hrt);
;
	sta     _d_hrt,y
;
; __asm__ ("inc %v", gpit);
;
L144E:	inc     _gpit
;
; __asm__ ("jmp %g", dw_hotspots);
;
	jmp     L143B
;
; if (run_fire_script_do && 
;
L143F:	lda     _run_fire_script_do
	beq     L1468
;
; use_ct == USE_ANIM_INTERACT_ON && 
;
	lda     _use_ct
	cmp     #$03
	bne     L1468
;
; use_sub_ct == USE_ANIM_FRAMES_PER_STEP &&
;
	lda     _use_sub_ct
	cmp     #$04
	bne     L1468
;
; use_type == USE_TYPE_SCRIPTING
;
	lda     _use_type
;
; ) {
;
	cmp     #$03
	bne     L1468
;
; run_fire_script ();
;
	jsr     _run_fire_script
;
; sfx_play (fire_script_success ? SFX_OBJECT : SFX_SPRING, 1);
;
	lda     _fire_script_success
	beq     L146F
	lda     #$02
	jmp     L1471
L146F:	lda     #$0B
L1471:	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; run_fire_script_do = 0;
;
	lda     #$00
	sta     _run_fire_script_do
;
; else
;
	jmp     L1477
;
; if (f_zone_ac && (prx >= fzx1 && prx <= fzx2 && pry >= fzy1 && pry <= fzy2)) {
;
L1468:	lda     _f_zone_ac
	beq     L1477
	lda     _prx
	cmp     _fzx1
	lda     _prx+1
	sbc     #$00
	bcc     L1477
	lda     _prx
	sec
	sbc     _fzx2
	sta     tmp1
	lda     _prx+1
	sbc     #$00
	ora     tmp1
	beq     L154E
	bcs     L1477
L154E:	lda     _pry
	cmp     _fzy1
	bcc     L1477
	lda     _pry
	sec
	sbc     _fzy2
	bcc     L1478
	bne     L1477
;
; run_fire_script ();
;
L1478:	jsr     _run_fire_script
;
; if (!warp_to_level && !pkill) {
;
L1477:	lda     _warp_to_level
	bne     L147F
	lda     _pkill
	bne     L147F
;
; player_move ();
;
	jsr     _player_move
;
; calc_scroll_pos ();
;
L147F:	jsr     _calc_scroll_pos
;
; script_result == 1
;
	lda     _script_result
;
; ) {
;
	cmp     #$01
	bne     L1485
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L13AC
;
; if (!warp_to_level) player_render ();
;
L1485:	lda     _warp_to_level
	bne     L148A
	jsr     _player_render
;
; enems_move ();
;
L148A:	jsr     _enems_move
;
; if (warp_to_level) {
;
	lda     _warp_to_level
	beq     L148E
;
; update_cycle (); music_stop (); break;
;
	jsr     _update_cycle
	jsr     _music_stop
	jmp     L13AC
;
; interactives_paint ();
;
L148E:	jsr     _interactives_paint
;
; if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
;
L13D2:	lda     _pad0
	and     #$16
	cmp     #$16
	beq     L13AC
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	jeq     L13AB
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L13AB
;
; fade_delay = 4;
;
L13AC:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
	sta     _first_game
;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; plife = PLAYER_LIFE;
;
L14B4:	lda     #$05
	sta     _plife
;
; scroll (0, SCROLL_Y);
;
	jsr     push0
	lda     #$08
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; first_game = 0;
;
	lda     #$00
	sta     _first_game
;
; }
;
	jmp     L14B4

.endproc

